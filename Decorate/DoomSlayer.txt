ACTOR DoomSlayer : EOA_Playerbase //DoomPlayer	
{
	Gravity 0.6 //INGENIOUS!!! :D
	Player.CrouchSprite "DSCR"
	Player.DisplayName "Doom Marine"
	Player.JumpZ 7
	Player.ForwardMove 1.5, 0.75 //[DoomKrakken]: We're disabling walking.  Move at top speed AT ALL TIMES. >:D
	Player.SideMove 1.5, 0.75
	/*
	Player.ViewBob 0.75
	*/
	Player.GruntSpeed 24
	Player.TeleportFreezeTime 0
	Player.SoundClass DoomSlayer
	Player.StartItem InFlightMobilityII
	Player.StartItem SavageryII
	Player.StartItem SavingThrowII
	Player.StartItem DazedAndConfusedII
	Player.StartItem SeekAndDestroyII
	Player.StartItem BloodFueledII
	Player.StartItem ArmoredOffensiveII
	Player.StartItem EquipmentPowerII
	Player.StartItem Bloodpunchefficiency
	Player.StartItem EOA_ThrustBootStart
	Player.StartItem EOA_ShotgunStart
	Player.StartItem EOAE_CrucibleStart
	Player.StartItem EOAE_FlameBelchStart
	Player.StartItem EOAE_IceBombStart
	Player.StartItem EOAE_FragGrenadeStart
	Player.StartItem EOA_Combatshotgun
	Player.StartItem EOA_ShellAmmo, 16
	Player.StartItem EOA_RocketAmmo, 9
	Player.StartItem EOA_CellAmmo, 50
	Player.StartItem EOA_FuelAmmo, 3
	Player.StartItem EOA_BulletAmmo, 60
	Player.startitem ExpSpeedyRecovery
	Player.StartItem MicroMissileCounter, 10
	//Player.startitem Equipmentcharge, 3
	//Player.startitem Equipmentcharge 3
	//Player.startitem Equipmentcharge
	Player.Startitem EOA_FragGrenadePickup, 3
	Player.Startitem EOA_FragGrenadePickup 3
	Player.Startitem EOA_FragGrenadePickup
	Player.StartItem EnvironmentalResistance
	//Player.StartItem EquipmentTriggerer
	//Player.StartItem EquipmentUnTriggerer
	//Player.StartItem CycleEquipmentLeft
	//Player.StartItem CycleEquipmentRight
	Player.StartItem StunBombReady
	Player.MaxHealth 100 //Default, but I think it's actually 0, which is then interpreted as being 100, which is why it keeps returning 0 if left unmodified...
	Var Int User_Walking;
	Player.WeaponSlot 1, EOA_Pistol
	Player.WeaponSlot 2, EOA_CombatShotgun
	Player.WeaponSlot 3, EOA_SuperShotgun
	Player.WeaponSlot 4, EOA_HeavyAssaultRifle
	Player.WeaponSlot 5, EOA_Chaingun
	Player.WeaponSlot 6, EOA_PlasmaRifle
	Player.WeaponSlot 7, EOA_GaussCannon
	Player.WeaponSlot 8, EOA_RocketLauncher
	Player.WeaponSlot 9, EOA_BFG, EOA_unmayker
	Player.AttackZOffset 16
	Player.ViewHeight 54
	+ALLOWPAIN
	//+DONTTHRUST
	//PainChance 256
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_Overlay(2, "Overlay.Movement", 1);
			A_Overlay(3, "Overlay.Cooldown", 1);
			A_Overlay(4, "Overlay.Mastery", 1);
			A_Overlay(5, "Overlay.Ammo", 1);
		}
	TrueSpawn:
		DOOM A -1
		Stop
	See:
		TNT1 A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_FORWARD|BT_BACK|BT_MOVELEFT|BT_MOVERIGHT), 1)
		Goto TrueSpawn
		DOOM AB 6
		{
			If (abs(GetPlayerInput(MODINPUT_FORWARDMOVE)) <= 6400 && abs(GetPlayerInput(MODINPUT_SIDEMOVE)) <= 6144)
			{
				A_SetTics(12);
			}
		}
		TNT1 A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_FORWARD|BT_BACK|BT_MOVELEFT|BT_MOVERIGHT), 1)
		Goto TrueSpawn
		DOOM CD 6
		{
			If (abs(GetPlayerInput(MODINPUT_FORWARDMOVE)) <= 6400 && abs(GetPlayerInput(MODINPUT_SIDEMOVE)) <= 6144)
			{
				A_SetTics(12);
			}
		}
		Goto TrueSpawn
	Missile:
		DOOM E 12
		Goto TrueSpawn
	Melee:
		DOOM F 6 BRIGHT
		Goto Missile
	Pain:
		DOOM G 8 A_Pain
		Goto TrueSpawn
	Pain.Slime:
		DOOM G 8 A_SpawnNoiseMaker("Player/Nukemelt", 2)
		Goto TrueSpawn
	Pain.Melee:
		DOOM G 8 A_SpawnNoiseMaker("Player/Hit", 2)
		Goto TrueSpawn
	Death:
	AltSkinDeath:
		DOOM H 10 A_PlayerScream
		DOOM I 10
		DOOM J 10 A_NoBlocking
		DOOM KLM 10
		DOOM N -1
		Stop
	XDeath:
	AltSkinXDeath:
		DOOM O 5 A_XScream
		DOOM P 5
		DOOM Q 5 A_NoBlocking
		DOOM RSTUV 5
		DOOM W -1
		Stop
	Overlay.Movement:
		/*TNT1 A 0
		{
			If (User_Walking == 1)
			{
				A_SetUserVar("User_Walking", 0);
				Return;
			}
			If (abs(GetPlayerInput(MODINPUT_FORWARDMOVE)) <= 6400 && abs(GetPlayerInput(MODINPUT_SIDEMOVE)) <= 6144)
			{
				A_SetUserVar("User_Walking", 1);
			}
		}
		TNT1 A 0 A_JumpIf(User_Walking, 6)*/
		TNT1 AAAAAA 1 A_JumpIfHealthLower(1, "Null")
		TNT1 A 0
		{
			If (GetPlayerInput(MODINPUT_FORWARDMOVE) != 0 || GetPlayerInput(MODINPUT_SIDEMOVE) != 0)
			{
				A_SpawnItemEx("FootstepFX", 0, 0, 0, 0, 0, -10, 0, SXF_SETTARGET, 0);	
			}
			If (CountInv("DoomSlayerSteps"))
			{
				A_SpawnNoiseMaker("Player/Move", 0, 0.3);
				A_SpawnNoiseMaker("Player/Footstep", 0, 0.3);
				A_TakeInventory("DoomSlayerSteps");
			}
		}
		TNT1 AAAAAA 1 A_JumpIfHealthLower(1, "Null")
		TNT1 A 0
		Loop
	Overlay.Cooldown:
		TNT1 A 1 
		{
			if (!CountInv("IceBomb") && CountInv("FragGrenade") && !CountInv("grenadeselected"))
			{
				A_GiveInventory("grenadeselected");
			}
			/*If (CountInv("ChronostrikeCooldown"))
			{
				A_TakeInventory("ChronostrikeCooldown", 1);
			}
			If (!CountInv("ChronostrikeTimer"))
			{
				A_GiveInventory("ChronoStrikeCoolDown", 105);
				A_GiveInventory("ChronostrikeTimer", 1);
			}
			If (!CountInv("ChronoStrirkeCoolDown") && CountInv("ChronoStrikeTimer") == 1)
			{
				A_GiveInventory("ChronostrikeTimer", 105);
			}*/
			If (A_JumpIfHealthLower(1, "Null"))
			{
				Return;
			}
			//EMG Pistol
			A_TakeInventory("EMGCooldownCounter", (1 + CountInv("QuickRecovery")) * (1 + CountInv("PowerHaste")));
			A_TakeInventory("EMGAccuracyCounter", 1 + CountInv("PowerHaste"));
			
			//Combat Shotgun
			If (!CountInv("ChargedBurstReady"))
			{
				A_TakeInventory("ChargedBurstCooldownCounter", (1 + CountInv("TriSpeedyRecovery")) * (1 + CountInv("PowerHaste")));
			}
			A_TakeInventory("ExplosiveShotCooldownCounter", (1 + CountInv("ExpSpeedyRecovery")) * (1 + CountInv("PowerHaste")));
			
			//Heavy Assault Rifle
			A_TakeInventory("HARAccuracyCounter", 1 + CountInv("PowerHaste"));
			If (CountInv("MicroMissileCounter") < 10 && !CountInv("MicroMissilesReady"))
			{
				A_GiveInventory("MicroMissileReloadCounter", (1 + CountInv("AdvancedLoader")) * (1 + CountInv("PowerHaste")));
				If (CountInv("MicroMissileReloadCounter") >= 5)
				{
					A_TakeInventory("MicroMissileReloadCounter");
					A_GiveInventory("MicroMissileCounter");
					If (CountInv("MicroMissileCounter") >= 10 && CountInv("MicroMissilesSelected"))
					{
						A_GiveInventory("MicroMissilesLoaded");
					}
				}
			}
			//Rocket Launcher
			If(CountInv("LockOnBurstCooldownCounter"))
			{
				A_TakeInventory("LockOnBurstCooldownCounter", (1 + CountInv("FasterRecovery")) * (1 + CountInv("PowerHaste")));
			}
			//Plasma Rifle
			A_SetMaxInventory("HeatBlastChargeCounter", 30 /* (1 + CountInv("ExpandedThreshold"))*/);
			If (CountInv("HeatBlastSelected"))
			{
				A_TakeInventory("HeatBlastCooldownCounter", (1 + 2 * CountInv("ImprovedVenting")) * (1 + CountInv("PowerHaste")));
				A_TakeInventory("PowerSurgeCounter", 1);
			}
			If (CountInv("PowerSurgeCounter"))
			{
				A_TakeInventory("PowerSurge");
			}
			If (CountInv("StunBombSelected"))
			{
				A_TakeInventory("StunBombCooldownCounter", (1 + CountInv("QuickRecharge")) * (1 + CountInv("PowerHaste")));
			}
			If (CountInv("HeatBlastChargeCounter") >= 30 /* (1 + CountInv("ExpandedThreshold"))*/)
			{
				If (!CountInv("HeatBlastReady"))
				{
					A_GiveInventory("HeatBlastCharged");
				}
			}
			Else
			{
				A_TakeInventory("HeatBlastReady");
				A_TakeInventory("HeatBlastCharged");
			}
			If (!CountInv("StunBombCooldownCounter") && !CountInv("StunBombReady"))
			{
				A_GiveInventory("StunBombCharged");
			}
			If (CountInv("HeatedCore") && !CountInv("HeatBlastCooldownCounter"))
			{
				/*A_GiveInventory("HeatBlastSubChargeCounter", 1 + CountInv("PowerHaste"));
				If (CountInv("HeatBlastSubChargeCounter") >= 6)
				{
					A_TakeInventory("HeatBlastSubChargeCounter");
					A_GiveInventory("HeatBlastChargeCounter");
				}*/
			}
			If (!CountInv("HeatBlastSelected"))
			{
				A_TakeInventory("HeatBlastSubChargeCounter");
				A_TakeInventory("HeatBlastChargeCounter");
			}
				
			//Chaingun
			A_TakeInventory("MobileTurretHeatCounter", 1 + CountInv("PowerHaste"));
			
			//Equipment
			A_SetMaxInventory("EquipmentCharge", 0);
			If (CountInv("EquipmentCharge") < (CountInv("EOA_FragGrenade") || CountInv("EOA_Hologram") || CountInv("EOA_SiphonGrenade")) + CountInv("StockUp"))
			{
				If (CountInv("EquipmentChargeCounter") >= 2100)
				{
					A_SpawnNoiseMaker("Equipment/Recharge", 0);
					A_GiveInventory("EquipmentCharge");
					A_TakeInventory("EquipmentChargeCounter");
				}
				A_GiveInventory("EquipmentChargeCounter", 2 + CountInv("QuickCharge") + 3 * CountInv("RapidCharge"));
			}
			Else
			{
				A_TakeInventory("EquipmentChargeCounter");			
			}
		}
		Loop
	Overlay.Mastery:
		TNT1 A 1
		{
			//EMG Pistol - Charged Energy Shot
			If (!CountInv("IncreasedPower") && CountInv("ChargeEfficiency") && CountInv("QuickRecovery") && CountInv("EMGLightWeight"))
			{
				A_GiveInventory("MC_IncreasedPower");
			}
			Else
			{
				A_TakeInventory("MC_IncreasedPower");
			}
			If (CountInv("IncreasedPowerMasteryCounter") >= 15)
			{
				A_GiveInventory("IncreasedPower");
				A_TakeInventory("MC_IncreasedPower");
				A_TakeInventory("IncreasedPowerMasteryCounter");
			}
			
			//Combat Shotgun - Charged Burst
			If (!CountInv("PowerShot") && CountInv("TriSpeedyRecovery") && CountInv("RapidFire") && CountInv("QuickLoad"))
			{
				A_GiveInventory("MC_PowerShot");
			}
			Else
			{
				A_TakeInventory("MC_PowerShot");
			}
			If (CountInv("PowerShotMasteryCounter") >= 5)
			{
				A_GiveInventory("PowerShot");
				A_TakeInventory("MC_PowerShot");
				A_TakeInventory("PowerShotMasteryCounter");
			}
			
			//Combat Shotgun - Explosive Shot
			If (!CountInv("ClusterStrike") && CountInv("ExpSpeedyRecovery") && CountInv("BiggerBoom") && CountInv("InstantLoad"))
			{
				A_GiveInventory("MC_ClusterStrike");
			}
			Else
			{
				A_TakeInventory("MC_ClusterStrike");
			}
			If (CountInv("ClusterStrikeMasteryCounter") >= 20)
			{
				A_GiveInventory("ClusterStrike");
				A_TakeInventory("MC_ClusterStrike");
				A_TakeInventory("ClusterStrikeMasteryCounter");
			}
			
			//Super Shotgun - Improvements
			If (!CountInv("DoubleTrouble") && CountInv("SSGUraniumCoating") && CountInv("FasterReload"))
			{
				A_GiveInventory("MC_DoubleTrouble");
			}
			Else
			{
				A_TakeInventory("MC_DoubleTrouble");
			}
			If (CountInv("PowerDoubleTroubleKillCounter1") && CountInv("PowerDoubleTroubleKillCounter2") && !CountInv("PowerDoubleTroubleDampener"))
			{
				A_GiveInventory("DoubleTroubleDampener");
				A_GiveInventory("DoubleTroubleMasteryCounter");
				A_GiveInventory("MasteryTicker");
				//A_PrintUpgradeProgress("Weapon Mastery", "Double Trouble", "DoubleTroubleMasteryCounter");
			}
			If (CountInv("DoubleTroubleMasteryCounter") >= 30)
			{
				A_GiveInventory("DoubleTrouble");
				A_TakeInventory("MC_DoubleTrouble");
				A_TakeInventory("DoubleTroubleMasteryCounter");
			}
			
			//Heavy Assault Rifle - Micro Missiles
			A_QueueBMChallenge;
			If (!CountInv("BottomlessMissiles") && CountInv("AmmoEfficient") && CountInv("AdvancedLoader") && CountInv("QuickLauncher"))
			{
				A_GiveInventory("MC_BottomlessMissiles");
			}
			Else
			{
				A_TakeInventory("MC_BottomlessMissiles");
			}
			If (CountInv("PowerMicroMissileStickCounter1") && CountInv("PowerMicroMissileStickCounter2") && CountInv("PowerMicroMissileStickCounter3") && CountInv("PowerMicroMissileStickCounter4") && !CountInv("BottomlessMissiles"))
			{
				A_GiveInventory("BottomlessMissiles");
				A_TakeInventory("MC_BottomlessMissiles");
				A_GiveInventory("MasteryTicker");
				//A_PrintUpgradeProgress("Weapon Mastery", "Bottomless Missiles", "None", True);
			}
			
			//Heavy Assault Rifle - Tactical Scope
			If (!CountInv("DevastatorRounds") && CountInv("HARUraniumCoating") && CountInv("SkullCracker") && CountInv("HARLightWeight"))
			{
				A_GiveInventory("MC_DevastatorRounds");
			}
			Else
			{
				A_TakeInventory("MC_DevastatorRounds");
			}
			If (CountInv("DevastatorRoundsMasteryCounter") >= 50)
			{
				A_GiveInventory("DevastatorRounds");
				A_TakeInventory("MC_DevastatorRounds");
				A_TakeInventory("DevastatorRoundsMasteryCounter");
			}
			
			//Rocket Launcher - Lock-On Burst
			If (!CountInv("MultiTargeting") && CountInv("QuickLock") && CountInv("FasterRecovery"))
			{
				A_GiveInventory("MC_MultiTargeting");
			}
			Else
			{
				A_TakeInventory("MC_MultiTargeting");
			}
			If (CountInv("MultiTargetingMasteryCounter") >= 5)
			{
				A_GiveInventory("MultiTargeting");
				A_TakeInventory("MC_MultiTargeting");
				A_TakeInventory("MultiTargetingMasteryCounter");
			}
			
			//Rocket Launcher - Remote Detonation
			If (!CountInv("ExternalPayload") && CountInv("ImprovedWarhead") && CountInv("JaggedShrapnel"))
			{
				A_GiveInventory("MC_ExternalPayload");
			}
			Else
			{
				A_TakeInventory("MC_ExternalPayload");
			}
			If (CountInv("ExternalPayloadMasteryCounter") >= 15)
			{
				A_GiveInventory("ExternalPayload");
				A_TakeInventory("MC_ExternalPayload");
				A_TakeInventory("ExternalPayloadMasteryCounter");
			}
			
			//Plasma Rifle - Heat Blast
			If (!CountInv("HeatedCore") && CountInv("SuperHeatedRounds") && CountInv("ImprovedVenting") && CountInv("ExpandedThreshold"))
			{
				A_GiveInventory("MC_HeatedCore");
			}
			Else
			{
				A_TakeInventory("MC_HeatedCore");
			}
			If (CountInv("HeatedCoreMasteryCounter") >= 20)
			{
				A_GiveInventory("HeatedCore");
				A_TakeInventory("MC_HeatedCore");
				A_TakeInventory("HeatedCoreMasteryCounter");
			}
			
			//Plasma Rifle - Stun Bomb
			If (!CountInv("ChainStun") && CountInv("QuickRecharge") && CountInv("BigShock") && CountInv("LongerStun"))
			{
				A_GiveInventory("MC_ChainStun");
			}
			Else
			{
				A_TakeInventory("MC_ChainStun");
			}
			If (CountInv("ChainStunMasteryCounter") >= 30)
			{
				A_GiveInventory("ChainStun");
				A_TakeInventory("MC_ChainStun");
				A_TakeInventory("ChainStunMasteryCounter");
			}
			
			//Gauss Cannon - Precision Bolt
			If (!CountInv("VolatileDischarge") && CountInv("EnergyEfficient") && CountInv("GCNLightWeight"))
			{
				A_GiveInventory("MC_VolatileDischarge");
			}
			Else
			{
				A_TakeInventory("MC_VolatileDischarge");
			}
			If (CountInv("VolatileDischargeMasteryCounter") >= 5)
			{
				A_GiveInventory("VolatileDischarge");
				A_TakeInventory("MC_VolatileDischarge");
				A_TakeInventory("VolatileDischargeMasteryCounter");
			}
			
			//Gauss Cannon - Mobile Siege
			If (!CountInv("MobileSiege") && CountInv("OuterBeam") && CountInv("ReducedChargeTime"))
			{
				A_GiveInventory("MC_MobileSiege");
			}
			Else
			{
				A_TakeInventory("MC_MobileSiege");
			}
			If (CountInv("MobileSiegeMasteryCounter") >= 10)
			{
				A_GiveInventory("MobileSiege");
				A_TakeInventory("MC_MobileSiege");
				A_TakeInventory("MobileSiegeMasteryCounter");
			}

			//Chaingun - Gatling Rotator
			If (!CountInv("IncendiaryRounds") && CountInv("ImprovedTorque") && CountInv("GRUraniumCoating"))
			{
				A_GiveInventory("MC_IncendiaryRounds");
			}
			Else
			{
				A_TakeInventory("MC_IncendiaryRounds");
			}
			If (CountInv("PowerIncendiaryRoundsKillCounter1") && CountInv("PowerIncendiaryRoundsKillCounter2") && CountInv("PowerIncendiaryRoundsKillCounter3") && CountInv("PowerIncendiaryRoundsKillCounter4") && CountInv("PowerIncendiaryRoundsKillCounter5") && !CountInv("IncendiaryRounds"))
			{
				A_GiveInventory("IncendiaryRounds");
				A_TakeInventory("MC_IncendiaryRounds");
				A_GiveInventory("MasteryTicker");
				//A_PrintUpgradeProgress("Weapon Mastery", "Incendiary Rounds", "None", True);
			}
			
			//Chaingun - Mobile Turret
			If (!CountInv("UltimateCooling") && CountInv("RapidDeployment") && CountInv("MTUraniumCoating"))
			{
				A_GiveInventory("MC_UltimateCooling");
			}
			Else
			{
				A_TakeInventory("MC_UltimateCooling");
			}
			/*If (CountInv("UltimateCoolingKillCounter") >= 4 && !CountInv("UltimateCoolingKillSuppressor"))
			{
				A_GiveInventory("UltimateCoolingMasteryCounter");
				A_GiveInventory("UltimateCoolingKillSuppressor");
				A_GiveInventory("MasteryTicker");
				//A_PrintUpgradeProgress("Weapon Mastery", "Ultimate Cooling", "UltimateCoolingMasteryCounter");
			}*/
			If (CountInv("UltimateCoolingMasteryCounter") >= 5)
			{
				A_GiveInventory("UltimateCooling");
				A_TakeInventory("MC_UltimateCooling");
				A_TakeInventory("UltimateCoolingMasteryCounter");
			}
			
			//Runes
			If (!CountInv("VacuumII") && CountInv("VacuumChallengeCounter") >= 300)
			{
				A_GiveInventory("VacuumII");
				A_TakeInventory("VacuumChallengeCounter");
				A_PrintUpgradeProgress("Rune Upgrade Challenge:", "Vacuum", "VacuumChallengeCounter", True);
			}
			If (!CountInv("DazedAndConfusedII") && CountInv("DazedAndConfusedChallengeCounter") >= 25)
			{
				A_GiveInventory("DazedAndConfusedII");
				A_TakeInventory("DazedAndConfusedChallengeCounter");
				A_PrintUpgradeProgress("Rune Upgrade Challenge:", "Dazed And Confused", "DazedAndConfusedChallengeCounter", True);
			}
			If (!CountInv("AmmoBoostII") && CountInv("AmmoBoostChallengeCounter") >= 500)
			{
				A_GiveInventory("AmmoBoostII");
				A_TakeInventory("AmmoBoostChallengeCounter");
				A_PrintUpgradeProgress("Rune Upgrade Challenge:", "Ammo Boost", "AmmoBoostChallengeCounter", True);
			}
			If (!CountInv("EquipmentPowerII") && CountInv("EquipmentPowerChallengeCounter") >= 30)
			{
				A_GiveInventory("EquipmentPowerII");
				A_TakeInventory("EquipmentPowerChallengeCounter");
				A_PrintUpgradeProgress("Rune Upgrade Challenge:", "Equipment Power", "EquipmentPowerChallengeCounter", True);
			}
			If (!CountInv("SavageryII") && CountInv("SavageryChallengeCounter") >= 25)
			{
				A_GiveInventory("SavageryII");
				A_TakeInventory("SavageryChallengeCounter");
				A_PrintUpgradeProgress("Rune Upgrade Challenge:", "Savagery", "SavageryChallengeCounter", True);
			}
			If (!CountInv("SeekAndDestroyII") && CountInv("SeekAndDestroyChallengeCounter") >= 75)
			{
				A_GiveInventory("SeekAndDestroyII");
				A_TakeInventory("SeekAndDestroyChallengeCounter");
				A_PrintUpgradeProgress("Rune Upgrade Challenge:", "Seek And Destroy", "SeekAndDestroyChallengeCounter", True);
			}
			If (!CountInv("InFlightMobilityII") && CountInv("InFlightMobilityChallengeCounter") >= 30)
			{
				A_GiveInventory("InFlightMobilityII");
				A_TakeInventory("InFlightMobilityChallengeCounter");
				A_PrintUpgradeProgress("Rune Upgrade Challenge:", "In-Flight Mobility", "InFlightMobilityChallengeCounter", True);
			}
			If (!CountInv("ArmoredOffensiveII") && CountInv("ArmoredOffensiveChallengeCounter") >= 2500)
			{
				A_GiveInventory("ArmoredOffensiveII");
				A_TakeInventory("ArmoredOffensiveChallengeCounter");
				A_PrintUpgradeProgress("Rune Upgrade Challenge:", "Armored Offensive", "ArmoredOffensiveChallengeCounter", True);
			}
			If (!CountInv("BloodFueledII") && CountInv("BloodFueledChallengeCounter") >= 50)
			{
				A_GiveInventory("BloodFueledII");
				A_TakeInventory("BloodFueledChallengeCounter");
				A_PrintUpgradeProgress("Rune Upgrade Challenge:", "Blood Fueled", "BloodFueledChallengeCounter", True);
			}
			If (!CountInv("IntimacyIsBestII") && CountInv("IntimacyIsBestChallengeCounter") >= 100)
			{
				A_GiveInventory("IntimacyIsBestII");
				A_TakeInventory("IntimacyIsBestChallengeCounter");
				A_PrintUpgradeProgress("Rune Upgrade Challenge:", "Intimacy Is Best", "IntimacyIsBestChallengeCounter", True);
			}
			If (!CountInv("RichGetRicherII") && CountInv("RichGetRicherChallengeCounter") >= 12)
			{
				A_GiveInventory("RichGetRicherII");
				A_TakeInventory("RichGetRicherChallengeCounter");
				A_PrintUpgradeProgress("Rune Upgrade Challenge:", "Rich Get Richer", "RichGetRicherChallengeCounter", True);
			}
			If (!CountInv("SavingThrowII") && CountInv("SavingThrowChallengeCounter") >= 10)
			{
				A_GiveInventory("SavingThrowII");
				A_TakeInventory("SavingThrowChallengeCounter");
				A_PrintUpgradeProgress("Rune Upgrade Challenge:", "Saving Throw", "SavingThrowChallengeCounter", True);
			}
		}
		Loop
	Overlay.Ammo:
		TNT1 A 1
		{
			If ((CountInv("EOA_HeavyAssaultRifle") || CountInv("EOA_Chaingun")) && CountInv("EOA_BulletAmmo") <= 15)
			{
				If (!CountInv("BulletsLowAmmo"))
				{
					A_SpawnNoiseMaker("Player/LowAmmo", 0);
					A_GiveInventory("BulletsLowAmmo");
				}
			}
			Else
			{
				A_TakeInventory("BulletsLowAmmo");
			}
			If ((CountInv("EOA_CombatShotgun") || CountInv("EOA_SuperShotgun")) && CountInv("EOA_ShellAmmo") <= 6)
			{
				If (!CountInv("ShellsLowAmmo"))
				{
					A_SpawnNoiseMaker("Player/LowAmmo", 0);
					A_GiveInventory("ShellsLowAmmo");
				}
			}
			Else
			{
				A_TakeInventory("ShellsLowAmmo");
			}
			If (CountInv("EOA_RocketLauncher") && CountInv("EOA_RocketAmmo") <= 2)
			{
				If (!CountInv("RocketsLowAmmo"))
				{
					A_SpawnNoiseMaker("Player/LowAmmo", 0);
					A_GiveInventory("RocketsLowAmmo");
				}
			}
			Else
			{
				A_TakeInventory("RocketsLowAmmo");
			}
			If ((CountInv("EOA_PlasmaRifle") || CountInv("EOA_GaussCannon")) && CountInv("EOA_CellAmmo") <= 30)
			{
				If (!CountInv("CellsLowAmmo"))
				{
					A_SpawnNoiseMaker("Player/LowAmmo", 0);
					A_GiveInventory("CellsLowAmmo");
				}
			}
			Else
			{
				A_TakeInventory("CellsLowAmmo");
			}
			If (CountInv("EOA_Chainsaw") && CountInv("EOA_FuelAmmo") <= 1)
			{
				If (!CountInv("FuelLowAmmo"))
				{
					A_SpawnNoiseMaker("Player/LowAmmo", 0);
					A_GiveInventory("FuelLowAmmo");
				}
			}
			Else
			{
				A_TakeInventory("FuelLowAmmo");
			}
			If (CountInv("EOA_BFG") && CountInv("EOA_BFGAmmo") <= 1)
			{
				If (!CountInv("BFGLowAmmo"))
				{
					A_SpawnNoiseMaker("Player/LowAmmo", 0);
					A_GiveInventory("BFGLowAmmo");
				}
			}
			Else
			{
				A_TakeInventory("BFGLowAmmo");
			}
		}
		Loop
	GenericFreezeDeath:
		"####" "#" 0 A_ClearOverlays
		Goto Super::GenericFreezeDeath
	}
}

ACTOR FootstepFXBase
{
	Projectile
	+NOBLOOD
	+DONTBLAST
	+SKYEXPLODE
	Damage 0
	Radius 10
	DeathSound ""
	States
	{
	Spawn:
		TNT1 A 1
	Death:
		TNT1 A 1
		Stop
	}
}

ACTOR FootstepFX : FootstepFXBase
{
	States
	{
	Death:
		TNT1 A 1 A_GiveToTarget("DoomSlayerSteps")
		Stop
	}
}

ACTOR DoomSlayerFootstep : FootstepFXBase
{
	DeathSound "Player/Footstep"
}

ACTOR DoomSlayerMovestep : FootstepFXBase
{
	DeathSound "Player/Move"
}

ACTOR DoomSlayerSteps : Inventory {Inventory.MaxAmount 1}

ACTOR EOA_AreaScanner : EOA_TempToken
{
	Powerup.Type "EOA_AreaScanner"
	Powerup.Duration 0x7FFFFFFF
}

ACTOR PowerEOA_AreaScanner : PowerScanner{}

ACTOR EOA_ShotgunStart : CustomInventory
{
	+ALWAYSPICKUP
	+AUTOACTIVATE
	States
	{
	Pickup:
		TNT1 A 0
		{
			//If (GetCVar("EOA_CSGStart"))
			//{
				A_GiveInventory("EOA_CombatShotgun");
				A_GiveInventory("EOA_PumpActionCounter");
				A_SelectWeapon("EOA_CombatShotgun");
			//}
		}
		Stop
	}
}

ACTOR EOAE_FlameBelchStart : CustomInventory
{
	+ALWAYSPICKUP
	//+AUTOACTIVATE
	States
	{
	Pickup:
		TNT1 A 0
		{
			If (GetCVar("EOAE_FlameStart"))
			{
				A_GiveInventory("FlameBelch");
			}
		}
		Stop
	}
}

ACTOR EOAE_IceBombStart : CustomInventory
{
	+ALWAYSPICKUP
	//+AUTOACTIVATE
	States
	{
	Pickup:
		TNT1 A 0
		{
			If (GetCVar("EOAE_IceStart"))
			{
				A_GiveInventory("IceBomb");
			}
		}
		Stop
	}
}

ACTOR EOAE_FragGrenadeStart : CustomInventory
{
	+ALWAYSPICKUP
	//+AUTOACTIVATE
	States
	{
	Pickup:
		TNT1 A 0
		{
			If (GetCVar("EOAE_FragStart"))
			{
				A_GiveInventory("FragGrenade");
			}
		}
		Stop
	}
}

ACTOR EOAE_CrucibleStart : CustomInventory
{
	+ALWAYSPICKUP
	//+AUTOACTIVATE
	States
	{
	Pickup:
		TNT1 A 0
		{
			If (GetCVar("EOAE_CrucibleStart"))
			{
				A_GiveInventory("DECrucible");
				A_GiveInventory("PowerCrucible");
			}
		}
		Stop
	}
}

ACTOR EOA_ThrustBootStart : CustomInventory
{
	+ALWAYSPICKUP
	+AUTOACTIVATE
	States
	{
	Pickup:
		TNT1 A 0
		{
			If (GetCVar("EOA_JumpStart"))
			{
				A_GiveInventory("EOA_ThrustBoots");
			}
		}
		Stop
	}
}
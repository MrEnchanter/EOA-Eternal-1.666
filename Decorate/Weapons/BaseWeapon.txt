ACTOR EOAWeapons : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("EOA_Chainsaw");
			A_GiveInventory("EOA_CombatShotgun");
			A_GiveInventory("EOA_SuperShotgun");
			A_GiveInventory("EOA_HeavyAssaultRifle");
			A_GiveInventory("EOA_RocketLauncher");
			A_GiveInventory("EOA_PlasmaRifle");
			A_GiveInventory("EOA_GaussCannon");
			A_GiveInventory("EOA_Chaingun");
			A_GiveInventory("EOA_BFG");
			A_GiveInventory("EOA_unmayker");
			A_GiveInventory("DECrucible");
			A_Giveinventory("CrucibleAmmo", 3);
		}
		Stop
	}
}

ACTOR EOAEEquipment : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("FlameBelch");
			A_GiveInventory("IceBomb");
			A_GiveInventory("FragGrenade");
		}
		Stop
	}
}

ACTOR EOAMods : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("CSGMods");
			A_GiveInventory("SSGMods");
			A_GiveInventory("HARMods");
			A_GiveInventory("RLRMods");
			A_GiveInventory("PLRMods");
			A_GiveInventory("GCNMods");
			A_GiveInventory("CGNMods");
		}
		Stop
	}
}

ACTOR EOAModsNoUpgrades : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("ChargedBurst");
			A_GiveInventory("ExplosiveShot");
			A_GiveInventory("MicroMissiles");
			A_GiveInventory("TacticalScope");
			A_GiveInventory("LockOnBurst");
			A_GiveInventory("RemoteDetonation");
			A_GiveInventory("HeatBlast");
			A_GiveInventory("StunBomb");
			A_GiveInventory("PrecisionBolt");
			A_GiveInventory("SiegeMode");
			A_GiveInventory("GatlingRotator");
			A_GiveInventory("MobileTurret");
		}
		Stop
	}
}

ACTOR EOAMastery : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("IncreasedPower");
			A_GiveInventory("PowerShot");
			A_GiveInventory("ClusterStrike");
			A_GiveInventory("DoubleTrouble");
			A_GiveInventory("BottomlessMissiles");
			A_GiveInventory("DevastatorRounds");
			A_GiveInventory("MultiTargeting");
			A_GiveInventory("ExternalPayload");
			A_GiveInventory("HeatedCore");
			A_GiveInventory("ChainStun");
			A_GiveInventory("VolatileDischarge");
			A_GiveInventory("MobileSiege");
			A_GiveInventory("IncendiaryRounds");
			A_GiveInventory("UltimateCooling");		
		}
		Stop
	}
}

ACTOR EOAEquipment : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("EOA_FragGrenadePickup");
			A_GiveInventory("EOA_HologramPickup");
			A_GiveInventory("EOA_SiphonGrenadePickup");
		}
		Stop
	}
}

ACTOR EOAResetEquipment : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0 ACS_NamedExecute("ContDownTokens", 0)
		Stop
	}
}

ACTOR PraetorSuitUpgrades : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("EnvironmentalResistance");
			A_GiveInventory("HazardProtection");
			A_GiveInventory("SelfPreservation");
			A_GiveInventory("BarrelsOFun");
			A_GiveInventory("AreaScanningTechnology");
			A_GiveInventory("ItemAwareness");
			A_GiveInventory("SecretFinder");
			A_GiveInventory("FullView");
			A_GiveInventory("EquipmentSystem");
			A_GiveInventory("QuickCharge");
			A_GiveInventory("StockUp");
			A_GiveInventory("RapidCharge");
			A_GiveInventory("PowerupEffectiveness");
			A_GiveInventory("PowerSurge");
			A_GiveInventory("HealingPower");
			A_GiveInventory("PowerExtender");
			A_GiveInventory("Dexterity");
			A_GiveInventory("Adept");
			A_GiveInventory("QuickHands");
			A_GiveInventory("Bloodierpunch");
			A_GiveInventory("BigBloodyTrouble");
			A_GiveInventory("Extrapunch");
			A_GiveInventory("FasterDasher");
			A_GiveInventory("HitAndRun");
			A_GiveInventory("FasterFragCoolDown");
			A_GiveInventory("StockUp");
			A_GiveInventory("FasterIceCoolDown");
			A_GiveInventory("PermaFrost");
		}
		Stop
	}
}

ACTOR EOARunes : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("Vacuum");
			A_GiveInventory("DazedAndConfused");
			A_GiveInventory("AmmoBoost");
			A_GiveInventory("EquipmentPower");
			A_GiveInventory("Savagery");
			A_GiveInventory("SeekAndDestroy");
			A_GiveInventory("InFlightMobility");
			A_GiveInventory("ArmoredOffensive");
			A_GiveInventory("BloodFueled");
			A_GiveInventory("IntimacyIsBest");
			A_GiveInventory("SavingThrow");
			A_GiveInventory("ChronoStriek");
		}
		Stop
	}
}

ACTOR EOARunesII : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("VacuumII");
			A_GiveInventory("DazedAndConfusedII");
			A_GiveInventory("AmmoBoostII");
			A_GiveInventory("EquipmentPowerII");
			A_GiveInventory("SavageryII");
			A_GiveInventory("SeekAndDestroyII");
			A_GiveInventory("InFlightMobilityII");
			A_GiveInventory("ArmoredOffensiveII");
			A_GiveInventory("BloodFueledII");
			A_GiveInventory("IntimacyIsBestII");
			A_GiveInventory("RichGetRicherII");
			A_GiveInventory("SavingThrowII");
		}
		Stop
	}
}

ACTOR EOAAll : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("EOAWeapons");
			A_GiveInventory("EOAMods");
			A_GiveInventory("EOAMastery");
			A_GiveInventory("EOAEquipment");
			A_GiveInventory("EOARunes");
			A_GiveInventory("EOARunesII");
			A_GiveInventory("ArgentCellBonuses");
			A_GiveInventory("PraetorSuitUpgrades");
			A_GiveInventory("EOA_ThrustBoots");
			A_GiveInventory("EOAEEquipment");
			A_GiveInventory("EOAResetEquipment");
		}
		Stop
	}
}
	
ACTOR Bloodpunchcounter : EOA_Token {Inventory.MaxAmount 2}
ACTOR Extrabloodpunchcounter : EOA_Token {Inventory.MaxAmount 2}
ACTOR Bloodpunchhit : EOA_Token {Inventory.MaxAmount 1}
ACTOR BloodAndGuts : Eoa_Token {}
ACTOR ChainsawCooldownToken :   Inventory{Inventory.MaxAmount 20}

ACTOR BloodpunchWave //Sprite modified from Guncaster.
{
	Projectile
	Renderstyle "Add"
	Alpha 0.99
	Scale 0.3
	+FLATSPRITE
	+NOINTERACTION
	+DONTBLAST
	+DONTTHRUST
	States
	{
	Spawn:
		BLWV A 1 NoDelay Bright
		{
			A_FadeOut(0.10);
			A_SetScale(ScaleX + 0.4);
		}
		Wait
	}
}


ACTOR EOA_Weapon : EOA_BaseWeapon 
{
	Inventory.PickupMessage "Congrats, you picked up something you shouldn't have.  Put it down, now.  Good boy. :)"
	Inventory.PickupSound "Item/Pickup"
	Weapon.AmmoType1 "None"
	Weapon.AmmoType2 "EquipmentCharge"
	Weapon.BobRangeX 0.3
	Weapon.BobRangeY 0.1
	Weapon.BobSpeed 2.5
	Weapon.BobStyle "Inverse"
	EOA_BaseWeapon.MeleeTics 12
	//Weapon.UpSound "Weapon/Switch"
	+ALT_AMMO_OPTIONAL
	+NOALERT
	+NOAUTOAIM
	+NOSCREENFLASH
	States
	{
	Spawn:
	Ready:
	ReRaise:		
	SlowDown:
		"####" AB 1
		{
			EOA_WeaponReady(WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT|EOA_DISABLEHASTE);
			A_WeaponOffset(frandom(-1, 1), frandom(32, 34));
		}
		goto readyloop
	ReadyLoop:
	Select:
	Fire:
		TNT1 A 0 A_TakeInventory("EOA_Weapon")
	Deselect:
		TNT1 A 1 A_Lower(36)
		Wait
	MonkeyPole:
		TNT1 A 0 A_TakeInventory("ClimbHand")
		TNT1 A 0 
		{
			A_SpawnNoiseMaker("Player/Mantle", 1);
		}
		MNKP C 1 A_SetPitch(0, SPF_INTERPOLATE)
		MNKP DEFGH 2 
		{
			A_SetPitch(0, SPF_INTERPOLATE);
			If (CountInv("QuickHands"))
			{
				If (CountInv("SpeedCounter"))
				{
					A_TakeInventory("SpeedCounter");
				}
				Else
				{
					A_SetTics(0);
					A_GiveInventory("SpeedCounter");
				}
			}
		}
		TNT1 A 0 A_TakeInventory("ClimbHand")
		TNT1 A 0 A_Jump(256, "Ready")
		Goto Ready
	LedgeClimb:
		TNT1 A 0 
		{
			A_SpawnNoiseMaker("Player/Mantle", 1);
			If (CountInv("ChaingunSpinupCounter"))
			{
				A_TakeInventory("ChaingunSpinupCounter");
				A_SpawnPersistentNoiseMaker(1, "", 6);
				A_SpawnPersistentNoiseMaker(1, "", 7);
			}
			A_WeaponOffset(0, 32);
		}
		MNTL ABCDE 1 A_SetPitch(0, SPF_INTERPOLATE)
		MNTL FGHIJ/*OOPPQQ*/ 1 
		{
			A_SetPitch(0, SPF_INTERPOLATE);
			If (CountInv("QuickHands"))
			{
				If (CountInv("SpeedCounter"))
				{
					A_TakeInventory("SpeedCounter");
				}
				Else
				{
					A_SetTics(0);
					A_GiveInventory("SpeedCounter");
				}
			}
		}
		TNT1 A 0 A_TakeInventory("Climbed_Ledge")
		TNT1 A 0 A_TakeInventory("Grabbing_A_Ledge")
		TNT1 A 0 A_Jump(256, "Ready")
		Goto Ready

	Melee:
		TNT1 A 0
		/*"####" "#" 0 
		{
			A_CustomPunch(0, 1, CPF_NOTURN, "EOA_SeekerPuff", 192);
			A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
		}*/
		"####" "#" 0 EOA_SetMeleeDelay
		"####" A 1
		{
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM))
			{
				EOA_CheckGloryKill; //A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				EOA_CheckBloodPunch;  //Strongbelly: Check enemies to blood punch
			}
			If (CountInv("RipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				Return State ("GloryKill");
			}
			If (CountInv("BloodAndGuts") && CountInv("bloodpunchcounter")==2 || CountInv("BloodAndGuts") && CountInv("extrabloodpunchcounter") == 2) //Strongbelly: Checking if monster has it to perform blood punch
			{
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 112);
				Return State ("BloodPunch");
			}
			Else
			{
				A_TakeInventory("BloodAndGuts"); //Strongbelly: Maintenance in case you have it when doing just the normal quick melee.
				Return State ("");
			}
		}
		"####" "#" 0 A_GunFlash("MeleeAttack", GFF_NOEXTCHANGE)
		Goto Budge+6
	BloodPunch:
		"####" "#" 1
		"####" "#" 0 EOA_SetMeleeDelay
		"####" "#" 1 A_GunFlash("BloodPunchThing", GFF_NOEXTCHANGE)
		goto budge
		
	UseEquipment:
		"####" A 3 A_jumpif(Countinv("grenadeselected") && CountInv("FragGrenade") && CountInv("IceBomb"), "takegrenade")
		"####" A 3 A_jumpif(!Countinv("grenadeSelected") && CountInv("FragGrenade") && CountInv("IceBomb"), "givegrenade")
		Goto budge+24
	TakeGrenade:
		"####" "#" 0 A_takeinventory("grenadeselected",1)
		"####" "#" 4 A_WeaponReady
		"####" "#" 0 A_PlaySound("IceBombSelected",1,1.0)
		goto budge+24
	GiveGrenade:
		"####" "#" 0 A_giveinventory("grenadeselected",1)
		"####" "#" 4 A_WeaponReady
		"####" "#" 0 A_PlaySound("FragSelected",1,1.0)
		goto budge+24
	ThrowShield:
		"####" "#" 1 A_Overlay(10,"LaunchShield",1)
		Goto Budge+24
	
	LaunchShield:
		TNT1 A 0
		{
			EOA_FireBullets(0, 0, 0, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ, 0, "ShieldProjectile", -5 + GetViewZ, 12 + GetRelVelY / 4);
			A_SpawnNoiseMaker("Shield/Launch", 9);
			A_SpawnNoiseMaker("Shield/Launch", 10);
		}
		TNT1 A 1 A_TakeInventory("ThrowShield")
		Stop

	Budge:
		"####" FGHIJJJJJJIHGFEEEEEEEDCBA 1
		{
			If (CountInv("RipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				A_GunFlash("Null");
				Return State ("GloryKill");
			}
			If (!EOA_CheckMeleeDelay && (GetFrame == 9 || GetFrame == 4) && (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && !CheckSemiAuto)
			{
				A_SetTics(0);
			}
			If (!CheckSemiAuto || (CheckSemiAuto && (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)))
			{
				A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH|WRF_NOFIRE * EOA_CheckMeleeDelay|WRF_NOFIRE * GetFrame >= 4|WRF_NOFIRE * !CheckSemiAuto);
			}
			Return State ("");
		}
		TNT1 A 0 A_Jump(256, "ReadyLoop")
		Goto ReadyLoop
		
	//Strongbelly: Flame Belch
	FlameBelchStart:
		"####" "#" 1 A_Overlay(10,"FlameBelch",1)
		Goto Budge+24
	FlameBelch:
		TNT1 A 0 A_GiveInventory("ShoulderInv", 1)
		TNT1 A 0 A_TakeInventory("FlameTrigger",1)
		SCF0 A 0 A_PlaySound("FlameBelch",1)
		SCF0 A 0 A_JumpIf(GetCVAR("DECannon")==true, 2)
		SCF0 A 0 A_Jump(256,2)
		DE_C A 0
		"####" ACE 1
		"####" F 3 
		"####" A 0 A_AlertMonsters
		"####" A 0 A_GiveInventory("FlameThrowerCooldownToken",25)
		"####" A 0 ACS_NAMEDEXECUTEALWAYS("FlameCooldown") //A_GiveInventory("FlameThrowerCooldownString",1) 
		"####" G 2 bright A_GunFlash
		"####" A 0 A_QuakeEx( 2, 2, 2, 2, 0, 18,0,QF_RELATIVE)
		"####" HIJ 1 bright A_FireCustomMissile("FlameBelchProjectile", -3, 0, Random(-14, -18), 11, FPF_NOAUTOAIM)
		"####" G 0 bright A_GunFlash
		"####" HIJ 1 bright A_FireCustomMissile("FlameBelchProjectile", -3, 0, Random(-14, -18), 11, FPF_NOAUTOAIM)
		"####" G 0 bright A_GunFlash
		"####" HIJ 1 bright A_FireCustomMissile("FlameBelchProjectile", -3, 0, Random(-14, -18), 11, FPF_NOAUTOAIM)
		"####" G 1 bright A_GunFlash
		"####" DB 1
		TNT1 A 9
		TNT1 A 1 A_TakeInventory("ShoulderInv", 10)
		Stop
		
	//Strongbelly: Ice Bomb
	IceBombStart:
		"####" "#" 1 A_Overlay(10,"IceBomb",1)
		Goto Budge+24
	IceBomb:
		TNT1 A 0 A_GiveInventory("ShoulderInv", 1)
		TNT1 A 0 A_TakeInventory("IceTrigger",1)
		TNT1 A 0 A_PlaySound("CannonLaunch",1)
		SCF0 A 0 A_JumpIf(GetCVAR("DECannon")==true, 2)
		SCF0 A 0 A_Jump(256,2)
		DE_C A 0
		"####" ABCD 1
		"####" E 1
		"####" F 1 A_Quake(8, 8, 0, 32)
		"####" A 0 
		{
			if(!countinv("FasterIceCooldown"))
			{
				A_GiveInventory("IceBombCooldownToken",40);
			}
			else if (countinv("FasterIceCooldown"))
			{
				A_GiveInventory("IceBombCooldownToken",20);	
			}
		}
		"####" A 0 ACS_NAMEDEXECUTEALWAYS("IceCooldown")//A_GiveInventory("IceBombCooldownString",1) 
		//"####" F 0 A_Recoil (4)
		"####" F 0 A_AlertMonsters
		"####" F 0 bright A_GunFlash
		"####" F 1 bright A_FireCustomMissile("IceBombProjectile", -3, 0, -18, 18, FPF_NOAUTOAIM, -10)
		"####" K 3 bright
		"####" DCBA 1
		TNT1 A 9
		TNT1 A 1 A_TakeInventory("ShoulderInv", 10)
		Stop
	GrenadeThrowStart:
		"####" "#" 0 A_jumpif(!countinv("grenadeselected") && !Countinv("icebombcooldowntoken"), "IcebombStart")
		"####" "#" 0 A_Jumpif(CountInv("StockUp"), "ExtraNadeThrow")
		"####" "#" 1 A_Overlay(10,"GrenadeThrow",1)
		Goto Budge+24
	ExtraNadeThrow:
		"####" "#" 1 A_Overlay(10,"ExtraGrenadeThrow",1)
		Goto Budge+24
	ExtraGrenadeThrow:
		TNT1 A 0 A_GiveInventory("ShoulderInv", 1)
		TNT1 A 0 A_TakeInventory("GrenadeTrigger",1)
		TNT1 A 0 A_PlaySound("CannonLaunch",1)
		SCF0 A 0 A_JumpIf(GetCVAR("DECannon")==true, 2)
		SCF0 A 0 A_Jump(256,2)
		DE_C A 0
		"####" D 1
		"####" E 1
		"####" F 0 bright A_GunFlash
		"####" F 1 bright A_FireCustomMissile("EOA_FragGrenadeProjectile", -3, 0, -18, 18, FPF_NOAUTOAIM, -10)
		"####" F 0 A_Quake(8, 8, 0, 32)
		"####" A 0 
		{
			if(!countinv("FasterFragCoolDown"))
			{
				A_GiveInventory("ExtraGrenadeCooldownToken",40);
			}
			else if (countinv("FasterFragCoolDown"))
			{
				A_GiveInventory("ExtraGrenadeCooldownToken",20);
			}
		}
		"####" A 0 ACS_NAMEDEXECUTEALWAYS("ExtranadeCooldown")//A_GiveInventory("IceBombCooldownString",1) 
		//"####" F 0 A_Recoil (4)
		"####" F 0 A_AlertMonsters
		"####" E 1 A_TakeInventory("StockUp")
		TNT1 A 1 A_TakeInventory("ShoulderInv", 10)
		Stop
		
	GrenadeThrow:
		TNT1 A 0 A_GiveInventory("ShoulderInv", 1)
		TNT1 A 0 A_TakeInventory("GrenadeTrigger",1)
		TNT1 A 0 A_PlaySound("CannonLaunch",1)
		SCF0 A 0 A_JumpIf(GetCVAR("DECannon")==true, 2)
		SCF0 A 0 A_Jump(256,2)
		DE_C A 0
		"####" CD 1
		"####" E 1
		"####" F 0 bright A_GunFlash
		"####" F 1 bright A_FireCustomMissile("EOA_FragGrenadeProjectile", -3, 0, -18, 18, FPF_NOAUTOAIM, -10)
		"####" K 1 bright
		"####" F 1 A_Quake(8, 8, 0, 32)
		"####" A 0 
		{
			if(!countinv("FasterFragCoolDown"))
			{
				A_GiveInventory("GrenadeCooldownToken",40);
			}
			else if (countinv("FasterFragCoolDown"))
			{
				A_GiveInventory("GrenadeCooldownToken",20);
			}
		}
		"####" A 0 ACS_NAMEDEXECUTEALWAYS("GrenadeCooldown")//A_GiveInventory("IceBombCooldownString",1) 
		//"####" F 0 A_Recoil (4)
		"####" F 0 A_AlertMonsters
		"####" CB 1
		TNT1 A 0 A_TakeInventory("ExtraNade")
		TNT1 A 3
		TNT1 A 1 A_TakeInventory("ShoulderInv", 10)
		Stop
		
   Quicksawstart:
		TNT1 A 0
		TNT1 A 0 A_jumpif(!countinv("EOA_FuelAmmo"), 2)
		TNT1 A 0 A_jumpif(countinv("EOA_FuelAmmo"), 2)
		"####" "#" 1 A_Overlay(10 ,"Quicksawnoammo", 1)
		"####" "#" 0 A_jump(85, "quicksaw2")
		"####" "#" 1 A_Overlay(10,"Quicksaw",1)
		goto Budge+24
	quicksaw2:
		"####" "#" 1 A_Overlay(10,"QuicksawA2",1)
		goto budge+24
	Quicksawnoammo:
		TNT1 A 0 
		{
			A_AlertMonsters;
			A_PlaySound("QuickSawEmpty",1,1.0,0,2.0);  //A_SpawnPersistentNoiseMaker(1, "Chainsaw/Use", 0, 0.5, 1.5);
			EOA_SetGKRecoilOffset(0,-3,-2, True);
		}
		NAMQ ABCDEFGHIJK 2
		TNT1 A 0 A_takeInventory("SawInv", 1)
		TNT1 A 0 A_TakeInventory("SawTrigger", 10)
		stop
	Quicksaw:
		TNT1 A 0 A_GiveInventory("SawInv", 1)
		TNT1 A 0 EOA_SetGKRecoilOffset(5,-3,-3, True)
		TNT1 A 0 
		{
			A_AlertMonsters;
			A_PlaySound("QuickSaw",1,1.0,0,2.0);  //A_SpawnPersistentNoiseMaker(1, "Chainsaw/Use", 0, 0.5, 1.5);
		}
		TNT1 A 0 
		{
			EOA_SetGKRecoilOffset(-5, 3, 3, True);
			A_WeaponOffset(frandom(-2, 2), frandom(32, 36));
			EOA_WeaponReady(WRF_NOFIRE);
			A_CustomPunch(0, 0, CPF_NOTURN, "ChainsawGloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			A_CustomPunch(0, 1, CPF_NOTURN, "ChainsawPuff");
			If (CountInv("ChainsawRipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				A_GunFlash("Null");
				Return State ("QuickChainsawGloryKill");
			}
			Else
			{
				If (CountInv("ChainsawWallHit"))
				{
					A_SpawnPersistentNoiseMaker(2, "Chainsaw/MetalLoop", 5, 1.0, 1);
					A_SpawnPersistentNoiseMaker(2, "Chainsaw/MetalLoop", 6, 1.0, 1);
				}
				Else
				{
					A_SpawnPersistentNoiseMaker(2, "", 5);
					A_SpawnPersistentNoiseMaker(2, "", 6);
				}
				Return State ("");
			}
		}
		QKSW A 1 EOA_SetGKRecoilOffset(2,-1,-1, True)
		QKSW BCD 1
		QKSW EFGHI 2
		TNT1 A 0 A_takeInventory("SawInv", 1)
		TNT1 A 0 A_TakeInventory("SawTrigger", 10)
		stop
		
	QuicksawA2:
		TNT1 A 0 
		{
			A_AlertMonsters;
			A_PlaySound("QuickSaw",1,1.0,0,2.0);  //A_SpawnPersistentNoiseMaker(1, "Chainsaw/Use", 0, 0.5, 1.5);
		}
		TNT1 A 0 A_GiveInventory("SawInv", 1)
		TNT1 A 0 EOA_SetGKRecoilOffset(5,-3,-3, True)
		TNT1 A 0 
		{
			EOA_SetGKRecoilOffset(-5, 3, 3, True);
			A_WeaponOffset(frandom(-2, 2), frandom(32, 36));
			EOA_WeaponReady(WRF_NOFIRE);
			A_CustomPunch(0, 0, CPF_NOTURN, "ChainsawGloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			A_CustomPunch(0, 1, CPF_NOTURN, "ChainsawPuff");
			If (CountInv("ChainsawRipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				A_GunFlash("Null");
				Return State ("QuickChainsawGloryKill");
			}
			Else
			{
				If (CountInv("ChainsawWallHit"))
				{
					A_SpawnPersistentNoiseMaker(2, "Chainsaw/MetalLoop", 5, 1.0, 1);
					A_SpawnPersistentNoiseMaker(2, "Chainsaw/MetalLoop", 6, 1.0, 1);
				}
				Else
				{
					A_SpawnPersistentNoiseMaker(2, "", 5);
					A_SpawnPersistentNoiseMaker(2, "", 6);
				}
				Return State ("");
			}
		}
		QKSW I 1 EOA_SetGKRecoilOffset(2,-1,-1, True)
		QKSW HGF 1
		QKSW EDCBA 2
		TNT1 A 0 A_takeInventory("SawInv", 1)
		TNT1 A 0 A_TakeInventory("SawTrigger", 10)
		stop
		
	QuickChainsawGloryKill:
		TNT1 A 0
		{
			A_SpawnPersistentNoiseMaker(2, "", 5);
			A_SpawnPersistentNoiseMaker(2, "", 6);
			SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
			A_ChangeFlag("NOTARGET", 1);
			A_ChangeFlag("NOPAIN", 1);
			A_ChangeFlag("NODAMAGE", 1);
			If (A_CheckFlag("NOGRAVITY", "Null", AAPTR_TRACER))
			{
				A_ChangeFlag("NOGRAVITY", 1);
			}
			If (CountInv("SeekAndDestroySelected"))
			{
				A_SpawnNoiseMaker("Rune/SeekAndDestroy", 0);
			}
		}
	QuickChainsawGloryTravel:
		TNT1 A 1
		TNT1 A 0 A_Warp(AAPTR_MASTER, 0, 0, 0, 0, WARPF_TESTONLY, "QuickChainsawGloryTravel") //[DoomKrakken]: The projectile itself has us do the warp.  This is here, doing the same thing, except it merely tests the very same conditions for the warp.  This way, it'll remain idle here until the warp fails.
		TNT1 A 1
		{
			A_SetPitch(0, SPF_INTERPOLATE);
			A_TakeInventory("PowerStaggered", 0, 0, AAPTR_TRACER);
			A_TransferPointer(AAPTR_DEFAULT, AAPTR_TRACER, AAPTR_DEFAULT, AAPTR_TARGET);
			A_WeaponOffset(-64, 160);
			A_Stop;
		}
		TNT1 A 0
		{
			If (CountInv("SavagerySelected"))
			{
				A_SpawnNoiseMaker("Rune/Savagery", 0);
				If (!CountInv("SavageryII") && SavageryQueue)
				{
					A_GiveInventory("SavageryChallengeCounter");
					A_GiveInventory("MasteryTicker");
				}
			}
			If (CountInv("SeekAndDestroySelected") && !CountInv("SeekAndDestroyII"))
			{
				A_GiveInventory("SeekAndDestroyChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("BloodFueledSelected") && !CountInv("BloodFueledII") && CountInv("PowerBloodFueledSpeed"))
			{
				//A_GiveInventory("PowerBloodfuiled");
				A_GiveInventory("BloodFueledChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("SavingThrowSelected") && !CountInv("SavingThrowII") && CountInv("PowerSavingThrow"))
			{
				A_GiveInventory("SavingThrowChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("InFlightMobilitySelected") && !CountInv("InFlightMobilityII") && !CheckOnGround)
			{
				A_GiveInventory("InFlightMobilityChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
		}
		SCSB A 0 A_JumpIfInventory("BloodCounter", 1, 2)
		SCSN A 0
		"####" EFEF 1 A_WeaponOffset(16, -32, WOF_ADD)
		"####" "#" 0 A_SpawnPersistentNoiseMaker(2, "Chainsaw/Stab", 1)
		"####" EFEFEFEFEFEFEFEFEFEF 1
		{
			A_WeaponOffset(frandom(-2, 2), frandom(32, 36));
			A_CustomPunch(0, 1, CPF_NOTURN, "EOA_MeleePuff", 192);
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		"####" EFEFEFEFEF 1
		{
			A_SetTics(1 - CountInv("SavagerySelected"));
			A_WeaponOffset(frandom(-2, 2), frandom(32, 36));
			A_CustomPunch(0, 1, CPF_NOTURN, "EOA_MeleePuff", 192);
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		"####" EFEFEFEFEF 1
		{
			A_SetTics(1 - (CountInv("SavagerySelected") && CountInv("SavageryII")));
			A_WeaponOffset(frandom(-2, 2), frandom(32, 36));
			A_CustomPunch(0, 1, CPF_NOTURN, "EOA_MeleePuff", 192);
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		"####" "#" 0 
		{
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		"####" CDCDCDCD 1 A_WeaponOffset(8, 16, WOF_ADD)
		"####" "#" 0
		{
			A_SpawnPersistentNoiseMaker(2, "Chainsaw/Down", 3, 0.5);
			SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
			A_ChangeFlag("NOPAIN", 0);
			A_ChangeFlag("NODAMAGE", 0);
			A_ChangeFlag("NOGRAVITY", 0);
			A_TakeInventory("ChainsawRipAndTear");
			A_TakeInventory("DeathFromAbove");
			If (!GetCVar("SV_InfiniteAmmo")) //MAD HACX for those who are into that sort of thing... ;)
			{
				A_TakeInventory("EOA_FuelAmmo", CountInv("ChainsawFuelCounter"));
			}
			A_TakeInventory("ChainsawFuelCounter");
			A_GiveInventory("BloodCounter");
			If (CountInv("ArmoredOffensiveSelected"))
			{
				A_SpawnNoiseMaker("Rune/ArmoredOffensive", 0);
			}
			If (CountInv("BloodFueledSelected"))
			{
				A_SpawnNoiseMaker("Rune/BloodFueled", 0);
				If (CountInv("BloodFueledII"))
				{
					A_GiveInventory("PowerBloodfuiled");
					A_GiveInventory("ExtendedBloodFueledSpeed");
				}
				Else
				{
					A_GiveInventory("PowerBloodfuiled");
					A_GiveInventory("BloodFueledSpeed");
				}
			}
		}
		TNT1 A 1
		{
			If (CountInv("EOA_FuelAmmo")<1)
			{
				A_GiveInventory("ChainsawCooldownToken",20);
				ACS_NamedExecuteAlways("ChainsawCooldown");
			}
		}	
		TNT1 A 0 A_takeInventory("SawInv", 1)
		TNT1 A 0 A_TakeInventory("SawTrigger", 10)
		TNT1 A 0 A_jump(256, "stop")
		stop
		
	MeleeAttack:
		TNT1 A 0 A_SpawnNoiseMaker("Punch/Swing", 0)
		MFST AC 1
		{
			EOA_SetGKRecoilOffset(-5, 3, 3, True);
			If (GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM)
			{
				EOA_CheckGloryKill; //A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			}
		}
		//KICK ABCDEFGHI 1
		TNT1 A 0 
		{
			If (GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM)
			{
				EOA_CheckGloryKill; //A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			}
			If (CountInv("RipAndTear"))
			{
				Return;
			}
			Else
			{
				A_CustomPunch(15, 1, CPF_NOTURN, "EOA_MeleePuff"/*, 100*/);
			}
		}
		//KICK HGFEDCBA 1
		MFST EFGHIKL 1 //EFGHIJKL 1
		{
			EOA_SetGKRecoilOffset(2, -1);
			If (GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM))
			{
				A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * (2 * CountInv("SeekAndDestroySelected") + 2 * (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII"))));
			}
		}
		TNT1 AAAAAAAAAAAAAAAAA 1 //18 tics, the remainder of the 25 in the "Budge" animation.
		{
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM))
			{
				EOA_CheckGloryKill; //A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			}
		}
		Stop
		
   Bloodpunchthing :
	    BLPN ABC 1	EOA_SetGKRecoilOffset(-5, 3, 3, True)
		TNT1 A 0 
        {
				A_Bloodpunch;
                A_playsound("fist/blod");
                EOA_SetWeaponRecoilOffset(frandompick(-1, -0.5, 0.5, 1), -5, 0, 0.25);
                EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.3, 0.1, 32, 0, 4, 1, DYN_ADDITIVE);
                EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.3, 0.1, 32, 0, 4, 1, DYN_ATTENUATE);
        }
		BLPN DEFG 1 EOA_SetGKRecoilOffset(2, -1)
		TNT1 A 0 
			{
				if(!countinv("extrabloodpunchcounter"))
				{
					A_Takeinventory("bloodpunchcounter", 2);
				}
				if(countinv("extrabloodpunchcounter") == 1)
				{
					A_Takeinventory("extrabloodpunchcounter", 1);
					A_Takeinventory("bloodpunchcounter", 1);
				}
				if(countinv("extrabloodpunchcounter") == 2)
				{
					A_Takeinventory("extrabloodpunchcounter", 2);
				}
			}
		TNT1 A 0 A_TakeInventory("BloodAndGuts")
		Stop
		
	GloryKill:
		TNT1 A 0
		{
			SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
			A_ChangeFlag("NOTARGET", 1);
			A_ChangeFlag("NOPAIN", 1);
			A_ChangeFlag("NODAMAGE", 1);
			If (A_CheckFlag("NOGRAVITY", "Null", AAPTR_TRACER))
			{
				A_ChangeFlag("NOGRAVITY", 1);
			}
			If (CountInv("SeekAndDestroySelected"))
			{
				A_SpawnNoiseMaker("Rune/SeekAndDestroy", 0);
			}
		}
	GloryTravel:
		TNT1 A 1
		TNT1 A 0 A_Warp(AAPTR_MASTER, 0, 0, 0, 0, WARPF_TESTONLY, "GloryTravel") //[DoomKrakken]: The projectile itself has us do the warp.  This is here, doing the same thing, except it merely tests the very same conditions for the warp.  This way, it'll remain idle here until the warp fails.
		TNT1 A 1 A_JumpIfInventory("DeathFromAbove", 1, "DeathFromAbove")
		TNT1 A 0
		{
			A_SetPitch(0, SPF_INTERPOLATE);
			//A_TakeInventory("PowerStaggered", 0, 0, AAPTR_TRACER);
			A_TransferPointer(AAPTR_DEFAULT, AAPTR_TRACER, AAPTR_DEFAULT, AAPTR_TARGET);
			A_Stop;
		}
		TNT1 A 0
		{
			If (CountInv("SavagerySelected"))
			{
				A_SpawnNoiseMaker("Rune/Savagery", 0);
				If (!CountInv("SavageryII") && SavageryQueue)
				{
					A_GiveInventory("SavageryChallengeCounter");
					A_GiveInventory("MasteryTicker");
				}
			}
			If (CountInv("SeekAndDestroySelected") && !CountInv("SeekAndDestroyII"))
			{
				A_GiveInventory("SeekAndDestroyChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("BloodFueledSelected") && !CountInv("BloodFueledII") && CountInv("PowerBloodFueledSpeed"))
			{
				A_GiveInventory("BloodFueledChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("SavingThrowSelected") && !CountInv("SavingThrowII") && CountInv("PowerSavingThrow"))
			{
				A_GiveInventory("SavingThrowChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("InFlightMobilitySelected") && !CountInv("InFlightMobilityII") && !CheckTracerOnGround)
			{
				A_GiveInventory("InFlightMobilityChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
		}
		TNT1 A 0
		{
			if(CountInv("HitAndRun"))
			{
				A_GiveInventory("B5_DDash", 2);
			}
			if(countinv("extrabloodpunchcounter") == 1)
			{
			A_spawnnoisemaker("BloodPunchCharged", 0);
			}
			if(countinv("ExtraPunch") && countinv("Bloodpunchcounter") == 2)
			{
				A_giveinventory("Extrabloodpunchcounter");
			}
			if(countinv("bloodpunchcounter") == 1)
			{
			A_spawnnoisemaker("BloodPunchCharged", 0);
			}
			A_spawnnoisemaker("GloryKillDing", 0);
			if(CountInv("BigBloodyTrouble"))
			{
				A_CustomPunch(0, 0, CPF_NOTURN, "EnemyHealthChecker", 192);
			}
			if(!CountInv("BigBloodyTrouble"))
			{
				A_giveinventory("bloodpunchcounter", 1);
			}	
			if(Countinv("BigBloodyTrouble") && CountInv("bloodpunchcounter") > 1)
			{
				A_spawnnoisemaker("BloodPunchCharged", 0);
			}
		}
		//TNT1 A 0 A_Jump(256, 1, "GloryKill2", "GloryKill3", "GloryKill4", "GloryKill5", "GloryKill6", "GloryKill7", "GloryKill8")
		//[DoomKrakken]: The following directions are in relation to the monster.
		TNT1 A 0 A_JumpIf(GetGKAngle == 0, "GloryKill1Choose") //Front
		TNT1 A 0 A_JumpIf(GetGKAngle == 1, "GloryKill2") //Front Right
		TNT1 A 0 A_JumpIf(GetGKAngle == 2, "GloryKill3") //Right
		TNT1 A 0 A_JumpIf(GetGKAngle == 3, "GloryKill4") //Rear Right
		TNT1 A 0 A_JumpIf(GetGKAngle == 4, "GloryKill5") //Rear
		TNT1 A 0 A_JumpIf(GetGKAngle == 5, "GloryKill6") //Rear Left
		TNT1 A 0 A_JumpIf(GetGKAngle == 6, "GloryKill7") //Left
		TNT1 A 0 A_JumpIf(GetGKAngle == 7, "GloryKill8") //Front Left
	GloryKill1Choose:
	TNT1 A 0 A_Jump(100, "GloryKill9")
	GloryKill1: //Left punch, right punch, stomp kick.
		MFST BCD 1 EOA_SetGKRecoilOffset(-5.5, 3, 3)
		TNT1 A 0 A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff"/*, 100*/)
		TNT1 A 0 
		{
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		MFST EGIJJKK 1
		{
			EOA_SetGKRecoilOffset(-0.5, -0.5);
			EOA_SetGKRecoilOffset(-0.5, -0.5);
		}
		TNT1 A 25
		{
			EOA_SetGKRecoilOffset(-1);
			EOA_SetGKRecoilOffset(-1);
			A_SetTics(2 * (1 - (0.5 * CountInv("SavagerySelected") + 0.5 * (CountInv("SavagerySelected") && (CountInv("SavageryII"))))));
			//A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 1);
		}
		MFS2 BCD 1 EOA_SetGKRecoilOffset(5.5, 3, -3)
		TNT1 A 0
		{
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff"/*, 100*/);
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		MFS2 EGIJJKK 1
		{
			EOA_SetGKRecoilOffset(-0.5, -0.5);
			EOA_SetGKRecoilOffset(-0.5, -0.5);
		}
		TNT1 A 1
		{
			EOA_SetGKRecoilOffset(-1);
			EOA_SetGKRecoilOffset(-1);
		}
		Goto GloryKillEnd
	GloryKill2: //Knee to the face, right punch.
		TNT1 A 1
		{
			A_Overlay(10, "GloryHand");
			A_Overlay(-10, "GloryHand");
			A_OverlayFlags(-10, PSPF_FLIP|PSPF_MIRROR, 1);
			A_FaceTracer(90, 90, 0, 0, FAF_BOTTOM);
		}
		GKKN ACE 1 A_SetPitch(Pitch - Pitch / 2, SPF_INTERPOLATE)
		TNT1 A 0
		{
			A_Overlay(10, "GloryFists");
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKickPuff"/*, 100*/);
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		GKKN FF 1 A_SetPitch(Pitch - Pitch / 2, SPF_INTERPOLATE)
		GKKN F 7
		{
			A_SetPitch(0, SPF_INTERPOLATE);
			A_SetTics(7 * (1 - (0.5 * CountInv("SavagerySelected") + 0.5 * (CountInv("SavagerySelected") && (CountInv("SavageryII"))))));
		}
		GKKN DCBA 1
		TNT1 A 0 A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 1)
		GKFS AB /*F2ST NP MNOP*/ 1 EOA_SetGKRecoilOffset(10.5, 7.5, -7.5)
		TNT1 A 0 A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff"/*, 100*/)
		TNT1 A 0 
		{
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH /*F2ST Q RSTUW*/ 1 EOA_SetGKRecoilOffset(2, -2)//QRSTUVWX 1
		TNT1 A 2 EOA_SetGKRecoilOffset(4)
		Goto GloryKillEnd
	GloryKill3: //Left punch, right thrust kick.
		GKFS AB /*F2ST NP MNOP*/ 1 EOA_SetGKRecoilOffset(-10.5, 7.5, 7.5)
		TNT1 A 0 A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff"/*, 100*/)
		TNT1 A 0
		{
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH /*F2ST Q RSTUW*/ 1 EOA_SetGKRecoilOffset(4, -4)//QRSTUVWX 1
		TNT1 A 2 EOA_SetGKRecoilOffset(8)
		TNT1 A 7
		{
			A_SetTics(7 * (1 - (0.5 * CountInv("SavagerySelected") + 0.5 * (CountInv("SavagerySelected") && (CountInv("SavageryII"))))));
			A_OverlayFlags(1, PSPF_MIRROR|PSPF_FLIP, 1);
		}
		KICK AB 1 EOA_SetGKRecoilOffset(6, -4, -3)
		KICK CD 1 EOA_SetGKRecoilOffset(5, -6, -5)
		TNT1 A 0 A_CustomPunch(0, 1, CPF_NOTURN, "GloryKickPuff"/*, 100*/)
		TNT1 A 0 
		{
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		KICK EF 1 EOA_SetGKRecoilOffset(-1, -2, -3)
		KICK GHIJKLMNO 1 EOA_SetGKRecoilOffset(-1, 1)
		Goto GloryKillEnd
	GloryKill4: //Left punch, right punch.
		GKFS AB /*F2ST BD ABCD*/ 1 EOA_SetGKRecoilOffset(-10.5, 7.5, 7.5)
		TNT1 A 0 A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff"/*, 100*/)
		TNT1 A 0 
		{
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH /*F2ST E FGHIK*/ 1
		{
			EOA_SetGKRecoilOffset(-1.5, -1.5);
			EOA_SetGKRecoilOffset(-1.5, -1.5);
		}//EFGHIJKL 1
		TNT1 A 2
		{
			EOA_SetGKRecoilOffset(-3);
			EOA_SetGKRecoilOffset(-3);
		}
		TNT1 A 7
		{
			A_SetTics(7 * (1 - (0.5 * CountInv("SavagerySelected") + 0.5 * (CountInv("SavagerySelected") && (CountInv("SavageryII"))))));
			A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 1);
		}
		GKFS AB /*F2ST NP MNOP*/ 1 EOA_SetGKRecoilOffset(10.5, 7.5, -7.5)
		TNT1 A 0 A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff"/*, 100*/)
		TNT1 A 0 
		{
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH /*F2ST Q RSTUW*/ 1
		{
			EOA_SetGKRecoilOffset(1.5, -1.5);
			EOA_SetGKRecoilOffset(1.5, -1.5);
		}//QRSTUVWX 1
		TNT1 A 2
		{
			EOA_SetGKRecoilOffset(3);
			EOA_SetGKRecoilOffset(3);
		}
		Goto GloryKillEnd
	GloryKill5: //Left side punch, right punch.
		TNT1 A 0 EOA_SetGKRecoilOffset(0, 15)
		GKSF ABC 1 EOA_SetGKRecoilOffset(-7, -2)
		TNT1 A 0 A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff"/*, 100*/)
		TNT1 A 0 
		{
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		GKSF DEFGH 1 EOA_SetGKRecoilOffset(-2, -2)
		TNT1 A 7
		{
			A_SetTics(7 * (1 - (0.5 * CountInv("SavagerySelected") + 0.5 * (CountInv("SavagerySelected") && (CountInv("SavageryII"))))));
			A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 1);
		}
		GKFS AB /*F2ST NP MNOP*/ 1 EOA_SetGKRecoilOffset(10.5, 7.5, -7.5)
		TNT1 A 0 A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff"/*, 100*/)
		TNT1 A 0 
		{
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH /*F2ST Q RSTUW*/ 1
		{
			EOA_SetGKRecoilOffset(1.5, -1.5);
			EOA_SetGKRecoilOffset(1.5, -1.5);
		}//QRSTUVWX 1
		TNT1 A 2
		{
			//A_SetPitch(0, SPF_INTERPOLATE);
			EOA_SetGKRecoilOffset(3);
			EOA_SetGKRecoilOffset(3);
		}
		Goto GloryKillEnd
	GloryKill6: //Leg stomp, left punch.
		TNT1 A 1
		{
			A_Overlay(10, "GloryHand");
			A_Overlay(-10, "GloryHand");
			A_OverlayFlags(-10, PSPF_FLIP|PSPF_MIRROR, 1);
			A_FaceTracer(90, 90, 0, 0, FAF_BOTTOM);
		}
		KICK ADH 1
		KICK H 7
		{
			A_Overlay(10, "GloryFists");
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKickPuff"/*, 100*/);
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
			A_SetTics(7 * (1 - (0.5 * CountInv("SavagerySelected") + 0.5 * (CountInv("SavagerySelected") && (CountInv("SavageryII"))))));
		}
		KICK HGFEDCBA 1 A_SetPitch(Pitch - Pitch / 2, SPF_INTERPOLATE)
		TNT1 A 0
		{
			A_SetPitch(0, SPF_INTERPOLATE);
			A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 1);
		}
		GKFS AB /*F2ST BD ABCD*/ 1 EOA_SetGKRecoilOffset(10.5, 7.5, -7.5)
		TNT1 A 0 A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff"/*, 100*/)
		TNT1 A 0 
		{
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH /*F2ST E FGHIK*/ 1
		{
			EOA_SetGKRecoilOffset(-1.5, 1.5);
			EOA_SetGKRecoilOffset(-1.5, 1.5);
		}//EFGHIJKL 1
		TNT1 A 2
		{
			EOA_SetGKRecoilOffset(3);
			EOA_SetGKRecoilOffset(3);
		}
		Goto GloryKillEnd
	GloryKill7: //Right side-kick, left punch.
		TNT1 A 0
		{
			A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 1);
			EOA_SetGKRecoilOffset(-16);
		}
		GKKN ACE 1 EOA_SetGKRecoilOffset(4)
		GKSP CDE 1 EOA_SetGKRecoilOffset(8)
		TNT1 A 0 A_CustomPunch(0, 1, CPF_NOTURN, "GloryKickPuff"/*, 100*/)
		TNT1 A 0 
		{
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		GKSP DC 1
		GKKN FDB 1
		TNT1 A 7
		{
			A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 0);
			A_SetTics(7 * (1 - (0.5 * CountInv("SavagerySelected") + 0.5 * (CountInv("SavagerySelected") && (CountInv("SavageryII"))))));
		}
		GKFS AB /*F2ST NP MNOP*/ 1 EOA_SetGKRecoilOffset(-10.5, 7.5, 7.5)
		TNT1 A 0 A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff"/*, 100*/)
		TNT1 A 0
		{
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH /*F2ST RSTUW*/ 1/*Q*/ //QRSTUVWX 1
		{
			EOA_SetGKRecoilOffset(-1.5, -1.5);
			EOA_SetGKRecoilOffset(-1.5, -1.5);
		}
		TNT1 A 2
		{
			EOA_SetGKRecoilOffset(3);
			EOA_SetGKRecoilOffset(3);
		}
		Goto GloryKillEnd
	GloryKill8: //Right jab, right punch.
		FIST NP/*MNOP*/ 1 EOA_SetGKRecoilOffset(7, 5, -5)
		TNT1 A 0 A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff"/*, 100*/)
		TNT1 A 0 
		{
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		FIST /*Q*/RSTUW 1 EOA_SetGKRecoilOffset(-2, -2)//QRSTUVWX 1
		TNT1 A 2 EOA_SetGKRecoilOffset(-4)
		TNT1 A 7
		{
			A_SetTics(7 * (1 - (0.5 * CountInv("SavagerySelected") + 0.5 * (CountInv("SavagerySelected") && (CountInv("SavageryII"))))));
			A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 1);
		}
		GKFS AB /*F2ST NP MNOP*/ 1 EOA_SetGKRecoilOffset(10.5, 7.5, -7.5)
		TNT1 A 0 A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff"/*, 100*/)
		TNT1 A 0 
		{
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH /*F2ST Q RSTUW*/ 1
		{
			EOA_SetGKRecoilOffset(1.5, -1.5);
			EOA_SetGKRecoilOffset(1.5, -1.5);
		}//QRSTUVWX 1
		TNT1 A 2
		{
			EOA_SetGKRecoilOffset(3);
			EOA_SetGKRecoilOffset(3);
		}
		Goto GloryKillEnd
	GloryKill9: //Stomache kick, slice.
		TMKC CEFGH 1 EOA_SetGKRecoilOffset(-4, -4, 1)
		TNT1 A 0 A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff"/*, 100*/)
		TNT1 A 0
		{
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		TNT1 A 0 EOA_SetGKRecoilOffset(0.2, 3, 0)
		TMKC IHFD 1 //QRSTUVWX 1
		TNT1 A 1 EOA_SetGKRecoilOffset(-4, -2, 0)
		TNT1 A 2
		{
			EOA_SetGKRecoilOffset(3, 5, 1);
			A_SetTics(7 * (1 - (0.5 * CountInv("SavagerySelected") + 0.5 * (CountInv("SavagerySelected") && (CountInv("SavageryII"))))));
			//A_OverlayFlags(1, PSPF_MIRROR|PSPF_FLIP, 1);
		}
		TNT1 A 0 A_SpawnNoiseMaker("BladeExtened", 1)
		SLIC CDEFGH 1
		TNT1 A 0 A_CustomPunch(0, 1, CPF_NOTURN, "GloryKickPuff"/*, 100*/)
		TNT1 A 0 
		{
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		TNT1 A 0 EOA_SetGKRecoilOffset(-3, -5, -6)
		TNT1 A 0 A_SpawnNoiseMaker("BladeSlice", 1)
		SLIC IJL 1
		Goto GloryKillEnd
	GloryHand:
		GRBH DGEI 1
		Stop
	GloryFists:
		BFSR DCBAA 1 //AAAAAA 1
		BFSR A 7 A_SetTics(7 * (1 - (0.5 * CountInv("SavagerySelected") + 0.5 * (CountInv("SavagerySelected") && (CountInv("SavageryII"))))))
		Stop
	//GloryKick:
	GloryKillEnd:
		TNT1 A 0 
		{
			A_WeaponOffset;
			SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
			A_OverlayFlags(1, PSPF_MIRROR|PSPF_FLIP, 0);
			A_ChangeFlag("NOTARGET", 0);
			A_ChangeFlag("NOPAIN", 0);
			A_ChangeFlag("NODAMAGE", 0);
			A_ChangeFlag("NOGRAVITY", 0);
			A_TakeInventory("RipAndTear");
			A_TakeInventory("DeathFromAbove");
			If (CountInv("ArmoredOffensiveSelected"))
			{
				/*A_PlaySound*/ A_SpawnNoiseMaker("Rune/ArmoredOffensive", 0);
			}
			If (CountInv("BloodFueledSelected"))
			{
				/*A_PlaySound*/ A_SpawnNoiseMaker("Rune/BloodFueled", 0);
				If (CountInv("BloodFueledII"))
				{
					A_GiveInventory("PowerBloodfuiled");
					A_GiveInventory("ExtendedBloodFueledSpeed");
				}
				Else
				{
					A_GiveInventory("PowerBloodfuiled");
					A_GiveInventory("BloodFueledSpeed");
				}
			}
		}
		TNT1 A 0 A_Jump(256, "Select")
		Goto Select
	DeathFromAbove:
		TNT1 A 0
		{
			A_TakeInventory("PowerStaggered", 0, 0, AAPTR_TRACER);
			A_TransferPointer(AAPTR_DEFAULT, AAPTR_TRACER, AAPTR_DEFAULT, AAPTR_TARGET);
			A_SetPitch(60, SPF_INTERPOLATE);
			A_Stop;
		/*}
		TNT1 A 0
		{*/
			If (CountInv("SavagerySelected"))
			{
				A_SpawnNoiseMaker("Rune/Savagery", 0);
				If (!CountInv("SavageryII") && SavageryQueue)
				{
					A_GiveInventory("SavageryChallengeCounter");
					A_GiveInventory("MasteryTicker");
				}
			}
			If (CountInv("SeekAndDestroySelected") && !CountInv("SeekAndDestroyII"))
			{
				A_GiveInventory("SeekAndDestroyChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("BloodFueledSelected") && !CountInv("BloodFueledII") && CountInv("PowerBloodFueledSpeed"))
			{
				A_GiveInventory("PowerBloodfuiled");
				A_GiveInventory("BloodFueledChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("SavingThrowSelected") && !CountInv("SavingThrowII") && CountInv("PowerSavingThrow"))
			{
				A_GiveInventory("SavingThrowChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("DazedAndConfusedSelected") && !CountInv("DazedAndConfusedII"))
			{
				A_GiveInventory("DazedAndConfusedChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("InFlightMobilitySelected") && !CountInv("InFlightMobilityII"))
			{
				A_GiveInventory("InFlightMobilityChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			EOA_SetGKRecoilOffset(0, 0, randompick(-10, 10), True);
			A_Overlay(-10, "DeathFromAbove2");
			A_OverlayFlags(-10, PSPF_FLIP|PSPF_MIRROR, True);
			A_WeaponOffset(-10, 0, WOF_KEEPY);
			A_OverlayOffset(-10, -30, 0, WOF_KEEPY);
		}
		TNT1 A 0
		{
			if(CountInv("HitAndRun"))
			{
				A_GiveInventory("B5_DDash", 2);
			}
			if(countinv("extrabloodpunchcounter") == 1)
			{
			A_spawnnoisemaker("BloodPunchCharged", 0);
			}
			if(countinv("ExtraPunch") && countinv("Bloodpunchcounter") == 2)
			{
				A_giveinventory("Extrabloodpunchcounter");
			}
			if(countinv("bloodpunchcounter") == 1)
			{
			A_spawnnoisemaker("BloodPunchCharged", 0);
			}
			A_spawnnoisemaker("GloryKillDing", 0);
			if(CountInv("BigBloodyTrouble"))
			{
				A_CustomPunch(0, 0, CPF_NOTURN, "EnemyHealthChecker", 192);
			}
			if(!CountInv("BigBloodyTrouble"))
			{
				A_giveinventory("bloodpunchcounter", 1);
			}	
			if(Countinv("BigBloodyTrouble") && CountInv("bloodpunchcounter") > 1)
			{
				A_spawnnoisemaker("BloodPunchCharged", 0);
			}
		}
		KICK ONML 1
		TNT1 A 0 
		{
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKickPuff");
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		KICK KJIHGFEDCCC 1 //A_SetPitch(60, SPF_INTERPOLATE)
		//KICK AAAAAAAAAAAAAAAA 1
		{
			A_SetPitch(60, SPF_INTERPOLATE);
			If (CountInv("SavagerySelected"))
			{
				If (CountInv("SavageryII"))
				{
					If (CountInv("SpeedCounter") >= 3)
					{
						A_TakeInventory("SpeedCounter");
					}
					Else
					{
						A_SetTics(0);
						A_GiveInventory("SpeedCounter");
					}
				}
				Else If (CountInv("SpeedCounter"))
				{
					A_TakeInventory("SpeedCounter");
				}
				Else
				{
					A_SetTics(0);
					A_GiveInventory("SpeedCounter");
				}
			}
		}
		KICK B 1 A_SetPitch(54, SPF_INTERPOLATE)
		KICK A 1 A_SetPitch(48, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch(42, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch(36, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch(30, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch(24, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch(18, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch(12, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch(6, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch(0, SPF_INTERPOLATE)
		Goto GloryKillEnd
	DeathFromAbove2:
		KICK ONML 1
		KICK KJIHGFEDCCCBA 1
		//KICK AAAAAAAAAAAAAAAA 1
		{
			If (CountInv("SavagerySelected"))
			{
				If (CountInv("SavageryII"))
				{
					If (CountInv("SpeedCounter") >= 3)
					{
						A_TakeInventory("SpeedCounter");
					}
					Else
					{
						A_SetTics(0);
						A_GiveInventory("SpeedCounter");
					}
				}
				Else If (CountInv("SpeedCounter"))
				{
					A_TakeInventory("SpeedCounter");
				}
				Else
				{
					A_SetTics(0);
					A_GiveInventory("SpeedCounter");
				}
			}
		}
		KICK BA 1
		Stop
	}
}

ACTOR EnemyHealthChecker : EOA_NullPuff2
{
	+HITTRACER
	+ALLOWTHRUFLAGS
	+THRUGHOST
	States
	{
	Spawn:
	Crash:
	Death:
	XDeath:
		TNT1 A 0 NoDelay
		{
				If (CallACS("GetMaxTracerHealth") >= 400)
				{
					A_TransferPointer(AAPTR_TRACER, AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_TRACER);
					if(Countinv("bloodpunchcounter",AAPTR_TARGET) == 0)
					{
						A_GiveInventory("Bloodpunchcounter", 2,AAPTR_TARGET);
					}
					else if(Countinv("bloodpunchcounter",AAPTR_TARGET) == 1 && countinv("extrapunch",AAPTR_TARGET))
					{
						A_GiveInventory("Bloodpunchcounter", 2,AAPTR_TARGET);
						A_GiveInventory("extraBloodpunchcounter", 1,AAPTR_TARGET);
					}
					else if(Countinv("bloodpunchcounter",AAPTR_TARGET) == 2 && countinv("extrapunch",AAPTR_TARGET))
					{
						A_GiveInventory("extraBloodpunchcounter", 2,AAPTR_TARGET);
					}
				}
				Else If (CallACS("GetMaxTracerHealth") < 400)
				{
					A_TransferPointer(AAPTR_TRACER, AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_TRACER);
					A_GiveInventory("Bloodpunchcounter", 1, AAPTR_TARGET);
				}
		}
		Stop
	}
}

ACTOR EOA_MeleePuff : BulletPuff
{
	States
	{
	XDeath:
		TNT1 A 0
		{
			A_PlaySound("Punch/GloryKill", 0);
			A_PlaySound("Punch/Bass", 0);
		}
		Goto Super::Melee
	Melee:
	Crash:
		TNT1 A 0
		{
			A_PlaySound("Punch/Base", 0);
			A_PlaySound("Punch/Bass", 0);
		}
		Goto Super::Melee
	}
}

ACTOR EOA_BloodPuff : BulletPuff
{
    +HITTRACER
	+PUFFGETSOWNER
    States
    {
    XDeath:
        TNT1 A 0
        {
            A_PlaySound("Punch/GloryKill", 0);
            A_PlaySound("Punch/Bass", 0);
            If (a_CheckFlag("ISMONSTER", "Null", AAPTR_TRACER))
            {
                A_GiveToTarget("BloodPunchCounter");
            }
        }
        Goto Super::Melee
    Melee:
    Crash:
        TNT1 A 0
        {
            A_PlaySound("Punch/Base", 0);
            A_PlaySound("Punch/Bass", 0);
            If (a_CheckFlag("ISMONSTER", "Null", AAPTR_TRACER))
            {
                A_GiveToTarget("BloodPunchCounter");
            }
        }
        Goto Super::Melee
    }
}

ACTOR DeathFromAbove : EOA_Token{}

ACTOR GloryKillPuff : BulletPuff
{
	+ALWAYSPUFF
	+PUFFONACTORS
	+FOILINVUL
	States
	{
	XDeath:
		TNT1 A 0
		{
			A_PlaySound("Punch/GloryKill", 0);
			A_PlaySound("Punch/Bass", 0);
		}
		Stop
	Melee:
	Crash:
		TNT1 A 0
		{
			A_PlaySound("Punch/GloryKill", 0);
			A_PlaySound("Punch/Bass", 0);
		}
		Goto Super::Melee
	}
}

ACTOR GloryKickPuff : GloryKillPuff
{
	States
	{
	XDeath:
		TNT1 A 0 
		{
			A_PlaySound("Punch/GloryKill", 0);
			A_PlaySound("Punch/BoneSnap", 0);
		}
		Stop
	Melee:
	Crash:
		TNT1 A 0 
		{
			A_PlaySound("Punch/GloryKill", 0);
			A_PlaySound("Punch/BoneSnap", 0);
		}
		Goto Super::Melee
	}
}

ACTOR EOA_FragGrenadeProjectile : EOA_Projectile
{
	Projectile
	Radius 2.5
	Height 5
	Scale 0.1
	Speed 25
	Damage (32)
	Gravity 0.75
	ReactionTime 25
	BounceSound "Frag/Bounce"
	BounceFactor 0.25
	WallBounceFactor 0.25
	Var Int User_ReactionTime;
	Var Int User_EquipmentPower;
	Var Int User_FirstBounce;
	Var Int User_Spawned;
	Var Int User_HasTracer;
	BounceType Doom
	+ALLOWBOUNCEONACTORS
	+BOUNCEONACTORS
	+CANBOUNCEWATER
	+friendly
	//+EXTREMEDEATH
	+FORCEXYBILLBOARD
	//+NODAMAGETHRUST
	-NOGRAVITY
	+ROLLCENTER
	+ROLLSPRITE
	+USEBOUNCESTATE
	States
	{
	Spawn:
		FRAG A 0 NoDelay 
		{
			//A_SetUserVar("User_EquipmentPower", CountInv("EquipmentPowerSelected", AAPTR_TARGET) + CountInv("EquipmentPowerSelected", AAPTR_TARGET) * CountInv("EquipmentPowerII", AAPTR_TARGET));
			If (EquipmentPowerLevel)
			{
				A_PlaySound("Rune/EquipmentPower", 1, 1.0, 0, ATTN_NONE);
			}
			//A_SetUserVar("User_ReactionTime", 53);
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.4, 0.2, 64, 0, 1, 1, DYN_ADDITIVE);
			A_SetUserVar("User_Spawned", 1);
			A_SpawnItemEx("FragGrenadeSmokeTrail", 0, 0, 0, 0, 0, 0, 0, SXF_ORIGINATOR|SXF_SETTRACER);
			A_RearrangePointers(AAPTR_DEFAULT, AAPTR_TARGET);
			A_ClearTarget;
			A_CopyFriendliness(AAPTR_MASTER);
		}
	SpawnLoop:
		FRAG A 1
		{
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.4, 0.2, 64, 0, 1, 1, DYN_ADDITIVE);
			If (sqrt((VelX * VelX) + (VelY * VelY) + (VelZ * VelZ)) < 0.2)
			{
				Return State ("Death");
			}
			Else
			{
				A_SetRoll(Roll - 30);
				If (User_FirstBounce)
				{
					ReactionTime--; //A_SetUserVar("User_ReactionTime", User_ReactionTime - 1);
				}
				Return State ("");
			}
		}
		FRAG A 0 A_JumpIf(ReactionTime == 19, "Prime")
		FRAG A 0 A_JumpIf(ReactionTime <= 0, "Boom")
		Loop
	Bounce:
		FRAG A 0 A_JumpIf(!User_Spawned, "Spawn")
		FRAG A 0
		{
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.4, 0.2, 64, 0, 1, 1, DYN_ADDITIVE);
			A_SetUserVar("User_FirstBounce", 1);
			If (!User_HasTracer)
			{
				A_LookEx(LOF_NOSOUNDCHECK|LOF_NOJUMP, 0, 212 + 20 * EquipmentPowerLevel, 0, 360, "Null");
				If (Target)
				{
					A_SetUserVar("User_HasTracer", 1);
					ReactionTime -= 12; //A_SetUserVar("User_ReactionTime", User_ReactionTime - 18);
					A_RearrangePointers(AAPTR_MASTER, AAPTR_DEFAULT);
				}
			}
		}
		FRAG A 0 A_JumpIf(ReactionTime == 19, "Prime")
		FRAG A 0 A_JumpIf(ReactionTime <= 0, "Boom")
		Goto SpawnLoop
	Death:
		TNT1 A 0
		{
			A_PlaySound("Frag/Bounce", 0);
			A_SetRoll(randomPick(-90, 90));
			A_ChangeFlag("FLOORCLIP", 1);
			A_ChangeFlag("THRUACTORS", 1);
			A_Stop;
		}
	Inert:
		FRAG B 1 A_JumpIf(ReactionTime == 19, "Prime")
		FRAG B 0 A_JumpIf(ReactionTime <= 0, "Boom")
		FRAG B 0 
		{
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.4, 0.2, 64, 0, 1, 1, DYN_ADDITIVE);
			A_SpawnItem("FragGrenadeSmoke");
			ReactionTime--; //A_SetUserVar("User_ReactionTime", User_ReactionTime - 1);
			If (!User_HasTracer)
			{
				A_LookEx(LOF_NOSOUNDCHECK|LOF_NOJUMP, 0, 212 + 20 * EquipmentPowerLevel, 0, 360, "Null");
				If (Target)
				{
					A_SetUserVar("User_HasTracer", 1);
					ReactionTime--; //A_SetUserVar("User_ReactionTime", User_ReactionTime - 18);
				}
			}
		}
		Loop
	Prime:
		TNT1 A 0 
		{
			ReactionTime--; //A_SetUserVar("User_ReactionTime", User_ReactionTime - 1);
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.4, 0.2, 64, 0, 1, 1, DYN_ADDITIVE);
			A_PlaySound("Frag/Prime");
			If (sqrt((VelX * VelX) + (VelY * VelY) + (VelZ * VelZ)) < 0.2)
			{
				Return State ("Inert");
			}
			Else
			{
				Return State ("SpawnLoop");
			}
		}
		Goto Spawn
	Boom:
		TNT1 A 0 A_SetScale(0.75 * (1 + 0.125 * EquipmentPowerLevel))
		TNT1 AAAAAAAAA 0 A_SpawnItemEx("EOA_GenericExplosionFX", 0, 0, 0, frandom(-3, 3), frandom(-3, 3), frandom(-3, 3), random(1, 360), SXF_TRANSFERSCALE)
		TNT1 A 3
		{
			//[DoomKrakken]: Switch the pointers back.
			If (!Target)
			{
				A_RearrangePointers(AAPTR_MASTER, AAPTR_DEFAULT);
			}
			A_Stop;
			A_ChangeFlag("NOGRAVITY", 1);
			A_ChangeFlag("DONTBLAST", 1);
			A_ChangeFlag("EXTREMEDEATH", 1);
			A_SetScale(1.5 * (1 + 0.125 * EquipmentPowerLevel));
			A_SetRoll(0);
			EOA_Explode(252 /*+ 32 * (User_EquipmentPower > 0)*/, 212 + 20 * EquipmentPowerLevel, XF_HURTSOURCE, 1, 48 * (EquipmentPowerLevel > 0) + 16 * (EquipmentPowerLevel > 1), 0.1875 - 0.03125 * EquipmentPowerLevel);
			A_PlaySound("Frag/Explode");
			A_PlaySound("Frag/Add", 0);
		}
		TNT1 A 0 A_SpawnItemEx("EOA_RocketExplosion", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERSCALE|SXF_NOCHECKPOSITION)
		Stop
	}
}

ACTOR FragGrenadeSmokeTrail : FastProjectileTrail 
{
	MissileType "FragGrenadeSmoke"
}	

ACTOR FragGrenadeSmoke
{
	Projectile
	Radius 0
	Height 0
	Scale 0.15
	Alpha 0.3
	RenderStyle Translucent
	+NOINTERACTION
	+NOTRIGGER
	+FORCEXYBILLBOARD
	+ROLLSPRITE
	+ROLLCENTER
	States
	{
	Spawn:
		GNSK A 0 Bright A_Jump(256, "SetSprite")
	SetSprite:
		"####" "#" 1
		{
			A_FadeOut(0.02);
			A_SetScale(ScaleX + 0.01);
		}
		Loop
	}
}

ACTOR EOA_HologramProjection : EOA_EquipmentBase
{
	Monster
	Radius 20
	Height 56
	Health 100
	Speed 0
	Alpha 0
	//RenderStyle "Add"
	//Translation "Cyan"
	Var Int User_EquipmentPower;
	Var Int User_ReactionTime;
	Tag "HoloDoom" //[DoomKrakken]: (smirk)
	+BRIGHT
	+DONTBLAST
	+DONTTHRUST
	+FLOORCLIP
	+FRIENDLY
	-ISMONSTER
	+LOOKALLAROUND
	+NOBLOCKMONST
	+NOBLOOD
	//+NODAMAGE
	+NODAMAGETHRUST
	+NOKILLSCRIPTS
	-SOLID
	//+THRUACTORS
	//+NONSHOOTABLE
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_SetUserVar("User_EquipmentPower", CountInv("EquipmentPowerSelected", AAPTR_MASTER) + CountInv("EquipmentPowerSelected", AAPTR_MASTER) * CountInv("EquipmentPowerII", AAPTR_MASTER));
			A_PlaySound("Hologram/Start", 1);
			A_SetUserVar("User_ReactionTime", 175 * (1 + User_EquipmentPower));
			A_SetHealth(100 * (1 + User_EquipmentPower));
			If (User_EquipmentPower)
			{
				A_PlaySound("Rune/EquipmentPower", 2, 1.0, 0, ATTN_NONE);
				/*A_SetUserVar("User_ReactionTime", 350);				
				If (CountInv("EquipmentPowerII", AAPTR_MASTER))
				{
					A_SetHealth(200);
				}*/
			}
		}
		DOOM AAAAAAA 1 A_FadeIn(0.135)
	See:
		DOOM A 1 
		{
			A_Chase;
			A_FaceTarget;
			A_SetUserVar("User_ReactionTime", User_ReactionTime - 1);
			If (User_ReactionTime <= 0)
			{
				Return State ("FadeAway");
			}
			Else
			{
				Return State ("");
			}
		}
		Wait
	Missile:
		DOOM F 1
		{
			A_AlertMonsters;
			A_PlaySound("PLR/Fire1", 6, 0.5);
			A_PlaySound("PLR/Fire2", 5, 0.25);
			A_PlaySound("PLR/Fire3", 4, 0.25);
			A_PlaySound("PLR/Fire4", 3);
			A_CustomMissile("DecoyPlasmaBall");
			A_FaceTarget;
			A_SetUserVar("User_ReactionTime", User_ReactionTime - 1);
			If (User_ReactionTime <= 0)
			{
				Return State ("FadeAway");
			}
			Else
			{
				Return State ("");
			}
		}
		DOOM EE 1
		{
			A_FaceTarget;
			A_SetUserVar("User_ReactionTime", User_ReactionTime - 1);
			If (User_ReactionTime <= 0)
			{
				Return State ("FadeAway");
			}
			Else
			{
				Return State ("");
			}
		}
		TNT1 A 0 A_Jump(10, "Done")
		Goto Missile
	Done:
		TNT1 A 0 A_PlaySound("PLR/Spin", 7, 0.5)
		DOOM AAAAAAAAAAAAAAAAAA 1
		{
			A_FaceTarget;
			A_SetUserVar("User_ReactionTime", User_ReactionTime - 1);
			If (User_ReactionTime <= 0)
			{
				Return State ("FadeAway");
			}
			Else
			{
				Return State ("");
			}
		}
		Goto See
	Death:
		TNT1 A 0
		{
			A_Stop;
			A_NoBlocking(0);
		}
		DOOM HIJKLM 10
		DOOM N 35
	FadeAway:
		"####" "#" 0 
		{
			A_PlaySound("Hologram/End", 1);
			A_Stop;
			A_NoBlocking(0);
		}
		"####" "#######" 1 A_FadeOut(0.135)
		Stop
	}
}

ACTOR EOA_SiphonGrenadeProjectile : EOA_EquipmentBase
{
	Projectile
	Radius 6
	Height 12
	Scale 0.25
	Speed 45
	Gravity 0.625
	+BRIGHT
	-NOGRAVITY
	+ROLLSPRITE
	+ROLLCENTER
	+NOEXTREMEDEATH
	+FORCEXYBILLBOARD
	Var Int User_EquipmentPower;
	States
	{
	Spawn:
		SIPH A 0 NoDelay A_SetUserVar("User_EquipmentPower", CountInv("EquipmentPowerSelected", AAPTR_MASTER) + CountInv("EquipmentPowerSelected", AAPTR_MASTER) * CountInv("EquipmentPowerII", AAPTR_MASTER))
		SIPH A 1 A_SetRoll(Roll - 30)
		Wait
	Death:
		SIPH A 0
		{
			If (User_EquipmentPower)
			{
				A_PlaySound("Rune/EquipmentPower", 1, 1.0, 0, ATTN_NONE);
			}
			A_AlertMonsters;
			A_SpawnItemEx("SiphonSphere", 0, 0, 0, 0, 0, 0, random(1, 360));
			A_PlaySound("Siphon/Explode", 2, 1.0, 0, ATTN_NONE);
			A_ChangeFlag("FLOORCLIP", 1);
			A_ChangeFlag("THRUACTORS", 1);
			A_NoGravity;
			A_Stop;
		}
		SIPH AAAAAAAA 5 A_Siphon
		SIPH AAAAAAA 5
		{
			A_Siphon;
			A_FadeOut(0.135);
		}
		Stop
	}
}

ACTOR SiphonSphere
{
	Alpha 0.1
	Scale 444
	Translation "Red"
	Var Int User_Ang;
	RenderStyle Add
	+NOINTERACTION
	+CLIENTSIDEONLY
	+FORCEXYBILLBOARD
	+NOBLOCKMAP
	+DONTSPLASH
	+THRUACTORS
	+NOTRIGGER
	+NOBLOCKMONST
	+CANNOTPUSH
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetUserVar("User_Ang", 100)//randompick(-100, 100))
		NULL AAAAAAAAAAAAAAAAAAAA 1 Bright
		{
			A_FadeIn(0.045);
			A_SetAngle(Angle - (User_Ang * 0.05));
		}
	Fade:
		NULL A 1 Bright
		{
			A_SetAngle(Angle - (User_Ang * 0.05));
			//A_SetScale(ScaleX * 0.975);
			A_SetScale(ScaleX * 0.988);
			A_FadeOut(0.04);
		}
		Loop
	}
}
ACTOR EOA_BerserkFist : EOA_Weapon
{
	Inventory.Icon "ICOFIST"
	Weapon.UpSound ""
	Tag "Berserk Fist"
	Weapon.AmmoType1 "None"
	Weapon.AmmoType2 "None"
	+CHEATNOTWEAPON
	+NOAUTOFIRE
	States
	{
	Spawn:
		TNT1 A -1
		Stop
	Select:
		TNT1 A 0
		{
			SetPlayerProperty(0, 1, PROP_INSTANTWEAPONSWITCH);
			A_SetCrosshair(99);
		}
		TNT1 A 1 A_Raise(60)
		Wait
	Deselect:
		BFSR DCBA 1
		TNT1 A 1 
		{
			A_WeaponOffset(0, 32);
			A_Lower(36);
			A_TakeInventory("EOA_BerserkFist");
			SetPlayerProperty(0, 0, PROP_INSTANTWEAPONSWITCH);
			//A_SetSpeed(1.0);
		}
		Wait
	Ready:
		BFSR ABCD 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"), EOA_ALLOWMANTLE);
			If (!CountInv("PowerBerserk"))
			{
				Return State ("Deselect");
			}
			Return State ("");
		}
		Goto ReadyLoop
	ReRaise:
		BFSR ABCD 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_DISABLESWITCH * CountInv("PowerBerserk")|WRF_NOFIRE * !CountInv("PowerBerserk")|WRF_NOPRIMARY * (GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)|WRF_NOSECONDARY * (GetPlayerInput(INPUT_OLDBUTTONS) & BT_ALTATTACK)|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE);
			If (!CountInv("PowerBerserk"))
			{
				Return State("Deselect");
			}
			Return State("");
		}
	ReadyLoop:
		BFST A 1 
		{
			EOA_WeaponReady(WRF_NOBOB * !CountInv("PowerBerserk")|WRF_NOFIRE * !CountInv("PowerBerserk")|WRF_DISABLESWITCH * CountInv("PowerBerserk")|WRF_NOPRIMARY * (GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)|WRF_NOSECONDARY * (GetPlayerInput(INPUT_OLDBUTTONS) & BT_ALTATTACK)|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE);
			If (!CountInv("PowerBerserk"))
			{
				Return State("Deselect");
			}
			Return State("");
		}
		Loop
	Fire:
	Zoom:
		BFSR DCBA 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"));
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) || (GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM))
			{
				EOA_CheckGloryKill; //A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			}
			If (CountInv("RipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				Return State ("BerserkGloryKillLaunch");
			}
			Else
			{
				Return State ("");
			}
		}
	ReFire:
		TNT1 A 0 
		{
			A_SpawnNoiseMaker("Punch/Swing", 5);
			A_SpawnNoiseMaker("Berserk/Swing", 6, 0.5);
		}
		FIST NP/*MNOP*/ 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"));
			//EOA_SetGKRecoilOffset(5, 3, -3);
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) || (GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM))
			{
				EOA_CheckGloryKill; //A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			}
			If (CountInv("RipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				Return State ("BerserkGloryKillLaunch");
			}
			Else
			{
				Return State ("");
			}
		}
		TNT1 A 0 //[DoomKrakken]: This is where the damage is dealt should the Glory Kill check fail.
		{
			EOA_CheckGloryKill; //A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			If (CountInv("RipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				Return State ("BerserkGloryKillLaunch");
			}
			Else
			{
				A_CustomPunch(500, 1, 0, "EOA_MeleePuff");
				Return State ("");
			}
		}
		FIST /*Q*/RSTUW 1 //QRSTUVWX 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"));
			//EOA_SetGKRecoilOffset(2, 1);
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) || (GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM))
			{
				EOA_CheckGloryKill; //A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			}
			If (CountInv("RipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				Return State ("BerserkGloryKillLaunch");
			}
			Else
			{
				Return State ("");
			}
		}
		TNT1 A 5
		TNT1 AAAAAAAAAA 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"));
			If (CountInv("PowerBerserk"))
			{
				If (((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)) || ((GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM)))
				{
					Return State ("ReFire");
				}
				If ((GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ALTATTACK))
				{
					Return State ("AltReFire");
				}
				Return State ("");
			}
			Else
			{
				Return State("Deselect");
			}
		}
		Goto ReRaise
	AltFire:
		BFSR DCBA 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"));
			If (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)
			{
				EOA_CheckGloryKill; //A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			}
			If (CountInv("RipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				Return State ("BerserkGloryKillLaunch");
			}
			Else
			{
				Return State ("");
			}
		}
	AltReFire:
		TNT1 A 0 
		{
			A_SpawnNoiseMaker("Punch/Swing", 5);
			A_SpawnNoiseMaker("Berserk/Swing", 6, 0.5);
		}
		FIST BD/*ABCD*/ 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"));
			//EOA_SetGKRecoilOffset(-5, 3, 3);
			If (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)
			{
				EOA_CheckGloryKill; //A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			}
			If (CountInv("RipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				Return State ("BerserkGloryKillLaunch");
			}
			Else
			{
				Return State ("");
			}
		}
		TNT1 A 0 //[DoomKrakken]: This is where the damage is dealt should the Glory Kill check fail.
		{
			EOA_CheckGloryKill; //A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			If (CountInv("RipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				Return State ("BerserkGloryKillLaunch");
			}
			Else
			{
				A_CustomPunch(500, 1, 0, "EOA_MeleePuff");
				Return State ("");
			}
		}
		FIST /*E*/FGHIK 1 //EFGHIJKL 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"));
			//EOA_SetGKRecoilOffset(-2, 1);
			If (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)
			{
				EOA_CheckGloryKill; //A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			}
			If (CountInv("RipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				Return State ("BerserkGloryKillLaunch");
			}
			Else
			{
				Return State ("");
			}
		}
		TNT1 A 5
		TNT1 AAAAAAAAAA 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH * CountInv("PowerBerserk"));
			If (CountInv("PowerBerserk"))
			{
				If (((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)) || ((GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM)))
				{
					Return State ("ReFire");
				}
				If ((GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ALTATTACK))
				{
					Return State ("AltReFire");
				}
				Return State ("");
			}
			Else
			{
				Return State("Deselect");
			}
		}
		Goto ReRaise
	BerserkGloryKillLaunch:
		TNT1 A 0
		{
			SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
			A_ChangeFlag("NOTARGET", 1);
			A_ChangeFlag("NOPAIN", 1);
			A_ChangeFlag("NODAMAGE", 1);
			If (A_CheckFlag("NOGRAVITY", "Null", AAPTR_TRACER))
			{
				A_ChangeFlag("NOGRAVITY", 1);
			}
			If (CountInv("SeekAndDestroySelected"))
			{
				A_SpawnNoiseMaker("Rune/SeekAndDestroy", 0);
			}
		}
	BerserkGloryTravel:
		TNT1 A 1
		TNT1 A 0 A_Warp(AAPTR_MASTER, 0, 0, 0, 0, WARPF_TESTONLY, "BerserkGloryTravel") //[DoomKrakken]: The projectile itself has us do the warp.  This is here, doing the same thing, except it merely tests the very same conditions for the warp.  This way, it'll remain idle here until the warp fails.
		TNT1 A 0 A_JumpIfInventory("DeathFromAbove", 1, "BerserkDeathFromAbove")
		TNT1 A 1
		{
			A_SetPitch(0, SPF_INTERPOLATE);
			//A_TakeInventory("PowerStaggered", 0, 0, AAPTR_TRACER);
			A_TransferPointer(AAPTR_DEFAULT, AAPTR_TRACER, AAPTR_DEFAULT, AAPTR_TARGET);
			A_Stop;
		}
		TNT1 A 0
		{
			If (CountInv("SavagerySelected"))
			{
				A_SpawnNoiseMaker("Rune/Savagery", 0);
				If (!CountInv("SavageryII") && SavageryQueue)
				{
					A_GiveInventory("SavageryChallengeCounter");
					A_GiveInventory("MasteryTicker");
				}
			}
			If (CountInv("SeekAndDestroySelected") && !CountInv("SeekAndDestroyII"))
			{
				A_GiveInventory("SeekAndDestroyChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("BloodFueledSelected") && !CountInv("BloodFueledII") && CountInv("PowerBloodFueledSpeed"))
			{
				A_GiveInventory("BloodFueledChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("SavingThrowSelected") && !CountInv("SavingThrowII") && CountInv("PowerSavingThrow"))
			{
				A_GiveInventory("SavingThrowChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CallACS("GetMaxTracerHealth") >= 300)
			{
				Return State ("BerserkGloryKillComplex");
			}
			Else
			{
				Return State ("");
			}
		}
	BerserkGloryKillSimple:
		TNT1 A 0
		{
			If (!GetGKAngle && CheckGKVictimState)
			{
				Return A_Jump(128, "BerserkTearGloryKill");
			}
			Return A_Jump(128, "BerserkGloryKillSimple2");
		}
		GKFS AB /*F2ST BD ABCD*/ 1 EOA_SetGKRecoilOffset(-10, 6, 6, 2)
		TNT1 A 0 
		{
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff", 192);
			A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192);
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH /*F2ST E FGHIK*/ 1 EOA_SetGKRecoilOffset(-4, 2, 0, 2)
//EFGHIJKL 1
		TNT1 A 2
		Goto BerserkGloryKillEnd
	BerserkGloryKillSimple2:
		TNT1 A 0 A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 1)
		GKFS AB /*F2ST NP MNOP*/ 1 EOA_SetGKRecoilOffset(10, 6, -6, 2)
		TNT1 A 0 A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192)
		TNT1 A 0 
		{
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff", 192);
			A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192);
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH /*F2ST Q RSTUW*/ 1 EOA_SetGKRecoilOffset(4, 2, 0, 2)//QRSTUVWX 1
		TNT1 A 2
		Goto BerserkGloryKillEnd
	BerserkGloryKillComplex:
		TNT1 A 0 A_Jump(128, "BerserkGloryKillComplex2")
		GKFS AB /*F2ST BD ABCD*/ 1 EOA_SetGKRecoilOffset(-10, 6, 6, 2)
		TNT1 A 0 
		{
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff", 192);
			A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192);
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH /*F2ST E FGHIK*/ 1 EOA_SetGKRecoilOffset(-4, 2, 0, 2)
//EFGHIJKL 1
		TNT1 A 2 A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 1)
		TNT1 A 8 A_SetTics(8 * (1 - (0.5 * CountInv("SavagerySelected") + 0.5 * (CountInv("SavagerySelected") && (CountInv("SavageryII"))))))
		GKFS AB /*F2ST NP MNOP*/ 1 EOA_SetGKRecoilOffset(10, 6, -6, 2)
		TNT1 A 0
		{
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff", 192);
			A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192);
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH /*F2ST Q RSTUW*/ 1 EOA_SetGKRecoilOffset(4, 2, 0, 2)//QRSTUVWX 1
		TNT1 A 2
		Goto BerserkGloryKillEnd
	BerserkGloryKillComplex2:
		TNT1 A 0 A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 1)
		GKFS AB /*F2ST NP MNOP*/ 1 EOA_SetGKRecoilOffset(10, 6, -6, 2)
		TNT1 A 0 
		{
			A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 1);
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff", 192);
			A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192);
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH /*F2ST Q RSTUW*/ 1 EOA_SetGKRecoilOffset(4, 2, 0, 2)//QRSTUVWX 1
		TNT1 A 2 A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 0)
		TNT1 A 8 A_SetTics(8 * (1 - (0.5 * CountInv("SavagerySelected") + 0.5 * (CountInv("SavagerySelected") && (CountInv("SavageryII"))))))
		GKFS AB /*F2ST BD ABCD*/ 1 EOA_SetGKRecoilOffset(-10, 6, 6, 2)
		TNT1 A 0 
		{
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillPuff", 192);
			A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192);
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		GKFS CDEFGH /*F2ST E FGHIK*/ 1 EOA_SetGKRecoilOffset(-4, 2, 0, 2)
		TNT1 A 3
		Goto BerserkGloryKillEnd
	BerserkTearGloryKill:
		TNT1 A 0
		{
			A_Overlay(10, "BerserkTearGloryKillAnim");
			A_Overlay(-10, "BerserkTearGloryKillAnim");
			A_OverlayFlags(-10, PSPF_FLIP|PSPF_MIRROR, True);
			//A_WeaponOffset(-10, 0, WOF_KEEPY);
			//A_OverlayOffset(-10, -32, 0, WOF_KEEPY);
		}
		TNT1 A 3
		TNT1 A 6 A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192)
		TNT1 A 12 A_SetTics(12 - 6 * (CountInv("SavagerySelected") + (CountInv("SavagerySelected") && CountInv("SavageryII"))))
		TNT1 A 6
		{
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKickPuff");
			A_GiveInventory("GloryTorn", 1, AAPTR_TRACER);
		}
		Goto BerserkGloryKillEnd
	BerserkTearGloryKillAnim:
		GRBH ABC 1
		GRBH DDDDDD 1 A_OverlayOffset(OverlayID(), random(-2, 2), random(0, 2), WOF_INTERPOLATE)
		GRBH DDDDDD 1
		{
			A_OverlayOffset(OverlayID(), random(-2, 2), random(0, 2), WOF_INTERPOLATE);
			A_SetTics(1 - CountInv("SavagerySelected"));
		}
		GRBH DDDDDD 1
		{
			A_OverlayOffset(OverlayID(), random(-2, 2), random(0, 2), WOF_INTERPOLATE);
			A_SetTics(1 - (CountInv("SavagerySelected") && CountInv("SavageryII")));
		}
		TNT1 A 0
		{
			A_OverlayOffset(OverlayID(), 0, 0, WOF_INTERPOLATE);
		}
		GRBH EGIKMO 1
		Stop
	BerserkGloryKillEnd:
		TNT1 A 10 
		{
			A_OverlayFlags(1, PSPF_FLIP|PSPF_MIRROR, 0);
			SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
			A_SetTics(10 * (1 - (0.5 * CountInv("SavagerySelected") + 0.5 * (CountInv("SavagerySelected") && (CountInv("SavageryII"))))));
			A_ChangeFlag("NOPAIN", 0);
			A_ChangeFlag("NODAMAGE", 0);
			A_ChangeFlag("NOGRAVITY", 0);
			A_TakeInventory("RipAndTear");
			A_TakeInventory("DeathFromAbove");
			If (CountInv("ArmoredOffensiveSelected"))
			{
				A_SpawnNoiseMaker("Rune/ArmoredOffensive", 0);
			}
			If (CountInv("BloodFueledSelected"))
			{
				A_SpawnNoiseMaker("Rune/BloodFueled", 0);
				If (CountInv("BloodFueledII"))
				{
					A_GiveInventory("ExtendedBloodFueledSpeed");
				}
				Else
				{
					A_GiveInventory("BloodFueledSpeed");
				}
			}
		}
		Goto ReRaise
	BerserkDeathFromAbove:
		TNT1 A 1
		{
			A_TakeInventory("PowerStaggered", 0, 0, AAPTR_TRACER);
			A_TransferPointer(AAPTR_DEFAULT, AAPTR_TRACER, AAPTR_DEFAULT, AAPTR_TARGET);
			A_SetPitch(60, SPF_INTERPOLATE);
			A_Stop;
		}
		TNT1 A 0
		{
			If (CountInv("SavagerySelected"))
			{
				A_SpawnNoiseMaker("Rune/Savagery", 0);
				If (!CountInv("SavageryII") && SavageryQueue)
				{
					A_GiveInventory("SavageryChallengeCounter");
					A_GiveInventory("MasteryTicker");
				}
			}
			If (CountInv("SeekAndDestroySelected") && !CountInv("SeekAndDestroyII"))
			{
				A_GiveInventory("SeekAndDestroyChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("BloodFueledSelected") && !CountInv("BloodFueledII") && CountInv("PowerBloodFueledSpeed"))
			{
				A_GiveInventory("BloodFueledChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("SavingThrowSelected") && !CountInv("SavingThrowII") && CountInv("PowerSavingThrow"))
			{
				A_GiveInventory("SavingThrowChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("DazedAndConfusedSelected") && !CountInv("DazedAndConfusedII"))
			{
				A_GiveInventory("DazedAndConfusedChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("InFlightMobilitySelected") && !CountInv("InFlightMobilityII"))
			{
				A_GiveInventory("InFlightMobilityChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			EOA_SetGKRecoilOffset(0, 0, randompick(-10, 10), True);
			A_Overlay(-10, "DeathFromAbove2");
			A_OverlayFlags(-10, PSPF_FLIP|PSPF_MIRROR, True);
			A_WeaponOffset(-10, 0, WOF_KEEPY);
			A_OverlayOffset(-10, -30, 0, WOF_KEEPY);
		}
		KICK ONML 1 A_SetPitch(60, SPF_INTERPOLATE)
		TNT1 A 0 
		{
			A_CustomPunch(0, 1, CPF_NOTURN, "GloryKickPuff");
			A_CustomPunch(0, 1, CPF_NOTURN, "BerserkPuff", 192);
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		KICK KJIHGFEDCCC 1 //A_SetPitch(60, SPF_INTERPOLATE)
		//KICK AAAAAAAAAAAAAAAA 1
		{
			A_SetPitch(60, SPF_INTERPOLATE);
			If (CountInv("SavagerySelected"))
			{
				If (CountInv("SavageryII"))
				{
					If (CountInv("SpeedCounter") >= 3)
					{
						A_TakeInventory("SpeedCounter");
					}
					Else
					{
						A_SetTics(0);
						A_GiveInventory("SpeedCounter");
					}
				}
				Else If (CountInv("SpeedCounter"))
				{
					A_TakeInventory("SpeedCounter");
				}
				Else
				{
					A_SetTics(0);
					A_GiveInventory("SpeedCounter");
				}
			}
		}
		KICK B 1 A_SetPitch(54, SPF_INTERPOLATE)
		KICK A 1 A_SetPitch(48, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch(42, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch(36, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch(30, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch(24, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch(18, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch(12, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch(6, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch(0, SPF_INTERPOLATE)
		Goto BerserkGloryKillEnd
	UseEquipment:
		"####" "#" 0
		Goto Super::UseEquipment
	}
}

ACTOR BerserkPuff : EOA_MeleePuff
{
	+ALWAYSPUFF
	+PUFFONACTORS
	+FOILINVUL
	States
	{
	XDeath:
		TNT1 A 0 A_PlaySound("Punch/Berserk")
		Stop
	Melee:
	Crash:
		TNT1 A 0 A_PlaySound("Punch/Berserk")
		Goto Super::Melee
	}
}

ACTOR SpecialEOA_MeleePuff : BulletPuff
{
	+HITTRACER
	+FOILINVUL
	//+ALWAYSPUFF
	+PUFFONACTORS
	States
	{
	XDeath:
		TNT1 A 0
		{
			If (A_JumpIfHealthLower(500 * (1 + 3 * (CountInv("PowerQDMG", AAPTR_TARGET))), "Null", AAPTR_TRACER))
			{
				A_GiveInventory("GloryKillCounter", 1, AAPTR_TRACER);
			}
		}
		TNT1 A 0 A_PlaySound("Punch/Berserk")
		Stop
	Melee:
		TNT1 A 0
		{
			If (A_JumpIfHealthLower(500 * (1 + 3 * (CountInv("PowerQDMG", AAPTR_TARGET))), "Null", AAPTR_TRACER))
			{
				A_GiveInventory("GloryKillCounter", 1, AAPTR_TRACER);
			}
		}
		TNT1 A 0 A_PlaySound("Punch/Berserk")
	Crash:
		TNT1 A 0 A_PlaySound("Punch/Base")
		Goto Super::Melee
	}
}

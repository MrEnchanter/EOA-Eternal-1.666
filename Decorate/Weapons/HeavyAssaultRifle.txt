ACTOR HeavyAssaultRifleSelected : EOA_Token{}

//Micro Missiles - Adds a rack of micro missiles with slight homing capabilities, that stick onto their targets and detonate shortly afterward.
ACTOR MicroMissiles : EOA_Token{}
ACTOR MicroMissilesSelected : EOA_Token{}
ACTOR AmmoEfficient : EOA_Token{} //Missiles cost 2 bullets rather than 3.
ACTOR AdvancedLoader : EOA_Token{} //Faster Reload.
ACTOR QuickLauncher : EOA_Token{} //Faster Deployment. 

ACTOR MC_BottomlessMissiles : EOA_Token{} //Hit 4 different enemies with Micro Missiles in 5 seconds.

ACTOR BottomlessMissiles : EOA_Token{} //Mastery Upgrade - Micro Missiles never need to reload.

ACTOR MicroMissileCounter : EOA_Token{Inventory.MaxAmount 10}
ACTOR scopedin : EOA_Token{Inventory.MaxAmount 1}

ACTOR MicroMissileReloadCounter : EOA_Token{Inventory.MaxAmount 5}

ACTOR MicroMissilesLoaded : EOA_Token{}

ACTOR MicroMissilesReady : EOA_Token{}

ACTOR MicroMissileStickCounter1 : EOA_TempToken
{
	Powerup.Type "MicroMissileStickCounter1"
	Powerup.Duration -5
}

ACTOR MicroMissileStickCounter2 : EOA_TempToken
{
	Powerup.Type "MicroMissileStickCounter2"
	Powerup.Duration -5
}

ACTOR MicroMissileStickCounter3 : EOA_TempToken
{
	Powerup.Type "MicroMissileStickCounter3"
	Powerup.Duration -5
}

ACTOR MicroMissileStickCounter4 : EOA_TempToken
{
	Powerup.Type "MicroMissileStickCounter4"
	Powerup.Duration -5
}

ACTOR PowerMicroMissileStickCounter1 : PowerEOA_TempToken{}
ACTOR PowerMicroMissileStickCounter2 : PowerEOA_TempToken{}
ACTOR PowerMicroMissileStickCounter3 : PowerEOA_TempToken{}
ACTOR PowerMicroMissileStickCounter4 : PowerEOA_TempToken{}

//Tactical Scope - Allows you to zoom in for more accurate shots with the Heavy Assault Rifle.
ACTOR TacticalScope : EOA_Token{}
ACTOR TacticalScopeSelected : EOA_Token{}
ACTOR TacticalScopeCooldowncounter : EOA_Token{}
ACTOR HARUraniumCoating : EOA_Token{} //Shots penetrate enemies (while zoomed).
ACTOR FastLoader : EOA_Token{}
ACTOR Mobility : EOA_Token{} //Move at full speed while using the Tactical Scope.
ACTOR SkullCracker : EOA_Token{} 
ACTOR HARLightWeight : EOA_Token{}

ACTOR MC_DevastatorRounds : EOA_Token{} //Kill 50 enemies while using the Tactical Scope.

ACTOR DevastatorRounds : EOA_Token{} //Bullets are upgraded to high-damage Devastator Rounds (while zoomed).

ACTOR DevastatorRoundsMasteryCounter : EOA_Token{Inventory.MaxAmount 50}

ACTOR TacticalScopeReady : EOA_Token{}
ACTOR TacticalScopeFireCounter : EOA_TOken{}

ACTOR HARAccuracyCounter : EOA_Token{Inventory.MaxAmount 20}

ACTOR HARMods : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("MicroMissiles");
			A_GiveInventory("AmmoEfficient");
			A_GiveInventory("AdvancedLoader");
			A_GiveInventory("QuickLauncher");
			A_GiveInventory("TacticalScope");
			A_GiveInventory("FastLoader");
			A_GiveInventory("Mobility");
		}
		Stop
	}
}

ACTOR EOA_HeavyAssaultRifle : EOA_Weapon 20004
{
	Inventory.Icon "ICONHAR"
	Weapon.AmmoType "EOA_BulletAmmo"
	Weapon.AmmoUse 1
	Weapon.AmmoGive 60
	Inventory.PickupMessage "Heavy Assault Rifle"
	Tag "Heavy Assault Rifle"
	States
	{
	Spawn:
		HARW A -1
		Stop
	Select:
		TNT1 A 0 
		{
			SetPlayerProperty(0, 1, PROP_INSTANTWEAPONSWITCH);
			A_GiveInventory("HeavyAssaultRifleSelected");
			ACS_NamedExecuteAlways("HARReticle", 0);
			A_SetCrosshair(99);
		}
		HMMI A 0 A_JumpIfInventory("MicroMissilesSelected", 1, 3)
		HMSI A 0 A_JumpIfInventory("TacticalScopeSelected", 1, 2)
		HMNI A 0
		"####" "#" 1 A_Raise(60)
		Wait
	Deselect:
		TNT1 A 0
		{
			A_SetSpeed(1.0);
			A_takeinventory("explosiveshotcooldowncounter",100000);
			If (CountInv("MicroMissilesReady"))
			{
				Return State ("MissileClose");
			}
			Else If (CountInv("TacticalScopeReady"))
			{
				Return State ("ScopeOut");
			}
			Return State ("");
		}
		TNT1 A 0 
		{
			A_TakeInventory("HeavyAssaultRifleSelected");
			SetPlayerProperty(0, 0, PROP_INSTANTWEAPONSWITCH);
		}
		TNT1 A 4 A_SetTics(4 * !CountInv("Adept") * !CountInv("PowerBerserk"))
		HMMI A 0 A_JumpIfInventory("MicroMissilesSelected", 1, 3)
		HMSI A 0 A_JumpIfInventory("TacticalScopeSelected", 1, 2)
		HMNI A 0
		"####" "#" 1 A_Lower(36)
		Wait
	Ready:
		TNT1 A 0
		{
			If (!(CountInv("MicroMissilesSwitch") || CountInv("TacticalScopeSwitch")))
			{
				A_SpawnNoiseMaker("Weapon/Switch");
			}
		}
		HMMI A 0 A_JumpIfInventory("MicroMissilesSelected", 1, 3)
		HMSI A 0 A_JumpIfInventory("TacticalScopeSelected", 1, 2)
		HMNI A 0
		"####" A 1 //ABCDEFGH 1 
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_NOBOB, EOA_ALLOWMANTLE|EOA_DISABLEHASTE);
			If (CountInv("MicroMissilesSwitch"))
			{
				A_TakeInventory("MicroMissilesSwitch");
				Return State ("MicroMissilesMod");
			}
			Else If (CountInv("TacticalScopeSwitch"))
			{
				A_TakeInventory("TacticalScopeSwitch");
				Return State ("TacticalScopeMod");
			}
			Return State ("");
		}
		//"####" "#" 0 A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH|WRF_ALLOWRELOAD|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM))
		Goto ReadyLoop
	ReRaise:
		TNT1 A 0 A_WeaponOffset(-144, 56)
		HMMR A 0 A_JumpIfInventory("MicroMissilesSelected", 1, 3)
		HMSR A 0 A_JumpIfInventory("TacticalScopeSelected", 1, 2)
		HMNR A 0
		"####" CDEFGH 1 //ABCDEFGH 1
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_NOBOB, EOA_ALLOWMANTLE|EOA_DISABLEHASTE);
			A_WeaponOffset(24, -4, WOF_ADD);
		}
		//"####" "#" 0 A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH|WRF_ALLOWRELOAD|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM))
	ReadyLoop:
		TNT1 A 0
		{
			A_SetSpeed(1.0);
			If (CountInv("MicroMissilesLoaded"))
			{
				A_TakeInventory("MicroMissilesLoaded");
				A_SpawnNoiseMaker("Weapon/Loaded", 6, 1.0, 0, ATTN_NORM, 0, 18);
			}
		}
		HMMI A 0 A_JumpIfInventory("MicroMissilesSelected", 1, 3)
		HMSI A 0 A_JumpIfInventory("TacticalScopeSelected", 1, 2)
		HMNI A 0
		"####" "#" 1 
		{
			EOA_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
			If (CountInv("MicroMissilesSwitch"))
			{
				A_TakeInventory("MicroMissilesSwitch");
				Return State ("SwitchToMicroMissiles");
			}
			Else If (CountInv("TacticalScopeSwitch"))
			{
				A_TakeInventory("TacticalScopeSwitch");
				Return State ("SwitchToTacticalScope");
			}
			Return State ("");
		}
		Loop
	Fire:
		//[DoomKrakken]: Frame E of the standard firing sequence is identical to the idle frame.  I chose to duplicate it for efficiency.
		HMMF A 0 A_JumpIfInventory("MicroMissilesSelected", 1, 3)
		HMSF A 0 A_JumpIfInventory("TacticalScopeSelected", 1, 2)
		HMNF A 0
		"####" "#" 0 
		{
			If (CountInv("SoundCounter") >= 4)
			{
				A_TakeInventory("SoundCounter");
			}
			A_GiveInventory("SoundCounter");
			A_SpawnPersistentNoiseMaker(1, "HAR/Fire", CountInv("SoundCounter"));
			A_SpawnPersistentNoiseMaker(2, "HAR/Add", 1 + CountInv("SoundCounter"), 0.5);
			A_SpawnPersistentNoiseMaker(3, "HAR/Bass", 0);
			If (CountInv("PowerQDMG"))
			{
				A_SpawnNoiseMaker("QuadDamage/Shot", 4, 1.0, 0, ATTN_NORM, 0, 18); //A_GiveInventory("QuadDamageShot");
			}
			EOA_FireBullets(0.025 * CountInv("HARAccuracyCounter"), 0.025 * CountInv("HARAccuracyCounter"), 1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ|FBF_USEAMMO, 32767, "HARTracer", -6 + GetViewZ, 10 + GetRelVelY / 1.5);
			EOA_SetWeaponRecoilOffset(frandompick(-1, -0.5, 0.5, 1), -0.75, 0, 0.25);
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 32, 0, 4, 1, DYN_ADDITIVE);
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 32, 0, 4, 1, DYN_ATTENUATE);
			A_AlertMonsters;
			A_GiveInventory("HARAccuracyCounter", 10);
		}
		"####" AB 1
		{
			If (CountInv("MicroMissilesLoaded"))
			{
				A_TakeInventory("MicroMissilesLoaded");
				A_SpawnNoiseMaker("Weapon/Loaded", 6);
			}
			EOA_WeaponReady(WRF_NOPRIMARY|WRF_NOSECONDARY * !(CountInv("TacticalScopeSelected") || (CountInv("MicroMissilesSelected") && CountInv("MicroMissileCounter") == 10))|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
		}
		"####" "#" 0 A_FireCustomMissile("EOA_EmptyBrass", -60, 0, 3, 2, 0, 5 + Pitch / 2)
		"####" CD 1
		{
			EOA_WeaponReady(WRF_NOPRIMARY|WRF_NOSECONDARY * !(CountInv("TacticalScopeSelected") || (CountInv("MicroMissilesSelected") && CountInv("MicroMissileCounter") == 10))|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
		}
		"####" E 1
		TNT1 A 0 A_ReFire
		Goto ReadyLoop
	AltFire:
		TNT1 A 0
		{
			If (CountInv("MicroMissilesLoaded"))
			{
				A_TakeInventory("MicroMissilesLoaded");
				A_SpawnNoiseMaker("Weapon/Loaded", 6);
			}
		}
		TNT1 A 0 A_JumpIf(CountInv("MicroMissilesSelected") && CountInv("MicroMissileCounter") > 9, "MissilePrime")
		TNT1 A 0 A_JumpIf(CountInv("TacticalScopeSelected"), "ScopePrime")
		Goto ReadyLoop
	MissilePrime:
		TNT1 A 0
		{
			A_GiveInventory("MicroMissilesReady");
			If (CountInv("QuickLauncher"))
			{
				A_SpawnNoiseMaker("HAR/DeployFast", 3, 15);
			}
			Else
			{
				A_SpawnNoiseMaker("HAR/DeployFast", 3, 15);
			}
		}
		//HMML A 1 EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH, EOA_DISABLEHASTE)
		HMML ABBBBB 1
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
			If (CountInv("QuickLauncher") && GetFrame == 1)
			{
				A_SetTics(0);
			}
			If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || CountInv("Grabbing_A_Ledge") || !CountInv("MicroMissilesSelected") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return State ("MissileClose");
			}
			Else
			{
				Return State ("");
			}
		}
		//HMML C 1 EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH, EOA_DISABLEHASTE)
		HMML CDDDDD 1
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
			If (CountInv("QuickLauncher") && GetFrame == 3)
			{
				A_SetTics(0);
			}
			If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || CountInv("Grabbing_A_Ledge") || !CountInv("MicroMissilesSelected") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return State ("MissileClose");
			}
			Else
			{
				Return State ("");
			}
		}
		//HMML E 1 EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH, EOA_DISABLEHASTE)
		HMML EFFFFF 1
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
			If (CountInv("QuickLauncher") && GetFrame == 5)
			{
				A_SetTics(0);
			}
			If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || CountInv("Grabbing_A_Ledge") || !CountInv("MicroMissilesSelected") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return State ("MissileClose");
			}
			Return State ("");
		}
		HMML G 0
	MissileReady:
		"####" "#" 1 
		{
			EOA_WeaponReady(WRF_NOFIRE);
			If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || !CountInv("MicroMissileCounter") || CountInv("Grabbing_A_Ledge") || !CountInv("MicroMissilesSelected") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return State ("MissileClose");
			}
			Else If (CountInv("BottomlessMissiles") && (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK))
			{
				Return State ("BottomlessMissileFire");
			}
			Else If (CountInv("MicroMissileCounter") && (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK))
			{
				Return State ("MissileFire");
			}
			Return State ("");
		}
		Loop
	MissileFire:
		H01M A 0 A_JumpIfInventory("MicroMissileCounter", 10, "MissileContinue2")
		H02M A 0 A_JumpIfInventory("MicroMissileCounter", 9, "MissileContinue")
		H03M A 0 A_JumpIfInventory("MicroMissileCounter", 8, "MissileContinue2")
		H04M A 0 A_JumpIfInventory("MicroMissileCounter", 7, "MissileContinue")
		H05M A 0 A_JumpIfInventory("MicroMissileCounter", 6, "MissileContinue2")
		H06M A 0 A_JumpIfInventory("MicroMissileCounter", 5, "MissileContinue")
		H07M A 0 A_JumpIfInventory("MicroMissileCounter", 4, "MissileContinue2")
		H08M A 0 A_JumpIfInventory("MicroMissileCounter", 3, "MissileContinue")
		H09M A 0 A_JumpIfInventory("MicroMissileCounter", 2, "MissileContinue2")
		H10M A 0 A_JumpIfInventory("MicroMissileCounter", 1, "MissileContinue")
		Goto MissileContinue
	BottomlessMissileFire:
		H01M A 0 A_JumpIfInventory("MicroMissileCounter", 10, "MissileContinue2")
		H02M A 0 A_JumpIfInventory("MicroMissileCounter", 9, "MissileContinue")
		H03M A 0 A_JumpIfInventory("MicroMissileCounter", 8, "MissileContinue2")
		H04M A 0 A_JumpIfInventory("MicroMissileCounter", 7, "MissileContinue")
		H05M A 0 A_JumpIfInventory("MicroMissileCounter", 6, "MissileContinue2")
		H06M A 0 A_JumpIfInventory("MicroMissileCounter", 5, "MissileContinue")
		H07M A 0 A_JumpIfInventory("MicroMissileCounter", 4, "MissileContinue2")
		H08M A 0 A_JumpIfInventory("MicroMissileCounter", 3, "MissileContinue")
		H09M A 0 A_JumpIfInventory("MicroMissileCounter", 2, "MissileContinue2")
		H10M A 0 A_JumpIfInventory("MicroMissileCounter", 1, "MissileContinue")
	MissileContinue:
		"####" A 0
		{
			If (CountInv("EOA_BulletAmmo") >= 3 - CountInv("AmmoEfficient") || CheckInfiniteAmmo)
			{
				If (CountInv("SoundCounter") >= 4)
				{
					A_TakeInventory("SoundCounter");
				}
				A_GiveInventory("SoundCounter");
				EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
				A_SpawnPersistentNoiseMaker(1, "HAR/Missile", CountInv("SoundCounter"));
				A_SpawnPersistentNoiseMaker(2, "HAR/Launch", 1 + CountInv("SoundCounter"));
				A_SpawnPersistentNoiseMaker(3, "HAR/Bass", 0);
				EOA_FireBullets(0, 0, 0, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ|FBF_PUFFTRACER, 32767, "HARMicroMissile", -4 + GetViewZ, 5 + GetRelVelY / 5);
				EOA_SetWeaponRecoilOffset(frandompick(-1, -0.5, 0.5, 1), -1, 0, 0.25);
				EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 32, 0, 4, 1, DYN_ADDITIVE);
				EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 32, 0, 4, 1, DYN_ATTENUATE);
				A_TakeInventory("EOA_BulletAmmo", 3 - CountInv("AmmoEfficient"), TIF_NOTAKEINFINITE);
				A_TakeInventory("MicroMissileCounter", 1);
				A_AlertMonsters;
				A_FireCustomMissile("EOA_EmptyBrass", -60, 0, 3, 2, 0, 5 + Pitch / 2);
				If (CountInv("PowerQDMG"))
				{
					A_SpawnNoiseMaker("QuadDamage/Shot", 4, 1.0, 0, ATTN_NORM, 0, 18); //A_GiveInventory("QuadDamageShot");
				}
				If (CountInv("BottomlessMissiles") && !CountInv("MicroMissileCounter"))
				{
					A_GiveInventory("MicroMissileCounter", 10);
				}
			}
			Else
			{
				A_SelectWeapon("EOA_Weapon", SWF_SELECTPRIORITY);
				Return State ("Deselect");
			}
			Return State ("");
		}
		"####" ABCE 1
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
			If (CountInv("Grabbing_A_Ledge") || !(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || !CountInv("MicroMissilesSelected") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return State ("MissileClose");
			}
			Return State ("");
		}
		Goto MissileReady
	MissileContinue2:
		"####" A 0
		{
			If (CountInv("EOA_BulletAmmo") >= 3 - CountInv("AmmoEfficient") || CheckInfiniteAmmo)
			{
				If (CountInv("SoundCounter") >= 4)
				{
					A_TakeInventory("SoundCounter");
				}
				A_GiveInventory("SoundCounter");
				EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
				A_SpawnPersistentNoiseMaker(1, "HAR/Missile", CountInv("SoundCounter"));
				A_SpawnPersistentNoiseMaker(2, "HAR/Launch", 1 + CountInv("SoundCounter"));
				A_SpawnPersistentNoiseMaker(3, "HAR/Bass", 0);
				EOA_FireBullets(0, 0, 0, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ|FBF_PUFFTRACER, 32767, "HARMicroMissile", -4 + GetViewZ, 15 + GetRelVelY / 1);
				EOA_SetWeaponRecoilOffset(frandompick(-1, -0.5, 0.5, 1), -1, 0, 0.25);
				EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 32, 0, 4, 1, DYN_ADDITIVE);
				EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 32, 0, 4, 1, DYN_ATTENUATE);
				A_TakeInventory("EOA_BulletAmmo", 3 - CountInv("AmmoEfficient"), TIF_NOTAKEINFINITE);
				A_TakeInventory("MicroMissileCounter", 1);
				A_AlertMonsters;
				A_FireCustomMissile("EOA_EmptyBrass", -60, 0, 3, 2, 0, 5 + Pitch / 2);
				If (CountInv("PowerQDMG"))
				{
					A_SpawnNoiseMaker("QuadDamage/Shot", 4, 1.0, 0, ATTN_NORM, 0, 18); //A_GiveInventory("QuadDamageShot");
				}
				If (CountInv("BottomlessMissiles") && !CountInv("MicroMissileCounter"))
				{
					A_GiveInventory("MicroMissileCounter", 10);
				}
			}
			Else
			{
				A_SelectWeapon("EOA_Weapon", SWF_SELECTPRIORITY);
				Return State ("Deselect");
			}
			Return State ("");
		}
		"####" ABCE 1
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
			If (CountInv("Grabbing_A_Ledge") || !(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || !CountInv("MicroMissilesSelected") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return State ("MissileClose");
			}
			Return State ("");
		}
		Goto MissileReady
	MissileClose:
		TNT1 A 0 
		{
			A_TakeInventory("MicroMissilesReady");
			If (CountInv("MicroMissilesSelected"))
			{
				A_SpawnPersistentNoiseMaker(1, "HAR/Close");
			}
			If (CountInv("BottomlessMissiles"))
			{
				A_GiveInventory("MicroMissileCounter", 10);
			}
		}
		HMML ECA 1 
		{
			EOA_WeaponReady(WRF_NOFIRE, EOA_ALLOWMANTLE);
			If (!CountInv("MicroMissilesSelected"))
			{
				Return State ("ReadyLoop");
			}
			Else If (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge"))
			{
				A_GiveInventory("PowerEquipmentTrigger");
			}
			Return State ("");
		}
		TNT1 A 0 A_JumpIfInventory("PowerEquipmentTrigger", 1, "UseEquipment")
		Goto ReadyLoop
	ScopePrime:
		TNT1 A 0 
		{
			if(!CountInv("Mobility"))
			{
				A_SetSpeed(0.75);
			}
			A_Giveinventory("scopedin", 1);
			A_ZoomFactor(2, ZOOM_NOSCALETURNING);
			A_SpawnNoiseMaker("HAR/ZoomIn", 0, 0.5);
			//A_SetSpeed(0.5 * (1 + CountInv("HARLightWeight")));
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)&& !CountInv("explosiveshotCooldowncounter"))
			{
				Return State ("ScopeFire");
			}
			Return State ("");
		}
		HMSZ ABCDE 1 		
		{
		EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE, EOA_ALLOWMANTLE);
		If ((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)&& !CountInv("explosiveshotCooldowncounter"))
			{
				Return State ("ScopeFire");
			}
			Return State ("");
		}
		SCOP ABC 1 Bright 
		{
		EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE, EOA_ALLOWMANTLE);
		If ((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)&& !CountInv("explosiveshotCooldowncounter"))
			{
				Return State ("ScopeFire");
			}
			Return State ("");
		}
		TNT1 A 0 A_GiveInventory("TacticalScopeReady")
	ScopeReady:
		SCOP D 1 Bright
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || CountInv("Grabbing_A_Ledge") || !CountInv("TacticalScopeSelected") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return State ("ScopeOut");
			}
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)&& !CountInv("explosiveshotCooldowncounter"))
			{
				Return State ("ScopeFire");
			}
			Return State ("");
		}
		Loop
	ScopeFire:
		SCOP D 0
		{
			if(!CountInv("FastLoader"))
			{
				A_giveinventory("explosiveshotCooldowncounter", 150);
			}
			else if (CountInv("FastLoader"))
			{
				A_giveinventory("explosiveshotCooldowncounter", 90);
			}
			A_GiveInventory("TacticalScopeFireCounter");
			If (CountInv("PowerHaste"))
			{
				A_SetTics(1);
			}
			If (CountInv("EOA_BulletAmmo") || CheckInfiniteAmmo)
			{
				If (CountInv("SoundCounter") >= 4)
				{
					A_TakeInventory("SoundCounter");
				}
				A_GiveInventory("SoundCounter");
				If (CountInv("HARUraniumCoating"))
				{		
					A_SpawnPersistentNoiseMaker(1, "HAR/Fire/Uranium", CountInv("SoundCounter"));
				}
				Else
				{
					A_SpawnPersistentNoiseMaker(1, "HAR/Fire/Uranium", CountInv("SoundCounter"));
				}
				A_SpawnPersistentNoiseMaker(2, "HAR/Add", 1 + CountInv("SoundCounter"), 0.5);
				A_SpawnPersistentNoiseMaker(3, "HAR/Bass", 0);
				If (CountInv("DevastatorRounds"))
				{
					EOA_FireBullets(0.025 * CountInv("HARAccuracyCounter"), 0.025 * CountInv("HARAccuracyCounter"), 3, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ, 32767, "HARDevastatorTracer", -6 + GetViewZ, GetRelVelY / 1.5);
				}
				Else
				{
					EOA_FireBullets(0.025 * CountInv("HARAccuracyCounter"), 0.025 * CountInv("HARAccuracyCounter"), 3, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ, 32767, "HARTracer", -6 + GetViewZ, GetRelVelY / 1.5);
				}
				EOA_SetWeaponRecoilOffset(frandompick(-1, 0.5, 0.5, 1), -0.75, 0, 0.25);
				EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 32, 0, 4, 1, DYN_ADDITIVE);
				EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 32, 0, 4, 1, DYN_ATTENUATE);
				A_TakeInventory("EOA_BulletAmmo", 6, TIF_NOTAKEINFINITE);
				A_AlertMonsters;
				A_FireCustomMissile("EOA_EmptyBrass", -60, 0, 3, 2, 0, 5 + Pitch / 2);
				A_GiveInventory("HARAccuracyCounter", 10);
				
				If (CountInv("PowerQDMG"))
				{
					A_SpawnNoiseMaker("QuadDamage/Shot", 4, 1.0, 0, ATTN_NORM, 0, 18); //A_GiveInventory("QuadDamageShot");
				}
				Return State ("");
			}
			Else
			{
				A_SelectWeapon("EOA_Weapon", SWF_SELECTPRIORITY);
				Return State ("Deselect");
			}
		}
		SCOP D 1 Bright
		{
			If (GetCVar("EOA_APRRecoil"))
			{
				A_ZoomFactor(1.99, ZOOM_NOSCALETURNING);
			}
			If (CountInv("PowerHaste"))
			{
				If (CountInv("SpeedCounter"))
				{
					A_SetTics(0);
					A_TakeInventory("SpeedCounter");
				}
				Else
				{
					A_GiveInventory("SpeedCounter");
				}
			}
			If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || CountInv("Grabbing_A_Ledge") || !CountInv("TacticalScopeSelected") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return State ("ScopeOut");
			}
			Return State ("");
		}
		SPCL ABCDEFGHIJKLMNOPQRSTU 2 Bright
		{
			A_ZoomFactor(2, ZOOM_NOSCALETURNING);
			If (CountInv("PowerHaste"))
			{
				If (CountInv("SpeedCounter"))
				{
					A_SetTics(0);
					A_TakeInventory("SpeedCounter");
				}
				Else
				{
					A_GiveInventory("SpeedCounter");
				}
			}
			If(!CountInv("FastLoader"))
			{
				A_SetTics(4);
			}
			If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || CountInv("Grabbing_A_Ledge") || !CountInv("TacticalScopeSelected") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return State ("ScopeOut");
			}
			Else 
			{
				Return State ("");
			}
		}
		Goto Scopeready
	ScopeOut:
		TNT1 A 0 
		{
			A_SetSpeed(1.0);
			A_Takeinventory("scopedin", 1);
			A_ZoomFactor(1, ZOOM_INSTANT * !CountInv("TacticalScopeSelected"));
			A_TakeInventory("TacticalScopeReady");
			If (CountInv("TacticalScopeSelected"))
			{
				A_SpawnNoiseMaker("HAR/ZoomOut", 0, 0.5);
			}
			//A_SetSpeed(1);
		}
		SCOP DCBA 1 Bright
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE, EOA_ALLOWMANTLE);
			If (!CountInv("TacticalScopeSelected"))
			{
				Return State ("ReadyLoop");
			}
			Else 
			{
				If (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge"))
				{
					A_GiveInventory("PowerEquipmentTrigger");
				}
				Return State ("");
			}
		}
		HMSZ DCBA 1 
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE, EOA_ALLOWMANTLE);
			If (!CountInv("TacticalScopeSelected"))
			{
				Return State ("ReadyLoop");
			}
			Else 
			{
				If (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge"))
				{
					A_GiveInventory("PowerEquipmentTrigger");
				}
				Return State ("");
			}
		}
		TNT1 A 0 A_JumpIfInventory("PowerEquipmentTrigger", 1, "UseEquipment")
		Goto ReadyLoop
	Reload:
		TNT1 A 0 A_JumpIf(CountInv("MicroMissiles") && !CountInv("MicroMissilesSelected"), "SwitchToMicroMissiles")
		TNT1 A 0 A_JumpIf(CountInv("TacticalScope") && !CountInv("TacticalScopeSelected"), "SwitchToTacticalScope")
		Goto ReadyLoop
	SwitchToMicroMissiles:
		HMSR A 0 A_JumpIfInventory("TacticalScopeSelected", 1, 2)
		HMNR A 0
		"####" HGFEDCBA 1
	MicroMissilesMod:
		TNT1 A 0 
		{
			A_GiveInventory("MicroMissilesSelected");
			A_TakeInventory("TacticalScopeSelected");
		}
		HMMM ABCDEFGHIJKLM 1 EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_DISABLEHASTE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		TNT1 A 0 A_SpawnNoiseMaker("MicroMissilesSwitch", 5, 3)
		HMMM MMMMMMMMMMMMMMMM 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("TacticalScope"), EOA_ALLOWMANTLE|EOA_DISABLEHASTE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		HMMM NOPQRS 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("TacticalScope"), EOA_ALLOWMANTLE|EOA_DISABLEHASTE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		HMMM SSSSSSSSSS 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("TacticalScope"), EOA_ALLOWMANTLE|EOA_DISABLEHASTE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		HMMM TU 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("TacticalScope"), EOA_ALLOWMANTLE|EOA_DISABLEHASTE)
		Goto ReadyLoop
	SwitchToTacticalScope:
		HMMR A 0 A_JumpIfInventory("MicroMissilesSelected", 1, 2)
		HMNR A 0
		"####" HGFEDCBA 1
	TacticalScopeMod:
		TNT1 A 0 
		{
			A_GiveInventory("TacticalScopeSelected");
			A_TakeInventory("MicroMissilesSelected");
		}
		TNT1 A 0 A_SpawnNoiseMaker("TacticalScopeSwitch", 5, 3)
		HMSM ABCDEFGHIJKLMN 1 EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_DISABLEHASTE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		HMSM NNNNNNNNNNNNNNNN 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("MicroMissiles"), EOA_ALLOWMANTLE|EOA_DISABLEHASTE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		HMSM OOPP 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("MicroMissiles"), EOA_ALLOWMANTLE|EOA_DISABLEHASTE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		HMSM PPPPPPPP 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("MicroMissiles"), EOA_ALLOWMANTLE|EOA_DISABLEHASTE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		HMSM QRSTU 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("MicroMissiles"), EOA_ALLOWMANTLE|EOA_DISABLEHASTE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		Goto ReadyLoop
	Zoom:
		HMMT A 0 A_JumpIfInventory("MicroMissilesSelected", 1, 3)
		HMST A 0 A_JumpIfInventory("TacticalScopeSelected", 1, 2)
		HMNT A 0
		"####" "#" 0
		Goto Super::Melee
	UseEquipment:
		"####" "#" 0
		Goto Super::UseEquipment
	}
} 

ACTOR HARScopeTracer : EOA_FastProjectile
{
	Radius 0.2032
	Height 0.4064
	//Speed 200
	Damage (50) //(randompick(10, 12))
	Decal "BulletChip"
	Scale 0.375
	RenderStyle "Add"
	EOA_Projectile.PuffType "HARPuff"
	+DONTBLAST
	+NOEXTREMEDEATH
	+DONTREFLECT
	States
	{
	Spawn:
		TRAC B 0 NoDelay A_JumpIfInTargetInventory("PowerQDMG", 1, 2)
		TRAC A 0
		TRAC "#" -1 Bright //A_SpawnItemEx("HARSmoke", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPITCH)
		Wait
	Death:
	Crash:
		TNT1 A 1
		{
			A_PlaySound("Projectile/HitWall");
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 8, 0, 4, 1, DYN_ADDITIVE, False);
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 8, 0, 4, 1, DYN_ATTENUATE, False);
		}
		Stop
	XDeath:
		TNT1 A 1
		{
			A_PlaySound("Projectile/HitFlesh");
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 8, 0, 4, 1, DYN_ADDITIVE, False);
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 8, 0, 4, 1, DYN_ATTENUATE, False);
		}
		Stop
	}
}

ACTOR HARScopeDevastatorTracer : HARScopeTracer
{
	EOA_Projectile.PuffType "HARDevastatorPuff"
	Damage (70)//(1.5 * randompick(10, 12))
	States
	{
	Death:
	Crash:
		TNT1 A 1
		{
			A_PlaySound("Projectile/HitWall");
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 16, 0, 4, 1, DYN_ADDITIVE, False);
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 16, 0, 4, 1, DYN_ATTENUATE, False);
		}
		Stop
	XDeath:
		TNT1 A 1
		{
			A_PlaySound("Projectile/HitFlesh");
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 16, 0, 4, 1, DYN_ADDITIVE, False);
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 16, 0, 4, 1, DYN_ATTENUATE, False);
		}
		Stop
	}
}

ACTOR HARTracer : EOA_FastProjectile
{
	Radius 0.2032
	Height 0.4064
	speed 85
	Damage (26) //(randompick(10, 12))
	Decal "BulletChip"
	Scale 1
	RenderStyle "Add"
	EOA_Projectile.PuffType "HARPuff"
	+DONTBLAST
	+NOEXTREMEDEATH
	+DONTREFLECT
	States
	{
	Spawn:
		TRAC B 0 NoDelay A_JumpIfInTargetInventory("PowerQDMG", 1, 2)
		TRAC A 0
		TRAC "#" -1 bright 
		/*{
			A_SpawnItemEx("BoltTrail", 0, 0, 0, 0, 0, 0, 0, SXF_ORIGINATOR|SXF_SETTRACER);
			A_SpawnItemEx("HARSmoke", 0, 0, 0, 0, 0, 0, 0, SXF_ORIGINATOR|SXF_SETTRACER);
		}*/	
		loop
	Death:
	Crash:
		TNT1 A 1
		{
			A_PlaySound("Projectile/HitWall");
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 8, 0, 4, 1, DYN_ADDITIVE, False);
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 8, 0, 4, 1, DYN_ATTENUATE, False);
		}
		Stop
	XDeath:
		TNT1 A 1
		{
			A_PlaySound("Projectile/HitFlesh");
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 8, 0, 4, 1, DYN_ADDITIVE, False);
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 8, 0, 4, 1, DYN_ATTENUATE, False);
		}
		Stop
	}
}

ACTOR HARTracerTrail
{
	scale 0.3
	//RenderStyle Translucent
	+NOINTERACTION
	+DONTBLAST
	+DONTTHRUST
	+NOTRIGGER
	States
	{
	Spawn:
		TNT1 A 2
		AMME C 1 bright
		{
			A_FadeOut(0.03);
			A_SetScale(ScaleX - 0.01);
		}
		Wait
	}
}

ACTOR HARDevastatorTracer : HARTracer
{
	EOA_Projectile.PuffType "HARDevastatorPuff"
	Damage (26)//(1.5 * randompick(10, 12))
	Speed 250
	States
	{
	Spawn:
		TRAC B 0 NoDelay A_JumpIfInTargetInventory("PowerQDMG", 1, 2)
		TRAC A 0
		"####" "#" 1 bright 
		{
			A_SpawnItemEx("BoltTrail", 0, 0, 0, 0, 0, 0, 0, SXF_ORIGINATOR|SXF_SETTRACER);
		}
		Loop
	Death:
	Crash:
		TNT1 A 1
		{
			A_PlaySound("Projectile/HitWall");
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 16, 0, 4, 1, DYN_ADDITIVE, False);
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 16, 0, 4, 1, DYN_ATTENUATE, False);
		}
		Stop
	XDeath:
		TNT1 A 1
		{
			A_SetScale(0.75);
			A_SpawnItemEx("EOA_RocketExplosion", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERSCALE|SXF_NOCHECKPOSITION);
			A_Stop;
			A_ChangeFlag("EXTREMEDEATH", 1);
			EOA_Explode(40, 70, XF_HURTSOURCE, 1, 48, 0.375);
			A_PlaySound("Projectile/HitFlesh");
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 16, 0, 4, 1, DYN_ADDITIVE, False);
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 16, 0, 4, 1, DYN_ATTENUATE, False);
		}
		Stop
	}
}

ACTOR BoltTrail
{
	Scale 2.6
	//RenderStyle Translucent
	+NOINTERACTION
	+DONTBLAST
	+DONTTHRUST
	+NOTRIGGER
	States
	{
	Spawn:
		BLTL A 1 bright
		{
			A_FadeOut(0.03);
			A_SetScale(ScaleX + 0.01);
		}
		Wait
	}
}

ACTOR HARPuff
{
	Height 0
	Var Int User_Angle;
	Var Int User_Pitch;
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			User_Angle = random(-15, 15);
			User_Pitch = random(0, 10);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAA 0 A_CustomMissile("HARPuffSpark", 0, 0, User_Angle + 180 + frandom(-10, 10), CMF_AIMDIRECTION, Pitch + User_Pitch + frandom(-3, 3))
		Goto Null
	}
}

ACTOR HARDevastatorPuff : HARPuff
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			User_Angle = random(-15, 15);
			User_Pitch = random(0, 10);
			A_SetRoll(frandom(0, 359));
		}
		TNT1 AAAAAAAAAAAAAAAAAAAA 0 A_CustomMissile("HARDevastatorPuffSpark", 0, 0, random(1, 360), CMF_AIMDIRECTION, random(-45, 90))
		//TNT1 AAAAAAAAAA 0 A_CustomMissile("HARPuffSpark", 0, 0, User_Angle + 180 + frandom(-10, 10), CMF_AIMDIRECTION, User_Pitch + frandom(-3, 3))
		TNT1 AAAA 0 A_CustomMissile("HARDevastatorPuffTrailProjectile", 0, 0, Random(1, 360), CMF_AIMDIRECTION, random(-45, 90))
		TNT1 AA 0 A_SpawnItemEx("HARDevastatorPuffExplosion", -1, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_TRANSFERROLL)
		TNT1 A 0 A_SpawnItemEx("HARDevastatorPuffFX", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPOINTERS)
		Goto Super::Spawn
	}
}

ACTOR HARDevastatorPuffExplosion
{
	Scale 0.1
	Renderstyle "Add"
	+BRIGHT
	+FORCEXYBILLBOARD
	+NOINTERACTION
	+ROLLSPRITE
	+ROLLCENTER
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256, random(1, 12))
		DEXP ABCDEFGHIJKL 0 A_Jump(256, "Anim")
	Anim:
		"####" "####" 1
		{
			A_FadeOut(0.1);
			A_SetScale(ScaleX + 0.01);
		}
		Stop
	}
}

ACTOR HARDevastatorPuffFX
{
	Scale 1.25
	RenderStyle "Add"
	+BRIGHT
	+DONTBLAST
	+DONTTHRUST
	+FORCEXYBILLBOARD
	+NOGRAVITY
	+NOINTERACTION
	+ROLLSPRITE
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetRoll(frandom(0, 359))
		TNT1 A 0 A_Jump(256, random(1, 3))
		DFX1 A 0 A_Jump(256, "FX")
		DFX2 A 0 A_Jump(256, "FX")
		DFX3 A 0 A_Jump(256, "FX")
	FX:
		"####" ABCDEF 1
		Stop
	}
}

ACTOR HARDevastatorPuffTrailFX : HARDevastatorPuffFX
{
	Scale 0.125
}

ACTOR HARDevastatorPuffTrailProjectile
{
	Projectile
	BounceType Doom
	+CLIENTSIDEONLY
	+FORCEXYBILLBOARD
	+NOBLOCKMAP
	+DONTSPLASH
	+THRUACTORS
	+NOTRIGGER
	+NOBLOCKMONST
	+CANNOTPUSH
	+SLIDESONWALLS
	Radius 1
	Height 1
	Gravity 0.20
	Speed 10
	BounceFactor 0.25
	WallBounceFactor 0.25
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_ScaleVelocity(frandom(0.75, 1.1));
			A_SpawnItemEx("HARDevastatorPuffTrail", 0, 0, 0, 0, 0, 0, 0, SXF_ORIGINATOR|SXF_SETTRACER|SXF_TRANSFERPOINTERS);
		}
		TNT1 AA 1 A_Weave(1, 3, 3, frandom(-1, 1))
		Stop
	}
}

ACTOR HARDevastatorPuffTrail : FastProjectileTrail
{
	MissileType "HARDevastatorPuffTrailFX"
}

ACTOR HARPuffSpark
{
	Radius 1
	Height 1
	Scale 0.2
	Gravity 0.33
	Speed 15
	RenderStyle Add
	+CLIENTSIDEONLY
	+FORCEXYBILLBOARD
	+NOBLOCKMAP
	+DONTSPLASH
	+THRUACTORS
	+NOTRIGGER
	+NOBLOCKMONST
	+CANNOTPUSH
	+MISSILE
	//+NOGRAVITY
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_ScaleVelocity(frandom(0.75, 1.1));
			If (!random(0, 1))
			{
				A_SetScale(ScaleX * 2);
			}
			A_SetScale(ScaleX * frandom(0.75, 1.2));
		}
		NULL A 3 Bright
	Fade:
		NULL A 1 Bright 
		{
			If (ScaleX <= 0)
			{
				Return State ("Null");
			}
			Else
			{
				A_ScaleVelocity(0.75);
				A_SetScale(ScaleX - 0.1);
				Return State ("");
			}
		}
		Loop
	}
}

ACTOR HARDevastatorPuffSpark : HARPuffSpark
{
	Scale 0.4
	Speed 10
	//-NOGRAVITY
}

ACTOR HARSmokeTrail : FastProjectileTrail 
{
	MissileType "HARSmoke"
}

ACTOR HARSmoke
{
	Scale 1
	//RenderStyle Translucent
	+NOINTERACTION
	+DONTBLAST
	+DONTTHRUST
	+NOTRIGGER
	States
	{
	Spawn:
		BLTL A 1 bright
		{
			A_FadeOut(0.03);
			A_SetScale(ScaleX + 0.01);
		}
		Wait
	}
}

ACTOR HARMicroMissile : EOA_Projectile
{
	Radius 2
	Height 4
	Speed 40
	Damage (2) //[DoomKrakken]: This is supposed to deal 4 damage.  However, it's dealing 8 damage to actors upon impact for whatever reason, so I set it to 2 so that it'll deal 4 damage to actors upon impact in-game.
	Scale 0.5
	+BLOODLESSIMPACT
	+FORCERADIUSDMG
	+HITTRACER
	//+EXTREMEDEATH
	+SEEKERMISSILE
	Var Float User_Weave[4];
	Var Int User_ReactionTime;
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_SpawnItemEx("MicroMissileSmokeTrail", 0, 0, 0, 0, 0, 0, 0, SXF_ORIGINATOR|SXF_SETTRACER);
			A_TransferPointer(AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_PLAYER_GETTARGET, AAPTR_TRACER);
			A_PlaySound("Rocket/Fly", 4, 0.3, 1);
			A_SetUserArrayFloat("User_Weave", 0, frandom(4.0, 8.0));
			A_SetUserArrayFloat("User_Weave", 1, User_Weave[0]);
			A_SetUserArrayFloat("User_Weave", 2, frandom(-1.0, 1.0));
			A_SetUserArrayFloat("User_Weave", 3, User_Weave[2]);
			A_SetUserVar("User_ReactionTime", 36);
		}
		MMSL A 1
		{
			A_Weave(User_Weave[0], User_Weave[1], User_Weave[2], User_Weave[3]);
			If (A_JumpIfTracerCloser(96, "Null"))
			{
				A_SeekerMissile(90, 0, SMF_PRECISE);
				A_SeekerMissile(90, 0, SMF_PRECISE);
				A_SeekerMissile(90, 0, SMF_PRECISE);
				A_SeekerMissile(90, 0, SMF_PRECISE);
			}
			A_SetUserVar("User_ReactionTime", User_ReactionTime - 1);
			If (User_ReactionTime <= 0)
			{
				Return State ("Explode");
			}
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 16, 0, 1, 1, DYN_ADDITIVE);
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 16, 0, 1, 1, DYN_ATTENUATE);
			Return State ("");
		}
		Wait
	XDeath:
		TNT1 A 0 
		{
			A_Stop;
			A_PlaySound("MicroMissile/Stick", 4, 0.5);
			A_QueueBottomlessMissiles;
			If (User_ReactionTime <= 0) //[DoomKrakken]: In case it didn't get initialized properly.
			{
				A_SetUserVar("User_ReactionTime", 36);
			}
		}
		MMSL A 1 
		{
			A_SetUserVar("User_ReactionTime", User_ReactionTime - 1);
			If (User_ReactionTime <= 0)
			{
				Return State ("Explode");
			}
			A_MicroMissileStick;
			Return State ("");
		}
		Wait
	Death:
		MMSL A 0
		{
			A_Stop;
			A_PlaySound("MicroMissile/Stick", 4, 0.5);
			If (User_ReactionTime <= 0) //[DoomKrakken]: In case it didn't get initialized properly.
			{
				A_SetUserVar("User_ReactionTime", 36);
			}
		}
		MMSL A 1
		{
			A_SetUserVar("User_ReactionTime", User_ReactionTime - 1);
			If (User_ReactionTime <= 0)
			{
				Return State ("Explode");
			}
			Return State ("");
		}
		Wait
	Explode:
		TNT1 A 1
		{
			A_SetScale(0.75);
			A_SpawnItemEx("EOA_RocketExplosion", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERSCALE|SXF_NOCHECKPOSITION);
			A_Stop;
			A_PlaySound("MicroMissile/Explode");
			A_ChangeFlag("EXTREMEDEATH", 1);
			EOA_Explode(40, 48, XF_HURTSOURCE, 1, 48, 0.375);
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 32, 0, 10, 1, DYN_ADDITIVE, False);
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 32, 0, 10, 1, DYN_ATTENUATE, False);
		}
		Stop
	}
}

ACTOR MicroMissileSmokeTrail : FastProjectileTrail 
{
	MissileType "MicroMissileSmoke"
}

ACTOR MicroMissileSmoke : FragGrenadeSmoke
{
	Scale 0.01
	States
	{
	SetSprite:
		"####" "#" 1
		{
			A_FadeOut(0.055);
			A_SetScale(ScaleX + 0.01);
		}
		Loop
	}
}

ACTOR EOA_EmptyBrass
{
	Projectile
	Radius 2
	Height 2
	Speed 9
	Mass 4
	BounceFactor 0.4
	Scale 0.1
	BounceType Doom
	BounceSound "Casing/Brass"
	+BOUNCEONACTORS
	+FLOORCLIP
	+FORCEXYBILLBOARD
	+ROLLSPRITE
	+ROLLCENTER
	-NOGRAVITY
	+NOTRIGGER
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_ChangeVelocity(0, frandom(0.0, 2.0), frandom(0.0, 2.0), CVF_RELATIVE)
	SpawnLoop:
		BRSS ABCDEF 1 A_SetRoll(Roll - 30)
		Loop
	Death:
		TNT1 A 0 A_SetRoll(0)
		TNT1 A 0 A_Jump(256, random(1, 3))
		BRSS ABF 0 A_Jump(256, "SetSprite")
	SetSprite:
		"####" "#" 400 A_PlaySound("Casing/Brass")
		"####" "##########" 1 A_FadeOut(0.1)
		Stop
	}
}
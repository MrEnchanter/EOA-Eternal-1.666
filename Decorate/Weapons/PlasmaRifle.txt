ACTOR PlasmaRifleSelected : EOA_Token{}

//Heat Blast - Collects extra heat from plasma projectiles that can be released as a powerful shockwave.  WARNING: Plasma gun won't fire while cooling off from a Heat Blast.
ACTOR HeatBlast : EOA_Token{}
ACTOR HeatBlastSelected : EOA_Token{}
ACTOR SuperHeatedRounds : EOA_Token{} //Rounds build heat much faster.
ACTOR ImprovedVenting : EOA_Token{} //Faster Cooldown.
ACTOR ExpandedThreshold : EOA_Token{} //More heat capacity, which results in higher damage potential.

ACTOR MC_HeatedCore : EOA_Token{} //Kill multiple enemies with a single Heat Blast 20 times.

ACTOR HeatedCore : EOA_Token{} //Mastery Upgrade - Heat builds automatically and passively, without needing to use ammo.

ACTOR HeatBlastCharged : EOA_Token{}
ACTOR HeatBlastReady : EOA_Token{}
ACTOR HeatBlastChargeCounter : EOA_Token{Inventory.MaxAmount 30}
ACTOR HeatBlastCooldownCounter : EOA_Token{Inventory.MaxAmount 30}
ACTOR HeatBlastSubChargeCounter : EOA_Token{Inventory.MaxAmount 6} //For Heated Core.
ACTOR HeatedCoreKillCounter : EOA_Token{Inventory.MaxAmount 2}
ACTOR HeatedCoreMasteryCounter : EOA_Token{Inventory.MaxAmount 20}
ACTOR PowerSurge : EOA_Token{}
ACTOR PowerSurgeCounter : EOA_Token{Inventory.MaxAmount 150}
ACTOR PLRHeatblastStrengthcounter : EOA_Token{Inventory.MaxAmount 3}


//Stun Bomb - Stuns enemies in a large radius.
ACTOR StunBomb : EOA_Token{}
ACTOR StunBombSelected : EOA_Token{}
ACTOR QuickRecharge : EOA_Token{} //Faster Cooldown.
ACTOR BigShock : EOA_Token{} //Larger Blast Radius
ACTOR LongerStun : EOA_Token{} //Longer Stun Duration.

ACTOR MC_ChainStun : EOA_Token{} //Kill 30 stunned enemies.

ACTOR ChainStun : EOA_Token{} //Mastery Upgrade - Enemies killed while stunned will stun enemies around them.

ACTOR StunBombCharged : EOA_Token{}
ACTOR StunBombReady : EOA_Token{}
ACTOR StunBombCooldownCounter : EOA_Token{Inventory.MaxAmount 350}
ACTOR ChainStunMasteryCounter : EOA_Token{Inventory.MaxAmount 30}

ACTOR PLRMods : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("HeatBlast");
			A_GiveInventory("SuperHeatedRounds");
			A_GiveInventory("ImprovedVenting");
			A_GiveInventory("ExpandedThreshold");
			A_GiveInventory("StunBomb");
			A_GiveInventory("QuickRecharge");
			A_GiveInventory("BigShock");
			A_GiveInventory("LongerStun");
		}
		Stop
	}
}

ACTOR EOA_PlasmaRifle : EOA_Weapon 20006
{
	Inventory.Icon "ICONPLR"
	Weapon.AmmoType "EOA_CellAmmo"
	Weapon.AmmoUse 1
	Weapon.AmmoGive 120
	Inventory.PickupMessage "Plasma Rifle"
	Tag "Plasma Rifle"
	States
	{
	Spawn:
		PLSR A -1
		Stop
	Select:
		TNT1 A 0 
		{
			SetPlayerProperty(0, 1, PROP_INSTANTWEAPONSWITCH);
			A_GiveInventory("PlasmaRifleSelected");
			ACS_NamedExecuteAlways("PLRReticle", 0);
			A_SetCrosshair(99);
		}
		PRNI A 1 A_Raise(60)
		Wait
	Deselect:
		PRNI A 0 A_JumpIfInventory("HeatBlastSelected", 1, 3)
		PRNI A 0 A_JumpIfInventory("StunBombSelected", 1, 2)
		PRNI A 0
		"####" "#" 0 A_SpawnPersistentNoiseMaker(1, "", 7)
		TNT1 A 0 
		{
			A_SpawnPersistentNoiseMaker(1, "", 6);
			A_TakeInventory("PowerSurgeCounter", 150);
			A_SetSpeed(1.0);
			A_ClearLockTargets;
			A_TakeInventory("LockOnBurstFiring");
			A_TakeInventory("LockOnBurstChargeCounter");
			A_TakeInventory("UnlockedFire");
			A_SetSpeed(1.0);
			A_TakeInventory("PlasmaRifleSelected");
			SetPlayerProperty(0, 0, PROP_INSTANTWEAPONSWITCH);
			A_DestroyPersistentNoiseMaker(1);
			A_DestroyPersistentNoiseMaker(2);
			A_DestroyPersistentNoiseMaker(3);
			A_DestroyPersistentNoiseMaker(4);
			A_DestroyPersistentNoiseMaker(5);
		}
		TNT1 A 4 A_SetTics(4 * !CountInv("Adept") * !CountInv("PowerBerserk"))
		PRNI A 1 A_Lower(36)
		Wait
	Ready:
		TNT1 A 0
		{
			If (!(CountInv("HeatBlastSwitch") || CountInv("StunBombSwitch")))
			{
				A_SpawnNoiseMaker("Weapon/Switch");
			}
		}
		TNT1 A 0 //ABCDEFGH 1 
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_NOBOB, EOA_ALLOWMANTLE|EOA_DISABLEHASTE);
			If (CountInv("HeatBlastSwitch"))
			{
				A_TakeInventory("HeatBlastSwitch");
				Return State ("HeatBlastMod");
			}
			Else If (CountInv("StunBombSwitch"))
			{
				A_TakeInventory("StunBombSwitch");
				Return State ("StunBombMod");
			}
			Return State ("");
		}
		//"####" "#" 0 A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH|WRF_ALLOWRELOAD|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM))
		Goto ReadyLoop
	ReRaise:
		TNT1 A 0 A_WeaponOffset(-144, 32)
		PRHR A 0 A_JumpIfInventory("HeatBlastSelected", 1, 3)
		PRSR A 0 A_JumpIfInventory("StunBombSelected", 1, 2)
		PRNR A 0
		"####" ABDEGH 1 //ABCDEFGH 1 
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_NOBOB, EOA_ALLOWMANTLE|EOA_DISABLEHASTE);
			A_WeaponOffset(24, 0, WOF_KEEPY|WOF_ADD);
		}
		//"####" "#" 0 A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH|WRF_ALLOWRELOAD|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM))
	ReadyLoop:
		TNT1 A 0
		{
			A_SpawnPersistentNoiseMaker(1, "", 6);
			A_SetSpeed(1.0);
			If (CountInv("HeatBlastCharged") && CountInv("HeatBlastSelected"))
			{
				A_GiveInventory("HeatBlastReady");
				A_TakeInventory("HeatBlastCharged");
			}
			If (CountInv("StunBombCharged") && CountInv("StunBombSelected"))
			{
				A_SpawnNoiseMaker("StunBomb/Charged", 6);
				A_GiveInventory("StunBombReady");
				A_TakeInventory("StunBombCharged");
			}
		}
		PRSI A 0 A_JumpIfInventory("StunBombSelected", 1, 7)
		RHSI A 0 A_JumpIfInventory("PowerSurgeCounter", 1, 6)
		RH3I A 0 A_JumpifInventory("PLRHeatblastStrengthcounter", 3, 5)
		RH2I A 0 A_JumpifInventory("PLRHeatblastStrengthcounter", 2, 4)
		RH1I A 0 A_JumpifInventory("PLRHeatblastStrengthcounter", 1, 3)
		PRHI A 0 A_JumpIfInventory("HeatBlastSelected", 1, 2)
		PRNI A 0
		"####" "#" 1 
		{
			EOA_WeaponReady(WRF_NOPRIMARY * (CountInv("HeatBlastSelected") && CountInv("HeatBlastCooldownCounter"))|WRF_NOSECONDARY * (CountInv("StunBombSelected") && CountInv("StunBombCooldownCounter"))|WRF_ALLOWRELOAD|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
			If (CountInv("HeatBlastSwitch"))
			{
				A_TakeInventory("HeatBlastSwitch");
				Return State ("SwitchToHeatBlast");
			}
			Else If (CountInv("StunBombSwitch"))
			{
				A_TakeInventory("StunBombSwitch");
				Return State ("SwitchToStunBomb");
			}
			Return State ("");
		}
		Loop
	Fire:
		PRSF A 0 A_JumpIfInventory("StunBombSelected", 1, 7)
		RH3F A 0 A_JumpifInventory("PLRHeatblastStrengthcounter", 3, 6)
		RH2F A 0 A_JumpifInventory("PLRHeatblastStrengthcounter", 2, 5)
		RH1F A 0 A_JumpifInventory("PLRHeatblastStrengthcounter", 1, 4)
		RHSF A 0 A_JumpIfInventory("PowerSurgeCounter", 1, 3)
		PRHF A 0 A_JumpIfInventory("HeatBlastSelected", 1, 2)
		PRNF A 0
		"####" "#" 0 
		{
			EOA_SetWeaponRecoilOffset(frandompick(-0.5, 0.5), frandompick(-0.5, 0.5), 0, 0.25);
			A_SpawnPersistentNoiseMaker(1, "PLR/Fire1", 1, 0.5);
			A_SpawnPersistentNoiseMaker(2, "PLR/Fire2", 2, 0.25);
			A_SpawnPersistentNoiseMaker(3, "PLR/Fire3", 3, 0.25);
			A_SpawnPersistentNoiseMaker(4, "PLR/Fire4", 4);
			A_SpawnPersistentNoiseMaker(5, "PLR/Base", 5);
			If (!CountInv("PowerSurgeCounter"))
			{
				If(CountInv("PLRHeatblastStrengthcounter") <= 1)
				{
					EOA_SpawnCustomDynamicLight("PulseLight", 0, 0.3, 1, 32, 0, 4, 1, DYN_ADDITIVE);
					EOA_SpawnCustomDynamicLight("PulseLight", 0, 0.3, 1, 32, 0, 4, 1, DYN_ATTENUATE);
				}
				else If (CountInv("PLRHeatblastStrengthcounter") == 2)
				{
					EOA_SpawnCustomDynamicLight("PulseLight", 0.5, 0.3, 0.5, 32, 0, 4, 1, DYN_ADDITIVE);
					EOA_SpawnCustomDynamicLight("PulseLight", 0.5, 0.3, 0.5, 32, 0, 4, 1, DYN_ATTENUATE);
				}
				else If (CountInv("PLRHeatblastStrengthcounter") == 3)
				{
					EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.3, 0, 32, 0, 4, 1, DYN_ADDITIVE);
					EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.3, 0, 32, 0, 4, 1, DYN_ATTENUATE);
				}
				EOA_FireBullets(0, 0, -1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ|FBF_USEAMMO, 32767, "EOA_PlasmaBall", random(-6, -4) + GetViewZ, random(7, 10) + GetRelVelY / 4);
			}
			else If (CountInv("PowerSurgeCounter"))
			{
				EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.3, 0, 32, 0, 4, 1, DYN_ADDITIVE);
				EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.3, 0, 32, 0, 4, 1, DYN_ATTENUATE);
				EOA_FireBullets(0, 0, -1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ|FBF_USEAMMO, 32767, "EOA_SurgePlasmaBall", random(-6, -4) + GetViewZ, random(7, 10) + GetRelVelY / 4);
				A_SpawnPersistentNoiseMaker(6, "PowerSurgeFire", 6);
			}
			If (CountInv("HeatBlastSelected"))
			{
				If (CountInv("HeatBlastChargeCounter") >= 30 && CountInv("PLRHeatblastStrengthcounter") <= 1)
				{
					A_GiveInventory("PLRHeatblastStrengthcounter", 1);
					A_TakeInventory("HeatBlastChargeCounter", 29);
					A_SpawnPersistentNoiseMaker(1, "HeatBlastCharge1", 6, 1);
				}
				else If (CountInv("HeatBlastChargeCounter") >= 30 && CountInv("PLRHeatblastStrengthcounter") == 2)
				{
					A_GiveInventory("PLRHeatblastStrengthcounter", 1);
					A_SpawnPersistentNoiseMaker(1, "HeatBlastCharge2", 6, 1);
				}
				If (CountInv("HeatBlastChargeCounter") >= 30 && CountInv("PLRHeatblastStrengthcounter") == 3)
				{
				}
				If (CountInv("SuperHeatedRounds"))
				{
					A_SpawnPersistentNoiseMaker(1, "PLR/HeatAdd", 7, 1.0, 1);
				}
				A_GiveInventory("HeatBlastChargeCounter", 1 + CountInv("SuperHeatedRounds"));
			}
			If (CountInv("PowerQDMG"))
			{
				A_SpawnNoiseMaker("QuadDamage/Shot", 4, 1.0, 0, ATTN_NORM, 0, 18); //A_GiveInventory("QuadDamageShot");
			}
			A_AlertMonsters;
		}
		"####" ABC 1
		{
			EOA_WeaponReady(WRF_NOPRIMARY|WRF_NOSECONDARY * !(((CountInv("HeatBlastSelected") && !CountInv("HeatBlastCooldownCounter") && CountInv("HeatBlastChargeCounter") >= 3 * (1 + CountInv("ExpandedThreshold"))) || (CountInv("StunBombSelected") && !CountInv("StunBombCooldownCounter"))) && (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ALTATTACK))|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
			If (CountInv("HeatBlastCharged") && CountInv("HeatBlastSelected"))
			{
				A_GiveInventory("HeatBlastReady");
				A_TakeInventory("HeatBlastCharged");
			}
			If (CountInv("StunBombCharged") && CountInv("StunBombSelected"))
			{
				A_SpawnNoiseMaker("StunBomb/Charged", 6);
				A_GiveInventory("StunBombReady");
				A_TakeInventory("StunBombCharged");
			}
			Return State ("");
		}
		"####" D 1 A_ReFire
		"####" "#" 0 A_SpawnPersistentNoiseMaker(1, "PLR/Spin", 7, 0)
		Goto ReadyLoop
	AltFire:
		TNT1 A 0 A_JumpIf((GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ALTATTACK), 1)
		Goto ReadyLoop
		TNT1 A 0 A_JumpIf(CountInv("HeatBlastSelected") && CountInv("HeatBlastChargeCounter") && !CountInv("HeatBlastCooldownCounter"), "HeatBlastLaunch")
		TNT1 A 0 
		{
			If (CountInv("StunBombSelected") && (CountInv("EOA_CellAmmo") || CheckInfiniteAmmo) && CheckLockOn)
			{
				Return State ("Stunbomblaunch");
			}
			Return State ("");
		}
		Goto ReadyLoop
	HeatBlastLaunch:
		TNT1 A 0
		{
			A_SpawnPersistentNoiseMaker(1, "", 7);
			A_HeatBlast;
			A_AlertMonsters;
			If(CountInv("HeatedCore") && CountInv("PLRHeatblastStrengthcounter") == 3)
			{
				A_GiveInventory("PowerSurgeCounter", 150);
			}
			A_TakeInventory("PLRHeatblastStrengthcounter", 3);
			A_SpawnItemEx("HeatBlastSFX", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_SETTARGET|SXF_NOCHECKPOSITION);
			//A_SpawnItemEx("HeatBlastWave", 0, 0, Height / 2, 0, 0, 0, 0, SXF_CLIENTSIDE|SXF_TRANSFERPITCH); //[DoomKrakken]: Spawned in A_HeatBlast.
			A_TakeInventory("HeatBlastReady");
			A_TakeInventory("HeatBlastChargeCounter");
			A_GiveInventory("HeatBlastCooldownCounter", 30);
			EOA_SetWeaponRecoilOffset(frandompick(-1, -0.5, 0.5, 1), -5, 0, 0.25);
			EOA_SpawnCustomDynamicLight("PulseLight", 0.1, 0.8, 1, 32, 0, 4, 1, DYN_ADDITIVE);
			EOA_SpawnCustomDynamicLight("PulseLight", 0.1, 0.8, 1, 32, 0, 4, 1, DYN_ATTENUATE);
			If (CountInv("PowerQDMG"))
			{
				A_GiveInventory("QuadDamageShot", 3); //So that it's louder, because sounds stack. ;)
			}
		}
		PRHF A 0
		"####" AAABBB 1 
		{
			EOA_WeaponReady(WRF_NOFIRE, EOA_ALLOWMANTLE);
			If (!CountInv("HeatBlastSelected"))
			{
				Return State ("ReadyLoop");
			}
			Return State ("");
		}
		"####" CCCDDD 1
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD|WRF_ALLOWZOOM, EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
			If (!CountInv("HeatBlastSelected"))
			{
				Return State ("ReadyLoop");
			}
			Return State ("");
		}
		/*"####" D 0
		{

		}*/
		Goto ReadyLoop
	Stunbomblaunch:
		TNT1 A 0
		{
			A_SetSpeed(0.35);
			A_TakeInventory("UnlockedFire");
			A_Overlay(-2, "LockCharge");
			A_SpawnNoiseMaker("MCVB/Charge", 1, 0.5);
		}
		PRSS ABBCCDDEE 2
		PRSL AABBCCDABCDABCD 2
		{
			EOA_WeaponReady(WRF_NOFIRE, EOA_WEAPSPEEDUPGRADE * CountInv("LongerStun"), 1);
			If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || CountInv("Grabbing_A_Ledge"))
			{
				Return State ("LockQuit");
			}
			Return State ("");
		}
	LockWait:
		PRSL ABCD 1
		{
			If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || !CountInv("StunBombSelected") || CountInv("Grabbing_A_Ledge"))
			{
				Return State ("LockQuit");
			}
			Else If (CountInv("LockOnBurstChargeCounter") >= 0)
			{
				A_SpawnNoiseMaker("RLR/Locked", 1, 0.5);
				A_TakeInventory("LockOnBurstChargeCounter");
				A_Overlay(-2, "Null");
				A_AcquireLockTargets;
				Return State ("LockReady");
			}
			Return State ("");
		}
		goto lockready
	LockCharge:
		TNT1 A 1 A_LockOn
		Wait
	LockReady:
		TNT1 A 0
		{
			A_SpawnNoiseMaker("MCVB/idle", 0);
		}
		PRSL ABCD 1
		{
			A_SpawnPersistentNoiseMaker(1, "", 6);
			EOA_WeaponReady(WRF_NOFIRE);
			//If (CountInv("Target
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK))
			{
				Return State ("LockFireStart");
			}
			Else If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || !CountInv("StunBombSelected") || CountInv("Grabbing_A_Ledge") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return State ("LockQuit");
			}
			Return State ("");
		}
		loop
	LockFireStart:
		TNT1 A 0 A_SpawnNoiseMaker("MCVB/FIRS", 0)
	LockFire:
		TNT1 A 0 A_SpawnPersistentNoiseMaker(1, "MCVB/Fire", 6, 0.5)
		RSSF ABAB 1
		{
			A_TakeInventory("LockOnBurstChargeCounter");
			A_GiveInventory("LockOnBurstFiring");
			A_Overlay(-2, "Null");
			A_LockTarget1;
			If (CountInv("PowerQDMG"))
			{
				A_SpawnNoiseMaker("QuadDamage/Shot", 4, 1.0, 0, ATTN_NORM, 0, 18); //A_GiveInventory("QuadDamageShot");
			}
			EOA_FireBullets(0, 0, -1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ|FBF_USEAMMO, 32767, "EOA_HomingPlasmaball", -1 + GetViewZ, 5 + GetRelVelY / 3);
			EOA_SpawnCustomDynamicLight("PulseLight", 0.3, 0.6, 1, 64, 0, 8, 1, DYN_ADDITIVE);
			A_TakeInventory("EOA_CellAmmo", 1, TIF_NOTAKEINFINITE);
			A_AlertMonsters;
		}
		TNT1 A 0 A_JumpIf(CountInv("EOA_CellAmmo") || CheckInfiniteAmmo, 2)
		TNT1 A 0 A_SelectWeapon("EOA_Weapon", SWF_SELECTPRIORITY)
		Goto LockEnd
		RSSF ABAB 1
		{
			EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE);
			A_LockTarget1;
			If (CountInv("PowerQDMG"))
			{
				A_SpawnNoiseMaker("QuadDamage/Shot", 4, 1.0, 0, ATTN_NORM, 0, 18); //A_GiveInventory("QuadDamageShot");
			}
			EOA_FireBullets(0, 0, -1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ|FBF_USEAMMO, 32767, "EOA_HomingPlasmaball", -1 + GetViewZ, 5 + GetRelVelY / 3);
			EOA_SpawnCustomDynamicLight("PulseLight", 0.3, 0.6, 1, 64, 0, 8, 1, DYN_ADDITIVE);
			A_TakeInventory("EOA_CellAmmo", 1, TIF_NOTAKEINFINITE);
			A_AlertMonsters;
		}
		TNT1 A 0 A_JumpIf(CountInv("EOA_CellAmmo") || CheckInfiniteAmmo, 2)
		TNT1 A 0 A_SelectWeapon("EOA_Weapon", SWF_SELECTPRIORITY)
		Goto LockEnd
		RSSF ABAB 1
		{
			EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE);
			A_LockTarget1;
			If (CountInv("PowerQDMG"))
			{
				A_SpawnNoiseMaker("QuadDamage/Shot", 4, 1.0, 0, ATTN_NORM, 0, 18); //A_GiveInventory("QuadDamageShot");
			}
			EOA_FireBullets(0, 0, -1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ|FBF_USEAMMO, 32767, "EOA_HomingPlasmaball", -1 + GetViewZ, 5 + GetRelVelY / 3);
			EOA_SpawnCustomDynamicLight("PulseLight", 0.3, 0.6, 1, 64, 0, 8, 1, DYN_ADDITIVE);
			A_TakeInventory("EOA_CellAmmo", 1, TIF_NOTAKEINFINITE);
			A_AlertMonsters;
		}
		TNT1 A 0 A_JumpIf(CountInv("EOA_CellAmmo") || CheckInfiniteAmmo, 2)
		TNT1 A 0 A_SelectWeapon("EOA_Weapon", SWF_SELECTPRIORITY)
		TNT1 A 0
		{
			If (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK && CountInv("LockTarget1"))
			{
				Return State ("LockFire");
			}
			Return State ("");
		}
		TNT1 A 0 A_SpawnNoiseMaker("", 0)
		Goto LockReady
	LockEnd:
		TNT1 A 0 
		{
			A_SpawnPersistentNoiseMaker(1, "", 6);
			A_SetSpeed(1.0);
			A_ClearLockTargets;
			A_TakeInventory("LockOnBurstFiring");
			A_TakeInventory("LockOnBurstChargeCounter");
			If (!CountInv("UnlockedFire"))
			{
				A_GiveInventory("LockOnBurstCooldownCounter", 70);
			}
			A_TakeInventory("UnlockedFire");
			If (!CountInv("LockOnBurstSelected"))
			{
				Return State ("LockQuit");
			}
			Return State ("");
		}
		PRSS EDBCA 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE)
	LockQuit:
		TNT1 A 0 
		{
			A_SetSpeed(1);
			A_Overlay(-2, "Null");
			A_ClearLockTargets;
			A_TakeInventory("LockOnBurstChargeCounter");
			EOA_WeaponReady(WRF_NOSECONDARY * (!CheckLockOn || CountInv("LockOnBurstCooldownCounter")), EOA_ALLOWMANTLE);
			If (CountInv("StunBombSelected"))
			{
				A_SpawnNoiseMaker("RLR/LoadStart", 1, 0.5);
				A_SpawnNoiseMaker("RLR/Rotate", 2);
				A_SpawnNoiseMaker("RLR/LoadMed", 3);
			}
		}
		PRSI A 2 
		{
			If (!CountInv("StunBombSelected"))
			{
				Return State ("ReadyLoop");
			}
			Return State ("");
		}
		Goto ReadyLoop
	Reload:
		TNT1 A 0 A_JumpIf(CountInv("HeatBlast") && !CountInv("HeatBlastSelected"), "SwitchToHeatBlast")
		TNT1 A 0 A_JumpIf(CountInv("StunBomb") && !CountInv("StunBombSelected"), "SwitchToStunBomb")
		Goto ReadyLoop
	SwitchToHeatBlast:
		PRSR A 0 A_JumpIfInventory("StunBombSelected", 1, 2)
		PRNR A 0
		"####" HGFEDCBA 1
	HeatBlastMod:
		TNT1 A 0 
		{
			A_GiveInventory("HeatBlastSelected");
			A_TakeInventory("StunBombSelected");
			//A_TakeInventory("StunBombReady");
			A_SpawnNoiseMaker("HeatBlast/Equip", 5);
			If (CountInv("HeatBlastCharged") && CountInv("HeatBlastSelected"))
			{
				A_GiveInventory("HeatBlastReady");
				A_TakeInventory("HeatBlastCharged");
			}
		}
		PRHM ABCDEFGHIJKLMNOPQ 1 EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		PRHM RRRRRRRRRRRRRRRRRRRRRRRRRR 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("StunBomb"), EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		PRHM SSTT 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("StunBomb"), EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		Goto ReadyLoop
	SwitchToStunBomb:
		PRHR A 0 A_JumpIfInventory("HeatBlastSelected", 1, 2)
		PRNR A 0
		"####" HGFEDCBA 1
	StunBombMod:
		TNT1 A 0 
		{
			A_TakeInventory("PowerSurgeCounter", 150);
			A_GiveInventory("StunBombSelected");
			A_TakeInventory("HeatBlastChargeCounter");
			A_TakeInventory("HeatBlastSelected");
			A_TakeInventory("HeatBlastReady");
			A_SpawnNoiseMaker("StunBomb/Equip", 5);
			/*If (CountInv("StunBombCharged"))
			{
				A_SpawnNoiseMaker("StunBomb/Charged", 6);
				A_GiveInventory("StunBombReady");
				A_TakeInventory("StunBombCharged");
			}*/
		}
		PRSM ABCDEFGHIJKLMNOPQ 1 EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		PRSM RRRRRRRRRRR 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("HeatBlast"), EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		PRSM SSSSSSSSSSS 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("HeatBlast"), EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		PRSM TUVW 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("HeatBlast"), EOA_ALLOWMANTLE)
		Goto ReadyLoop
	Zoom:
		PRHT A 0 A_JumpIfInventory("HeatBlastSelected", 1, 3)
		PRST A 0 A_JumpIfInventory("StunBombSelected", 1, 2)
		PRNT A 0
		"####" "#" 0 A_SpawnPersistentNoiseMaker(1, "", 7)
		Goto Super::Melee
	LedgeClimb:
		"####" "#" 0 A_SpawnPersistentNoiseMaker(1, "", 7)
		Goto Super::LedgeClimb
	UseEquipment:
		"####" "#" 0 A_SpawnPersistentNoiseMaker(1, "", 7)
		Goto Super::UseEquipment
	}
}

ACTOR EOA_PlasmaBall : EOA_Projectile //Many sources use these sprites... my source was ZION.
{
	Radius 4
	Height 8
	Damage (10) //(randompick(10, 15))
	Speed 75
	RenderStyle "Add"
	Alpha 0.99
	Scale 0.075
	Decal "EMGPuffBigScorch"
	Translation "80:111=[170, 202, 255]:[0, 1, 60]", "4:4=192:192", "3:3=0:0"
	EOA_Projectile.PuffType "EOA_PlasmaPuffComplex"
	+BRIGHT
	+ROLLSPRITE
	+ROLLCENTER
	+FORCERADIUSDMG
	+FORCEXYBILLBOARD
	States
	{
	Spawn:
		PSB1 A 0 NoDelay
		{
			A_SetRoll(random(0, 359));
			A_PlaySound("PlasmaBall/Fly", 1, 0.5, 1);
			A_PlaySound("PlasmaBall/Add1", 2, 0.25, 1);
			A_PlaySound("PlasmaBall/Add2", 3, 0.25, 1);
		}
	SpawnLoop:
		PSB1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 EOA_SpawnCustomDynamicLight("PointLight", 0.1, 0.8, 1, 16, 0, 1, 1, DYN_ADDITIVE, False)
		PSB2 ABCDEF 1 EOA_SpawnCustomDynamicLight("PointLight", 0.1, 0.8, 1, 16, 0, 1, 1, DYN_ADDITIVE, False)
		Loop
	XDeath:
		TNT1 A 0 A_PlaySound("Projectile/HitFlesh")
	Crash:
	Death:
		TNT1 A 1
		{
			A_Explode(4 * (1 - CheckClass("DecoyPlasmaBall")), 48, 0, 1, 48);
			A_SpawnItemEx("EOA_PlasmaPuffComplex");
			A_PlaySound("PlasmaBall/Impact", 5, 0.25);
			EOA_SpawnCustomDynamicLight("PointLight", 0.1, 0.8, 1, 16, 0, 1, 1, DYN_ADDITIVE, False);
			EOA_SpawnCustomDynamicLight("PointLight", 0.1, 0.8, 1, 16, 0, 1, 1, DYN_ATTENUATE, False);
		}
		Stop
	}
}

ACTOR EOA_SurgePlasmaBall : EOA_Projectile //Many sources use these sprites... my source was ZION.
{
	Radius 4
	Height 8
	Damage (25) //(randompick(10, 15))
	Speed 75
	RenderStyle "Add"
	Alpha 0.99
	Scale 0.075
	Decal "EMGPuffBigScorch"
	Translation "0:255=%[0.00,0.00,0.00]:[1.00,0.30,0.00]", "4:4=192:192", "3:3=0:0"
	EOA_Projectile.PuffType "EOA_PlasmaPuffComplex"
	+BRIGHT
	+ROLLSPRITE
	+ROLLCENTER
	+FORCERADIUSDMG
	+FORCEXYBILLBOARD
	States
	{
	Spawn:
		PSB1 A 0 NoDelay
		{
			A_SetRoll(random(0, 359));
			A_PlaySound("PlasmaBall/Fly", 1, 0.5, 1);
			A_PlaySound("PlasmaBall/Add1", 2, 0.25, 1);
			A_PlaySound("PlasmaBall/Add2", 3, 0.25, 1);
		}
	SpawnLoop:
		PSB1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 EOA_SpawnCustomDynamicLight("PointLight", 0.1, 0.8, 1, 16, 0, 1, 1, DYN_ADDITIVE, False)
		PSB2 ABCDEF 1 EOA_SpawnCustomDynamicLight("PointLight", 0.1, 0.8, 1, 16, 0, 1, 1, DYN_ADDITIVE, False)
		Loop
	XDeath:
		TNT1 A 0 A_PlaySound("Projectile/HitFlesh")
	Crash:
	Death:
		TNT1 A 1
		{
			A_Explode(4 * (1 - CheckClass("DecoyPlasmaBall")), 48, 0, 1, 48);
			A_SpawnItemEx("EOA_PlasmaPuffComplex");
			A_PlaySound("PlasmaBall/Impact", 5, 0.25);
			EOA_SpawnCustomDynamicLight("PointLight", 0.1, 0.8, 1, 16, 0, 1, 1, DYN_ADDITIVE, False);
			EOA_SpawnCustomDynamicLight("PointLight", 0.1, 0.8, 1, 16, 0, 1, 1, DYN_ATTENUATE, False);
		}
		Stop
	}
}


ACTOR EOA_HomingPlasmaball : EOA_Rocket //Many sources use these sprites... my source was ZION.
{
	Radius 4
	Height 8
	Damage (1) //(randompick(10, 15))
	Speed 20
	RenderStyle "Add"
	Alpha 0.99
	Scale 0.075
	Decal "EMGPuffBigScorch"
	Translation "80:111=[170, 202, 255]:[0, 1, 70]", "4:4=192:192", "3:3=0:0"
	EOA_Projectile.PuffType "EOA_PlasmaPuffComplex"
	+BRIGHT
	+HITTRACER
	+SEEKERMISSILE
	+ROLLSPRITE
	+ROLLCENTER
	+FORCERADIUSDMG
	+FORCEXYBILLBOARD
	Var Float User_Weave[4];
	States
	{
	Spawn:
		MCBB A 0 NoDelay
		{
		
			A_SetUserArrayFloat("User_Weave", 0, frandom(0.1, 3.0));
			A_SetUserArrayFloat("User_Weave", 1, User_Weave[0]);
			A_SetUserArrayFloat("User_Weave", 2, frandom(-0.2, 0.2));
			A_SetUserArrayFloat("User_Weave", 3, User_Weave[2]);
			A_TransferPointer(AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_TRACER, AAPTR_TRACER);
			If (CountInv("PowerQDMG", AAPTR_TARGET))
			{
				A_SpawnItemEx("QuadDamageFX2", 0, 0, 0, 0, 0, 0, 0, SXF_ORIGINATOR|SXF_TRANSFERPOINTERS|SXF_TRANSFERSCALE|SXF_SETTRACER|SXF_NOCHECKPOSITION);
			}
		}
		MCBB BCD 1 bright
		{
			A_Weave(User_Weave[0], User_Weave[1], User_Weave[2], User_Weave[3]);
			A_SeekerMissile(60, 90, SMF_PRECISE);
			EOA_SpawnCustomDynamicLight("PointLight", 0.1, 0.6, 1, 16, 0, 1, 1, DYN_ADDITIVE);
		}
		wait
	Death:
		TNT1 AAAAA 0 A_SpawnItemEx("StunBombImpactLightning", frandom(-3, 3), frandom(-3, 3), frandom(-3, 3), 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE)
		TNT1 A 10
		{
			/*If (CountInv("LongerStun", AAPTR_TARGET))
			{
				A_RadiusGive("LongerStunBombItem", 20 + (112 * CountInv("BigShock", AAPTR_TARGET)), RGF_MONSTERS|RGF_OBJECTS);
			}
			Else
			{
				A_RadiusGive("StunBombItem", 20 + (112 + CountInv("BigShock", AAPTR_TARGET)), RGF_MONSTERS|RGF_OBJECTS);
			}*/
			A_Explode(1, 48 + (112 * CountInv("BigShock", AAPTR_TARGET)), 0, 1, 48 + (112 * CountInv("BigShock", AAPTR_TARGET)));
			A_Explode(4 * (1 - CheckClass("DecoyPlasmaBall")), 48, 0, 1, 48);
			A_SpawnItemEx("EOA_PlasmaPuffComplex");
			A_PlaySound("PlasmaBall/Impact", 5, 0.25);
			EOA_SpawnCustomDynamicLight("PointLight", 0.1, 0.8, 1, 16, 0, 1, 1, DYN_ADDITIVE, False);
		}
		Stop
	}
}

ACTOR DecoyPlasmaBall : EOA_PlasmaBall
{
	Decal ""
	Damage (random(0, 1))
	+PAINLESS
}

ACTOR EOA_PlasmaPuff //Graphics taken from D4T and ZION. :D
{
	RenderStyle "Add"
	Scale 0.25
	Alpha 0.99
	Translation "0:255=%[0,0,0]:[0.6,1.0,1.8]"
	+ROLLSPRITE
	+ROLLCENTER
	+NOINTERACTION
	+FORCEXYBILLBOARD
	+DONTBLAST
	+DONTTHRUST
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetRoll(random(0, 359))
		DBP2 A 0 A_Jump(128, 2)
		DBPP A 0
		"####" ABCDEFGHI 1 Bright
		Stop
	}
}

ACTOR EOA_PlasmaPuffComplex : EOA_PlasmaPuff
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_SpawnItemEx("PlasmaShockwave", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			A_SpawnItemEx("EOA_PlasmaPuff", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			A_SpawnItemEx("PlasmaImpactLightning", frandom(-3, 3), frandom(-3, 3), frandom(-3, 3), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
		}
		TNT1 AAAAAAAAAA 0
		{
			A_CustomMissile("PlasmaSpark", 0, 0, random(1, 360), CMF_AIMDIRECTION, random(-45, 45));
			A_CustomMissile("ChaingunUraniumPuffSpark", 0, 0, random(1, 360), CMF_AIMDIRECTION, random(-45, 90));
		}
		Goto Super::Spawn
	}
}

//[DoomKrakken]: Effects pilfered from ZION... :D
ACTOR PlasmaShockWave
{
	Scale 0.33
	RenderStyle "Add"
	Alpha 0.99
	Translation "0:255=%[0.00,0.00,0.00]:[1.07,1.65,2.00]" //"0:255=%[0,0,0]:[0,0.5,1.5]"
	+ROLLSPRITE
	+ROLLCENTER
	+NOINTERACTION
	+FORCEXYBILLBOARD
	+DONTSPLASH
	+NOTRIGGER
	States
	{
	Spawn:
		PLSK A 0 NoDelay 
		{
			A_SetRoll(frandom(0, 359));
			//A_SetScale(ScaleX * frandom(0.75, 1.1));
		}
		PLSK AAA 1 Bright 
		{
			A_FadeOut(0.2);
			A_SetScale(ScaleX * 1.2);
		}
		Stop
	}
}

ACTOR PlasmaImpactLightning
{
	RenderStyle "Add"
	Translation "0:255=%[0.00,0.00,0.00]:[1.07,1.65,2.00]"
	//Speed 4
	Scale 0.075
	Alpha 0.99
	+NOINTERACTION
	+FORCEXYBILLBOARD
	+ROLLSPRITE
	+ROLLCENTER
	+DONTSPLASH
	+NOTRIGGER
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetRoll(random(0, 359))
		TNT1 A 0 A_Jump(256, random(1, 8))
		LBLT ABCDEFGH 0 A_Jump(256, "KeepSprite")
	KeepSprite:
		LBLT "#" 1 Bright 
		{
			A_FadeOut(0.25);
			A_SetScale(ScaleX * 1.3);
		}
		Wait
	}
}

ACTOR PlasmaSpark
{
	Radius 0
	Height 0
	Speed 7
	RenderStyle "Add"
	Translation "0:255=%[0.00,0.00,0.00]:[1.07,1.65,2.00]"
	Scale 0.2
	//Gravity 0.66
	+CLIENTSIDEONLY
	+FORCEXYBILLBOARD
	+NOBLOCKMAP
	+DONTSPLASH
	+THRUACTORS
	+NOTRIGGER
	+NOBLOCKMONST
	+CANNOTPUSH
	+MISSILE
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256, random(1, 4))
		DEBR ABCD 0 A_Jump(256, "FX")
	FX:
		"####" "#" 3 Bright  
		{
			A_SetScale(ScaleX * frandom(1, 1.25));
			A_SetRoll(random(0, 359));
		}
		"####" "#" 1 Bright 
		{
			A_SetScale(ScaleX - 0.025);
			If (ScaleX <= 0)
			{
				Return State ("Null");
			}
			Else
			{
				Return State ("");
			}
		}
		Wait
	}
}

ACTOR HeatBlastSFX
{
	+NOINTERACTION
	+DONTBLAST
	+DONTTHRUST
	+NOTIMEFREEZE
	Var Int User_ReactionTime;
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_PlaySound("HeatBlast/Fire", 1);
			A_PlaySound("HeatBlast/Fire", 2);
			A_PlaySound("HeatBlast/Fire", 3);
			A_PlaySound("HeatBlast/Fire", 4);
			A_PlaySound("HeatBlast/Shrill", 5, 0.25);
			A_PlaySound("HeatBlast/Distort", 6, 0.5);
			If (CountInv("ExpandedThreshold", AAPTR_TARGET))
			{
				A_PlaySound("HeatBlast/Add", 7, 1);
			}
		}
		TNT1 A 1
		{
			A_Warp(AAPTR_TARGET, 0, 0, 0, 0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_STOP, 0, 0.5);
			A_SetUserVar("User_ReactionTime", User_ReactionTime + 1);
			If (User_ReactionTime >= 70)
			{
				Return State ("Null");
			}
			Else
			{
				Return State ("");
			}
		}
		Wait
	}
}

ACTOR StunBombSFX : HeatBlastSFX
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_PlaySound("PRS/Fire", 1);
			A_PlaySound("PRS/Add", 2, 0.5);
		}
		Goto Super::Spawn+1
	}
}

ACTOR EOA_PlasmaPuffHBW //Graphics taken from D4T and ZION. :D
{
	RenderStyle "Add"
	Scale 0.25
	Alpha 0.99
	Translation "0:255=%[0,0,0]:[0.6,1.0,1.8]"
	+ROLLSPRITE
	+ROLLCENTER
	+NOINTERACTION
	+FORCEXYBILLBOARD
	+DONTBLAST
	+DONTTHRUST
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetRoll(random(0, 359))
		DBP2 A 0 A_Jump(128, 2)
		DBPP A 0
		"####" ABCDEFGHI 3 Bright
		Stop
	}
}

ACTOR EOA_PlasmaPuffHBW2 //Graphics taken from D4T and ZION. :D
{
	RenderStyle "Add"
	Scale 0.25
	Alpha 0.99
	Translation "0:255=%[0.00,0.00,0.00]:[0.20,0.00,0.80]"
	+ROLLSPRITE
	+ROLLCENTER
	+NOINTERACTION
	+FORCEXYBILLBOARD
	+DONTBLAST
	+DONTTHRUST
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetRoll(random(0, 359))
		DBP2 A 0 A_Jump(128, 2)
		DBPP A 0
		"####" ABCDEFGHI 3 Bright
		Stop
	}
}

ACTOR EOA_PlasmaPuffHBW3 //Graphics taken from D4T and ZION. :D
{
	RenderStyle "Add"
	Scale 0.25
	Alpha 0.99
	Translation "0:255=%[0.00,0.00,0.00]:[1.00,0.30,0.00]"
	+ROLLSPRITE
	+ROLLCENTER
	+NOINTERACTION
	+FORCEXYBILLBOARD
	+DONTBLAST
	+DONTTHRUST
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetRoll(random(0, 359))
		DBP2 A 0 A_Jump(128, 2)
		DBPP A 0
		"####" ABCDEFGHI 3 Bright
		Stop
	}
}

ACTOR PlasmaShockWaveHBW
{
	Scale 0.68
	RenderStyle "Add"
	Alpha 0.99
	Translation "0:255=%[0.00,0.00,0.00]:[0.07,1.65,2.00]" //"0:255=%[0.00,0.00,0.00]:[0.07,1.65,2.00]"
	+ROLLSPRITE
	+ROLLCENTER
	+NOINTERACTION
	+FORCEXYBILLBOARD
	+DONTSPLASH
	+NOTRIGGER
	States
	{
	Spawn:
		PLSK A 0 NoDelay 
		{
			A_SetRoll(frandom(0, 359));
			//A_SetScale(ScaleX * frandom(0.75, 1.1));
		}
		PLSK AAA 3 Bright 
		{
			A_FadeOut(0.2);
			A_SetScale(ScaleX * 1.2);
		}
		Stop
	}
}

ACTOR PlasmaShockWaveHBW2
{
	Scale 0.68
	RenderStyle "Add"
	Alpha 0.99
	Translation "0:255=%[0.00,0.00,0.00]:[0.20,0.00,0.80]" //"0:255=%[0.00,0.00,0.00]:[0.07,1.65,2.00]"
	+ROLLSPRITE
	+ROLLCENTER
	+NOINTERACTION
	+FORCEXYBILLBOARD
	+DONTSPLASH
	+NOTRIGGER
	States
	{
	Spawn:
		PLSK A 0 NoDelay 
		{
			A_SetRoll(frandom(0, 359));
			//A_SetScale(ScaleX * frandom(0.75, 1.1));
		}
		PLSK AAA 3 Bright 
		{
			A_FadeOut(0.2);
			A_SetScale(ScaleX * 1.2);
		}
		Stop
	}
}

ACTOR PlasmaShockWaveHBW3
{
	Scale 0.68
	RenderStyle "Add"
	Alpha 0.99
	Translation "0:255=%[0.00,0.00,0.00]:[1.00,0.30,0.00]" //"0:255=%[0.00,0.00,0.00]:[0.07,1.65,2.00]"
	+ROLLSPRITE
	+ROLLCENTER
	+NOINTERACTION
	+FORCEXYBILLBOARD
	+DONTSPLASH
	+NOTRIGGER
	States
	{
	Spawn:
		PLSK A 0 NoDelay 
		{
			A_SetRoll(frandom(0, 359));
			//A_SetScale(ScaleX * frandom(0.75, 1.1));
		}
		PLSK AAA 3 Bright 
		{
			A_FadeOut(0.2);
			A_SetScale(ScaleX * 1.2);
		}
		Stop
	}
}

ACTOR HeatBlastWave //Sprite modified from Guncaster.
{
	Projectile
	Renderstyle "Add"
	Alpha 0.99
	Scale 1.4
	+FLATSPRITE
	+NOINTERACTION
	+DONTBLAST
	+DONTTHRUST
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_SpawnItemEx("PlasmaShockWaveHBW", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			A_SpawnItemEx("EOA_PlasmaPuffHBW", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
		}
		Goto Super::Spawn
	}
}

ACTOR HeatBlastWave2 //Sprite modified from Guncaster.
{
	Projectile
	Renderstyle "Add"
	Alpha 0.99
	Scale 1.4
	+FLATSPRITE
	+NOINTERACTION
	+DONTBLAST
	+DONTTHRUST
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_SpawnItemEx("PlasmaShockWaveHBW2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			A_SpawnItemEx("EOA_PlasmaPuffHBW2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
		}
		Goto Super::Spawn
	}
}

ACTOR HeatBlastWave3 //Sprite modified from Guncaster.
{
	Projectile
	Renderstyle "Add"
	Alpha 0.99
	Scale 1.4
	+FLATSPRITE
	+NOINTERACTION
	+DONTBLAST
	+DONTTHRUST
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_SpawnItemEx("PlasmaShockWaveHBW3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			A_SpawnItemEx("EOA_PlasmaPuffHBW3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
		}
		Goto Super::Spawn
	}
}

ACTOR StunBombImpactLightning : PlasmaImpactLightning
{
	Scale 0.2
	States
	{
	KeepSprite:
		LBLT "#" 1 Bright 
		{
			A_FadeOut(0.125);
			A_SetScale(ScaleX * 1.3);
		}
		Wait
	}
}

ACTOR StunBombItem : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			If (A_CheckFlag("ISMONSTER", "Null"))
			{
				If (((!A_CheckFlag("BOSS", "Null") || (A_CheckFlag("BOSS", "Null") && GetSpawnHealth < 3000)) && !A_CheckFlag("DORMANT", "Null")) && !CountInv("PowerStunned")) //Doesn't affect bosses or already stunned monsters.  I'll go out on a limb and say that it also doesn't affect dormant monsters.
				{
					If (GetSpawnHealth >= 1500) //Because Barons burn through this twice as fast.  I'll go out on a limb and say that beefy Baron-tier monsters get shorter stun times.
					{
						A_GiveInventory("StunnedShorter");
					}
					Else
					{
						A_GiveInventory("Stunned");
					}
					A_SpawnItemEx("StunBombStunner", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTRACER);
				}
			}
			Else
			{
				A_DamageSelf(100);
			}
		}
		Stop
	}
}

ACTOR LongerStunBombItem : StunBombItem
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			If (A_CheckFlag("ISMONSTER", "Null"))
			{
				If (((!A_CheckFlag("BOSS", "Null") || (A_CheckFlag("BOSS", "Null") && GetSpawnHealth < 3000)) && !A_CheckFlag("DORMANT", "Null")) && !CountInv("PowerStunned")) //Doesn't affect bosses or already stunned monsters.  I'll go out on a limb and say that it also doesn't affect dormant monsters.
				{
					If (GetSpawnHealth >= 1000) //Because Barons burn through this twice as fast.  I'll go out on a limb and say that beefy Baron-tier monsters get shorter stun times.
					{
						A_GiveInventory("Stunned");
					}
					Else
					{
						A_GiveInventory("StunnedLonger");
					}
					A_SpawnItemEx("StunBombStunner", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTRACER);
				}
			}
			Else
			{
				A_DamageSelf(100);
			}
		}
		Stop
	}
}

ACTOR ChainStunItem : StunBombItem
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			If (A_CheckFlag("ISMONSTER", "Null"))
			{
				If (((!A_CheckFlag("BOSS", "Null") || (A_CheckFlag("BOSS", "Null") && GetSpawnHealth < 3000)) && !A_CheckFlag("DORMANT", "Null")) && !CountInv("PowerStunned")) //Doesn't affect bosses or already stunned monsters.  I'll go out on a limb and say that it also doesn't affect dormant monsters.
				{
					If (GetSpawnHealth >= 1000) //Because Barons burn through this twice as fast.  I'll go out on a limb and say that beefy Baron-tier monsters get shorter stun times.
					{
						A_GiveInventory("Stunned");
						//A_GiveInventory("StunnedShorter");
					}
					Else
					{
						//A_GiveInventory("Stunned");
						A_GiveInventory("StunnedLonger");
					}
					A_SpawnItemEx("StunBombStunner", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTRACER);
				}
			}
			/*Else
			{
				A_DamageSelf(100);
			}*/
		}
		Stop
	}
}

ACTOR StunBombStunner
{
	+NOINTERACTION
	+NOCLIP
	+NOGRAVITY
	+FORCEPAIN
	+NODAMAGETHRUST
	Var Int User_Lightning;
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_JumpIfInventory("IsStunned", 1, "Null", AAPTR_TRACER)
		TNT1 A 0
		{
			A_GiveInventory("IsStunned", 1, AAPTR_TRACER);
			A_PlaySound("StunBomb/Stun", 4, 1.0, 1);
		}
		TNT1 A 1 Light("StunLight")
		{
			A_Warp(AAPTR_TRACER, 0, 0, 0, 0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE, 0, 0.5);
			If (User_Lightning >= 5)
			{
				A_SpawnItemEx("StunBombLightning", frandom(-3, 3), frandom(-3, 3), frandom(-3, 3), 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SetUserVar("User_Lightning", 0);
			}
			If (A_JumpIfHealthLower(2, "Null", AAPTR_TRACER)) //[DoomKrakken]: So that this system doesn't kill the monster.
			{
				A_DamageTracer(-1, 0, DMSS_FOILINVUL|DMSS_NOFACTOR|DMSS_NOPROTECT, "none", "none");
				A_DamageTracer(1, 0, DMSS_FOILINVUL|DMSS_NOFACTOR|DMSS_NOPROTECT, "none", "none");
			}
			Else
			{
				A_DamageTracer(1, 0, DMSS_FOILINVUL|DMSS_NOFACTOR|DMSS_NOPROTECT, "none", "none");
				A_DamageTracer(-1, 0, DMSS_FOILINVUL|DMSS_NOFACTOR|DMSS_NOPROTECT, "none", "none");
			}
			If (A_JumpIfHealthLower(1, "Null", AAPTR_TRACER) || CountInv("GloryKillCounter", AAPTR_TRACER))
			{
				A_TransferPointer(AAPTR_TRACER, AAPTR_DEFAULT, AAPTR_TARGET, AAPTR_TARGET); //In case its tracer's target changes.
				A_TakeInventory("IsStunned", 1, 0, AAPTR_TRACER);
				Return State ("Death");
			}
			Else If (!CountInv("PowerStunned", AAPTR_TRACER))
			{
				A_TakeInventory("IsStunned", 1, 0, AAPTR_TRACER);
				Return State ("Null");
			}
			Else
			{
				A_TransferPointer(AAPTR_TRACER, AAPTR_DEFAULT, AAPTR_TARGET, AAPTR_TARGET); //In case its tracer's target changes.
				A_SetUserVar("User_Lightning", User_Lightning + 1);
				Return State ("");
			}
		}
		Wait
	Death:
		TNT1 A 0
		{
			If (CountInv("ChainStun", AAPTR_TARGET))
			{
				A_RadiusGive("ChainStunItem", 320, RGF_MONSTERS|RGF_OBJECTS|RGF_NOTRACER); //So that it doesn't recursively give its tracer the stun item.
			}
		}
		Stop
	}
}

ACTOR IsStunned : EOA_Token{}

ACTOR Stunned : EOA_TempToken
{
	Powerup.Type "Stunned"
	Powerup.Duration 88
}

ACTOR StunnedLonger : Stunned
{
	Powerup.Duration -5
}

ACTOR StunnedShorter : Stunned
{
	Powerup.Duration 44
}

//ACTOR PowerStunned : PowerEOA_TempToken{}

ACTOR StunBombShockWave
{
	RenderStyle "Add"
	//Translation "0:255=%[0, 0, 0]:[0.9, 1, 1.66]"
	Scale 0.05
	//Alpha 0.5
	+ROLLSPRITE
	+ROLLCENTER
	+NOINTERACTION
	+FORCEXYBILLBOARD
	+DONTSPLASH
	+NOTRIGGER
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetRoll(random(0, 359))
		BSW2 A 1 Bright
		{
			A_FadeOut(0.1);
			A_SetScale(ScaleX + 0.05 * (1 + CountInv("BigShock", AAPTR_TARGET)));
		}
		Wait
	}
}

ACTOR StunBombLightning : PlasmaImpactLightning
{
	Scale 0.1
	Translation "Cyan"
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetRoll(random(0, 359))
		TNT1 A 0 A_Jump(256, random(1, 8))
		LBLT ABCDEFGH 0 A_Jump(256, "KeepSprite")
	KeepSprite:
		LBLT "#" 1 Bright 
		{
			A_FadeOut(0.1);
			A_SetScale(ScaleX * 1.1);
		}
		Wait
	}
}

ACTOR ChainStunLightningTracerSpawner : ChainStunTracerRetriever
{
	Projectile
	Radius 1
	Radius 1
	+NOINTERACTION
	ReactionTime 12
	MissileHeight 0
	Var Int User_Dist;
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_RearrangePointers(AAPTR_MASTER, AAPTR_TARGET)
	See:
		TNT1 A 0 
		{
			If (EOA_ChainStun(400, 30))
			{
				A_SpawnItemEx("StunBombLightningTracerSpawner", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPOINTERS);
			}
		}
	Turnito:
		TNT1 A 0
		{
			A_SetAngle(Angle + 30);
			A_CountDown;
		}
		Goto See
	}
}

ACTOR StunBombLightningTracerSpawner
{
	Radius 1
	Height 1
	+NOINTERACTION
	States
	{
	Spawn:
		TNT1 AAAAAAAA 1
		{
			A_Warp(AAPTR_TARGET, 0, 0, 0, 0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE, "", 2);
			A_SpawnItemEx("StunBombLightningTracer", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPOINTERS);
		}
		Stop
	}
}

ACTOR StunBombLightningTracer : LightningBeamBase
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			A_SetUserArray("User_Dist", 1, ACS_NamedExecuteWithResult("GetDist", 0, AAPTR_TRACER, 1));
			A_SetUserArray("User_Stats", 0, 64);
			A_SetUserArray("User_Stats", 1, 400);
			A_SetUserArray("User_Stats", 2, 8);
			If (!Tracer)
			{
				Return State ("Null");
			}
			Return State ("Fly");
		}
		Goto Fly
	Missile:
		TNT1 A 0 A_SpawnItemEx("StunBombLightningTracerFX", cos(-Pitch) * (User_Stats[0] / 2), 0, sin(Pitch) * (User_Stats[0] / 2), cos(-Pitch) * (User_Stats[0] * 0.0001), 0, sin(Pitch) * (User_Stats[0] * 0.0001), 0, SXF_TRANSFERPITCH)
		TNT1 A 0 A_Jump(256, "Move")
		Goto Move
	}
}

ACTOR StunBombLightningTracerFX : LightningBeamTrailBase
{
	Translation "0:255=%[0.00,0.00,0.00]:[1.07,1.65,2.00]"
}


//Red Plasma Ball, fired by enemies...
ACTOR EOA_EnemyPlasmaBall : EOA_PlasmaBall
{
	Damage (5) //(randompick(10, 15))
	Speed 30
	Decal "EMGPuffBigScorchRed"
	Translation "0:255=%[0,0,0]:[1.5,0.66,0.66]"
	EOA_Projectile.PuffType "EOA_EnemyPlasmaPuffComplex"
	States
	{
	Spawn:
		PSB1 A 0 NoDelay
		{
			A_SetRoll(random(0, 359));
			A_PlaySound("PlasmaBall/Fly", 1, 0.5, 1);
			A_PlaySound("PlasmaBall/Add1", 2, 0.25, 1);
			A_PlaySound("PlasmaBall/Add2", 3, 0.25, 1);
		}
	SpawnLoop:
		PSB1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 EOA_SpawnCustomDynamicLight("PointLight", 0.7, 0.33, 0.33, 16, 0, 1, 1, DYN_ADDITIVE, False)
		PSB2 ABCDEF 1 EOA_SpawnCustomDynamicLight("PointLight", 0.7, 0.33, 0.33, 16, 0, 1, 1, DYN_ADDITIVE, False)
		Loop
	XDeath:
		TNT1 A 0 A_PlaySound("Projectile/HitFlesh")
	Crash:
	Death:
		TNT1 A 1
		{
			A_SpawnItemEx("EOA_EnemyPlasmaPuffComplex");
			A_PlaySound("PlasmaBall/Impact", 5, 0.25);
			EOA_SpawnCustomDynamicLight("PointLight", 0.7, 0.33, 0.33, 16, 0, 1, 1, DYN_ADDITIVE, False);
			EOA_SpawnCustomDynamicLight("PointLight", 0.7, 0.33, 0.33, 16, 0, 1, 1, DYN_ATTENUATE, False);
		}
		Stop
	}
}

ACTOR EOA_EnemyPlasmaPuff : EOA_PlasmaPuff//Graphics taken from D4T and ZION. :D
{
	Translation "0:255=%[0,0,0]:[1.5,0.66,0.66]"
}

ACTOR EOA_EnemyPlasmaPuffComplex : EOA_EnemyPlasmaPuff
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_SpawnItemEx("EnemyPlasmaShockwave", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			A_SpawnItemEx("EOA_EnemyPlasmaPuff", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			A_SpawnItemEx("EnemyPlasmaImpactLightning", frandom(-3, 3), frandom(-3, 3), frandom(-3, 3), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
		}
		TNT1 AAAAAAAAAA 0
		{
			A_CustomMissile("EnemyPlasmaSpark", 0, 0, random(1, 360), CMF_AIMDIRECTION, random(-45, 45));
			A_CustomMissile("RedPlasmaPuffSpark", 0, 0, random(1, 360), CMF_AIMDIRECTION, random(-45, 90));
		}
		Goto Super::Spawn
	}
}

//[DoomKrakken]: Effects pilfered from ZION... :D
ACTOR EnemyPlasmaShockWave : PlasmaShockWave
{
	Translation "0:255=%[0,0,0]:[1.5,0.66,0.66]"
}

ACTOR EnemyPlasmaImpactLightning : PlasmaImpactLightning
{
	Translation "Red"
}

ACTOR EnemyPlasmaSpark : PlasmaSpark
{
	Translation "Red"
}
ACTOR RocketLauncherSelected : EOA_Token{}

//Lock-On Burst - Fire a three-round burst.  If pointed in the general direction of an enemy for long enough, they will home in on it.
ACTOR LockOnBurst : EOA_Token{}
ACTOR LockOnBurstSelected : EOA_Token{}
ACTOR QuickLock : EOA_Token{} //Faster Lock-On Rate.
ACTOR FasterRecovery : EOA_Token{} //Faster Cooldown.

ACTOR MC_MultiTargeting : EOA_Token{} //Kill 5 Arch-Viles with the Lock-On Burst.

ACTOR MultiTargeting : EOA_Token{} //Mastery Upgrade - By pointing at different enemies while locked, one can obtain up to three targets.  Rockets fired will be divided among them.

ACTOR LockOnBurstChargeCounter : EOA_Token{Inventory.MaxAmount 32}
ACTOR LockOnBurstCooldownCounter : EOA_Token{Inventory.MaxAmount 70}
ACTOR LockTarget : EOA_Token{}
ACTOR LockTarget1 : EOA_Token{}
ACTOR LockTarget2 : EOA_Token{}
ACTOR LockTarget3 : EOA_Token{}
ACTOR MultiTargetingMasteryCounter : EOA_Token{Inventory.MaxAmount 5}
ACTOR UnlockedFire : EOA_Token{} //For non-homing rockets fired from the Lock-On Burst.
ACTOR LockOnBurstFiring : EOA_Token{}

//Remote Detonation - Detonate rockets prematurely.
ACTOR RemoteDetonation : EOA_Token{}
ACTOR RemoteDetonationSelected : EOA_Token{}
ACTOR ImprovedWarhead : EOA_Token{} //Larger Blast Radius when detonated remotely.
ACTOR JaggedShrapnel : EOA_Token{} //Rockets also release a cloud of shrapnel upon remote detonation, which deal additional damage to enemies over time (due to bleeding).

ACTOR MC_ExternalPayload : EOA_Token{} //Kill 3 or more enemies with a Remote Detonation 15 times.

ACTOR ExternalPayload : EOA_Token{} //Mastery Upgrade - Additional explosives are mounted to the outside of the rocket, allowing for a remote detonation without destroying the rocket.

ACTOR RemoteDetonationTrigger : EOA_Token{} //For the hud message, and for the rocket itself.

ACTOR ExternalPayloadCounter : EOA_Token{}
ACTOR ExternalPayloadKillCounter : EOA_Token{Inventory.MaxAmount 3}
ACTOR ExternalPayloadMasteryCounter : EOA_Token{Inventory.MaxAmount 15}

ACTOR RLRMods : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("LockOnBurst");
			A_GiveInventory("QuickLock");
			A_GiveInventory("FasterRecovery");
			A_GiveInventory("RemoteDetonation");
			A_GiveInventory("ImprovedWarhead");
			A_GiveInventory("JaggedShrapnel");
		}
		Stop
	}
}

ACTOR EOA_RocketLauncher : EOA_Weapon 20005
{
	Inventory.Icon "ICONRLR"
	Weapon.AmmoType "EOA_RocketAmmo"
	Weapon.AmmoUse 1
	Weapon.AmmoGive 2
	EOA_BaseWeapon.MeleeTics 28
	Inventory.PickupMessage "Rocket Launcher"
	Tag "Rocket Launcher"
	-SQUARESCALE
	States
	{
	Spawn:
		RKTL A -1
		Stop
	Select:
		TNT1 A 0 
		{
			SetPlayerProperty(0, 1, PROP_INSTANTWEAPONSWITCH);
			A_GiveInventory("RocketLauncherSelected");
			ACS_NamedExecuteAlways("RLRReticle", 0);
			A_SetCrosshair(99);
		}
		RLBI A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 3)
		RLDI A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2)
		RLNI A 0
		"####" A 1 A_Raise(60)
		Wait
	Deselect:
		TNT1 A 0 
		{
			A_TakeInventory("LockOnBurstFiring");
			A_TakeInventory("LockOnBurstChargeCounter");
			A_ClearLockTargets;
		}
		TNT1 A 0 
		{
			A_Overlay(-2, "Null");
			A_TakeInventory("RocketLauncherSelected");
			SetPlayerProperty(0, 0, PROP_INSTANTWEAPONSWITCH);
		}
		TNT1 A 4 A_SetTics(4 * !CountInv("Adept") * !CountInv("PowerBerserk"))
		RLBI A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 3)
		RLDI A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2)
		RLNI A 0
		"####" A 1 A_Lower(36)
		Wait
	Ready:
		TNT1 A 0
		{
			If (!(CountInv("LockOnBurstSwitch") || CountInv("RemoteDetonationSwitch")))
			{
				A_SpawnNoiseMaker("Weapon/Switch");
			}
		}
		RLBI A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 3)
		RLDI A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2)
		RLNI A 0
		"####" A 1 //ABCDEFGH 1 
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_NOBOB, EOA_ALLOWMANTLE|EOA_DISABLEHASTE);
			If (CountInv("LockOnBurstSwitch"))
			{
				A_TakeInventory("LockOnBurstSwitch");
				Return State ("LockOnBurstMod");
			}
			Else If (CountInv("RemoteDetonationSwitch"))
			{
				A_TakeInventory("RemoteDetonationSwitch");
				Return State ("RemoteDetonationMod");
			}
			Return State ("");
		}
		//"####" "#" 0 A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH|WRF_ALLOWRELOAD|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM))
		Goto ReadyLoop
	ReRaise:
		RLBR A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 3)
		RLDR A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2)
		RLNR A 0
		"####" CDEFGH 1 EOA_WeaponReady(WRF_NOFIRE|WRF_NOBOB, EOA_ALLOWMANTLE|EOA_DISABLEHASTE)//ABCDEFGH 1 
		//"####" "#" 0 A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH|WRF_ALLOWRELOAD|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM))
	ReadyLoop:
		RLBI A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 3)
		RLDI A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2)
		RLNI A 0
		"####" "#" 1 
		{
			EOA_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
			If (CountInv("LockOnBurstSwitch"))
			{
				A_TakeInventory("LockOnBurstSwitch");
				Return State ("SwitchToLockOnBurst");
			}
			Else If (CountInv("RemoteDetonationSwitch"))
			{
				A_TakeInventory("RemoteDetonationSwitch");
				Return State ("SwitchToRemoteDetonation");
			}
			Return State ("");
		}
		Loop
	Fire:
		RLBF A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 3)
		RLDF A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2)
		RLNF A 0
		"####" "#" 0 
		{
			A_SpawnNoiseMaker("RLR/Fire", 7);
			A_SpawnNoiseMaker("RLR/Add", 6, 0.5);
			If (CountInv("PowerQDMG"))
			{
				A_SpawnNoiseMaker("QuadDamage/Shot", 4, 1.0, 0, ATTN_NORM, 0, 18); //A_GiveInventory("QuadDamageShot");
			}
			EOA_FireBullets(0, 0, 1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ|FBF_USEAMMO, 32767, "EOA_Rocket", -1 + GetViewZ, 5 + GetRelVelY / 3);
			EOA_SetWeaponRecoilOffset(frandompick(-1.5, -1, 1, 1.5), -6, 0, 0.5);
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 64, 0, 8, 1, DYN_ADDITIVE);
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 64, 0, 8, 1, DYN_ATTENUATE);
			A_AlertMonsters;
		}
		"####" ABCDEFGHI 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE)
		RLBL A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 3)
		RLDL A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2)
		RLNL A 0
		"####" "#" 0 A_SpawnNoiseMaker("RLR/LoadStart", 5, 0.5)
		"####" AAAAAAAAA 1
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * ((CountInv("LockOnBurst") && CountInv("RemoteDetonation")) || ((CountInv("LockOnBurst") || CountInv("RemoteDetonation")) && (!CountInv("LockOnBurstSelected") && !CountInv("RemoteDetonationSelected"))))|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && CountInv("LockOnBurstSelected") && (CountInv("EOA_RocketAmmo") || CheckInfiniteAmmo) && CheckLockOn && !CountInv("LockOnBurstCooldownCounter"))
			{
				A_Overlay(-2, "LockCharge");
				Return State ("ReadyAlt");
			}
			Return State ("");
		}
		"####" "#" 0
		{
			A_SpawnNoiseMaker("RLR/LoadMed", 4, 0.5);
			A_SpawnNoiseMaker("RLR/Rotate", 3);
		}
		"####" BCDEFG 1
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * ((CountInv("LockOnBurst") && CountInv("RemoteDetonation")) || ((CountInv("LockOnBurst") || CountInv("RemoteDetonation")) && (!CountInv("LockOnBurstSelected") && !CountInv("RemoteDetonationSelected"))))|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && CountInv("LockOnBurstSelected") && (CountInv("EOA_RocketAmmo") || CheckInfiniteAmmo) && CheckLockOn && !CountInv("LockOnBurstCooldownCounter"))
			{
				A_Overlay(-2, "LockCharge");
				Return State ("ReadyAlt");
			}
			Return State ("");
		}		
		"####" HIJKLMN 1
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * ((CountInv("LockOnBurst") && CountInv("RemoteDetonation")) || ((CountInv("LockOnBurst") || CountInv("RemoteDetonation")) && (!CountInv("LockOnBurstSelected") && !CountInv("RemoteDetonationSelected"))))|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
			If (((GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ALTATTACK)) && CountInv("LockOnBurstSelected") && (CountInv("EOA_RocketAmmo") || CheckInfiniteAmmo) && CheckLockOn && !CountInv("LockOnBurstCooldownCounter"))
			{
				A_Overlay(-2, "LockCharge");
			}
		}
		"####" "#" 0 A_SpawnNoiseMaker("RLR/LoadEnd", 2, 0.5)
		Goto ReadyLoop
	ReadyAlt:
		RLBF FGHIJKLM 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT)
		Goto LockPrime
	AltFire:
		TNT1 A 0 
		{
			If (CountInv("LockOnBurstSelected") && (CountInv("EOA_RocketAmmo") || CheckInfiniteAmmo) && CheckLockOn && !CountInv("LockOnBurstCooldownCounter"))
			{
				Return State ("LockPrime");
			}
			Return State ("");
		}
		Goto ReadyLoop
	LockPrime:
		TNT1 A 0
		{
			A_TakeInventory("UnlockedFire");
			A_Overlay(-2, "LockCharge");
			A_SpawnNoiseMaker("RLR/LoadStart", 1, 0.5);
			A_SpawnNoiseMaker("RLR/Rotate", 2);
			A_SpawnNoiseMaker("RLR/LoadMed", 3);
		}
		RLB2 ABCD 2
		{
			EOA_WeaponReady(WRF_NOFIRE, EOA_WEAPSPEEDUPGRADE * CountInv("QuickLock"), 1);
			If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || !CountInv("LockOnBurstSelected") || CountInv("Grabbing_A_Ledge") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return State ("LockQuit");
			}
			Else If (CountInv("LockOnBurstChargeCounter") >= 32)
			{
				A_SpawnNoiseMaker("RLR/Locked", 1, 0.5);
				A_AcquireLockTargets;
				A_TakeInventory("LockOnBurstChargeCounter");
			}
			Return State ("");
		}
		TNT1 A 0 A_SpawnNoiseMaker("RLR/LockLoad1", 4, 1)
		RLB2 EFGH 2
		{
			EOA_WeaponReady(WRF_NOFIRE, EOA_WEAPSPEEDUPGRADE * CountInv("QuickLock"), 1);
			If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || !CountInv("LockOnBurstSelected") || CountInv("Grabbing_A_Ledge") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return State ("LockQuit");
			}
			Else If (CountInv("LockOnBurstChargeCounter") >= 32)
			{
				A_SpawnNoiseMaker("RLR/Locked", 1, 0.5);
				A_AcquireLockTargets;
				A_TakeInventory("LockOnBurstChargeCounter");
			}
			Return State ("");
		}
		TNT1 A 0 A_SpawnNoiseMaker("RLR/LockLoad2", 4, 1)
		RLB2 IJKL 2
		{
			EOA_WeaponReady(WRF_NOFIRE, EOA_WEAPSPEEDUPGRADE * CountInv("QuickLock"), 1);
			If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || !CountInv("LockOnBurstSelected") || CountInv("Grabbing_A_Ledge") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return State ("LockQuit");
			}
			Else If (CountInv("LockOnBurstChargeCounter") >= 32)
			{
				A_SpawnNoiseMaker("RLR/Locked", 1, 0.5);
				A_AcquireLockTargets;
				A_TakeInventory("LockOnBurstChargeCounter");
			}
			Return State ("");
		}
		TNT1 A 0 A_SpawnNoiseMaker("RLR/LockLoad3", 4, 1)
	LockWait:
		RLB2 B 1
		{
			EOA_WeaponReady(WRF_NOFIRE, EOA_DISABLEHASTE);
			If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || !CountInv("LockOnBurstSelected") || CountInv("Grabbing_A_Ledge") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return State ("LockQuit");
			}
			Else If (CountInv("LockOnBurstChargeCounter") >= 32)
			{
				A_SpawnNoiseMaker("RLR/Locked", 1, 0.5);
				A_AcquireLockTargets;
				A_TakeInventory("LockOnBurstChargeCounter");
				A_Overlay(-2, "Null");
				Return State ("LockReady");
			}
			Else If ((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && CountInv("LockTarget1"))
			{
				Return State ("LockFire");
			}
			Return State ("");
		}
		Wait
	LockCharge:
		TNT1 A 1 A_LockOn
		Wait
	LockReady:
		RLBI A 1
		{
			EOA_WeaponReady(WRF_NOFIRE);
			If (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK)
			{
				Return State ("LockFire");
			}
			Else If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) || !CountInv("LockOnBurstSelected") || CountInv("Grabbing_A_Ledge") || (CountInv("EquipmentTrigger") && CountInv("EquipmentCharge")))
			{
				Return State ("LockQuit");
			}
			Else If (CountInv("MultiTargeting") && !CountInv("LockTarget3"))
			{
				A_Overlay(-2, "LockCharge");
				Return State ("LockWait");
			}
			Return State ("");
		}
		Wait
	LockFire:
		RLBF AAA 3
		{
			A_TakeInventory("LockOnBurstChargeCounter");
			A_GiveInventory("LockOnBurstFiring");
			A_Overlay(-2, "Null");
			A_LockTarget1;
			If (!Tracer)
			{
				A_GiveInventory("UnlockedFire");
			}
			If (CountInv("UnlockedFire"))
			{
				A_SpawnNoiseMaker("RLR/Fire", 7);
			}
			Else
			{
				A_SpawnNoiseMaker("RLR/BurstFire", 7);
			}
			A_SpawnNoiseMaker("RLR/Add", 6, 0.5);
			If (CountInv("PowerQDMG"))
			{
				A_SpawnNoiseMaker("QuadDamage/Shot", 4, 1.0, 0, ATTN_NORM, 0, 18); //A_GiveInventory("QuadDamageShot");
			}
			EOA_FireBullets(0, 0, 1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ|FBF_USEAMMO, 32767, "EOA_HomingRocket", -1 + GetViewZ, 5 + GetRelVelY / 3);
			EOA_SetWeaponRecoilOffset(frandompick(0.5, 1), -4, 0, 0.25);
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 64, 0, 8, 1, DYN_ADDITIVE);
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 64, 0, 8, 1, DYN_ATTENUATE);
			A_TakeInventory("EOA_RocketAmmo", 1, TIF_NOTAKEINFINITE);
			A_AlertMonsters;
		}
		RLBF BCD 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE)
		TNT1 A 0 A_JumpIf(!CountInv("LockTarget2"), "LockEnd")
		TNT1 A 0 A_JumpIf(CountInv("EOA_RocketAmmo") || CheckInfiniteAmmo, 2)
		TNT1 A 0 A_SelectWeapon("EOA_Weapon", SWF_SELECTPRIORITY)
		Goto LockEnd
		RLBF BBB 3
		{
			A_LockTarget3;
			If (CountInv("UnlockedFire"))
			{
				A_SpawnNoiseMaker("RLR/Fire", 5);
			}
			Else
			{
				A_SpawnNoiseMaker("RLR/BurstFire", 5);
			}
			A_SpawnNoiseMaker("RLR/Add", 4, 0.5);
			If (CountInv("PowerQDMG"))
			{
				A_SpawnNoiseMaker("QuadDamage/Shot", 4, 1.0, 0, ATTN_NORM, 0, 18); //A_GiveInventory("QuadDamageShot");
			}
			EOA_FireBullets(0, 0, 1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ|FBF_USEAMMO, 32767, "EOA_HomingRocket", -1 + GetViewZ, 5 + GetRelVelY / 3);
			EOA_SetWeaponRecoilOffset(frandompick(0.5, 1), -4, 0, 0.25);
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 64, 0, 8, 1, DYN_ADDITIVE);
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 64, 0, 8, 1, DYN_ATTENUATE);
			A_TakeInventory("EOA_RocketAmmo", 1, TIF_NOTAKEINFINITE);
			A_AlertMonsters;
		}
		RLBF BCDE 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE)
		TNT1 A 0 A_JumpIf(!CountInv("LockTarget3"), "LockEnd")
		TNT1 A 0 A_JumpIf(CountInv("EOA_RocketAmmo") || CheckInfiniteAmmo, 2)
		TNT1 A 0 A_SelectWeapon("EOA_Weapon", SWF_SELECTPRIORITY)
		Goto LockEnd
	LockEnd:
		TNT1 A 0 
		{
			A_ClearLockTargets;
			A_TakeInventory("LockOnBurstFiring");
			A_TakeInventory("LockOnBurstChargeCounter");
			A_TakeInventory("UnlockedFire");
			If (!CountInv("UnlockedFire"))
			{
				A_GiveInventory("LockOnBurstCooldownCounter", 70);
			}
			If (!CountInv("LockOnBurstSelected"))
			{
				Return State ("LockQuit");
			}
			Return State ("");
		}
		RLBF FGHIJKLM 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE)
	LockQuit:
		TNT1 A 0 
		{
			A_Overlay(-2, "Null");
			A_ClearLockTargets;
			A_TakeInventory("LockOnBurstChargeCounter");
			EOA_WeaponReady(WRF_NOSECONDARY * (!CheckLockOn || CountInv("LockOnBurstCooldownCounter")), EOA_ALLOWMANTLE);
			If (CountInv("LockOnBurstSelected"))
			{
				A_SpawnNoiseMaker("RLR/LoadStart", 1, 0.5);
				A_SpawnNoiseMaker("RLR/Rotate", 2);
				A_SpawnNoiseMaker("RLR/LoadMed", 3);
			}
		}
		RLBS DCBA 2 
		{
			If (!CountInv("LockOnBurstSelected"))
			{
				Return State ("ReadyLoop");
			}
			EOA_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM)|WRF_NOPRIMARY * !CountInv("LockOnBurstCooldownCounter")|WRF_NOSECONDARY * (!CheckLockOn || CountInv("LockOnBurstCooldownCounter")), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
			Return State ("");
		}
		Goto ReadyLoop
	Reload:
		TNT1 A 0 A_JumpIf(CountInv("LockOnBurst") && !CountInv("LockOnBurstSelected"), "SwitchToLockOnBurst")
		TNT1 A 0 A_JumpIf(CountInv("RemoteDetonation") && !CountInv("RemoteDetonationSelected"), "SwitchToRemoteDetonation")
		Goto ReadyLoop
	SwitchToLockOnBurst:
		RLDR A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2)
		RLNR A 0
		"####" HGFEDCBA 1
	LockOnBurstMod:
		TNT1 A 0 
		{
			A_GiveInventory("LockOnBurstSelected");
			A_TakeInventory("RemoteDetonationSelected");
		}
		RLBM ABCDEFGHIJKLMN 1 EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		TNT1 A 0 A_SpawnNoiseMaker("LockOnBurst/Click", 5, 0.5)
		RLBM OOOOOOOOOOOOOOOO 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("RemoteDetonation")|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		TNT1 A 0 A_SpawnNoiseMaker("LockOnBurst/Attach", 6)
		RLBM PQRST 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("RemoteDetonation")|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		RLBM TTTTTTTTT 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("RemoteDetonation")|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		RLBM UVWXYZ 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("RemoteDetonation")|WRF_NOSWITCH, EOA_ALLOWMANTLE)
		Goto ReadyLoop
	SwitchToRemoteDetonation:
		RLBR A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 2)
		RLNR A 0
		"####" HGFEDCBA 1
	RemoteDetonationMod:
		TNT1 A 0 
		{
			A_GiveInventory("RemoteDetonationSelected");
			A_TakeInventory("LockOnBurstSelected");
		}
		RLDM ABCDEFGHIJKLMNO 1 EOA_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		TNT1 A 0 A_SpawnNoiseMaker("RemoteDetonation/Click", 5, 0.5)
		RLDM PPPPPPPPPPPPPPPP 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("LockOnBurst")|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		TNT1 A 0 A_SpawnNoiseMaker("RemoteDetonation/Attach", 6)
		RLDM QRSTU 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("LockOnBurst")|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		RLDM UUUUUUUUU 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("LockOnBurst")|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"))
		RLDM UVWXYZ 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD * CountInv("LockOnBurst")|WRF_NOSWITCH, EOA_ALLOWMANTLE)
		Goto ReadyLoop
	Zoom:
		RLBT A 0 A_JumpIfInventory("LockOnBurstSelected", 1, 3)
		RLDT A 0 A_JumpIfInventory("RemoteDetonationSelected", 1, 2)
		RLNT A 0
		"####" "#" 0
		Goto Super::Melee
	UseEquipment:
		"####" "#" 0
		Goto Super::UseEquipment
	}
}

ACTOR EOA_RocketSmokeTrail : FragGrenadeSmokeTrail
{
	States
	{
	Spawn:
		TNT1 A 1 
		{
			A_Warp(AAPTR_TRACER, 0, 0, 0, 0, WARPF_COPYVELOCITY|WARPF_COPYPITCH|WARPF_WARPINTERPOLATION|WARPF_COPYINTERPOLATION);
			If (!Tracer || (CountInv("RemoteDetonationTrigger", AAPTR_TRACER) && !CountInv("ExternalPayload", AAPTR_TARGET)))
			{
				Return State ("Null");
			}
			Else
			{
				Return State ("");
			}
		}
		Wait
	Death:
		TNT1 A 0 A_JumpIf(Tracer, "Spawn")
		Stop
	}
}

ACTOR EOA_Rocket : EOA_Projectile
{
	Projectile
	Scale 0.75
	Radius 9
	Height 6
	Speed 20
	Damage (120)
	Decal "BigScorch"
	+BLOODLESSIMPACT
	+EXTREMEDEATH
	+FORCERADIUSDMG
	+SKYEXPLODE
	States
	{
	Spawn:
		MICR A 0 NoDelay
		{
			A_SpawnItemEx("EOA_RocketSmokeTrail", 0, 0, 0, 0, 0, 0, 0, SXF_ORIGINATOR|SXF_SETTRACER|SXF_TRANSFERPOINTERS);
			A_PlaySound("Rocket/Fly", 4, 0.5, 1);
			If (CountInv("PowerQDMG", AAPTR_TARGET))
			{
				A_SpawnItemEx("QuadDamageFX2", 0, 0, 0, 0, 0, 0, 0, SXF_ORIGINATOR|SXF_TRANSFERPOINTERS|SXF_TRANSFERSCALE|SXF_SETTRACER|SXF_NOCHECKPOSITION);
			}
		}
		MICR A 1
		{
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 64, 0, 1, 1, DYN_ADDITIVE);
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 64, 0, 1, 1, DYN_ATTENUATE);
			A_GiveToTarget("RemoteDetonationTrigger");
			If ((GetPlayerInput(INPUT_BUTTONS, AAPTR_TARGET) & BT_ALTATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS, AAPTR_TARGET) & BT_ALTATTACK) && CountInv("RemoteDetonationSelected", AAPTR_TARGET) && CheckRocketLauncherReady && !CountInv("RipAndTear", AAPTR_TARGET))
			{
				A_TakeFromTarget("RemoteDetonationTrigger");
				A_GiveInventory("RemoteDetonationTrigger"); //Give this counter to the rocket itself.
				If (CountInv("ExternalPayload", AAPTR_TARGET))
				{
					A_ChangeFlag("NOCLIP", 1); 
					A_ChangeFlag("THRUACTORS", 1);
					A_SpawnItemEx("ExternalPayloadExplosion", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
					EOA_Explode(80, (160 + 100 * CountInv("RemoteDetonationTrigger")) * (1 + 0.2 * CountInv("ImprovedWarhead", AAPTR_TARGET)), XF_HURTSOURCE, 1, 0 /*72 * (1 + 0.2 * CountInv("ImprovedWarhead", AAPTR_TARGET))*/, 0.5);
					Return State ("Death");
				}
				Else
				{
					//[DoomKrakken]: Because the projectile technically didn't die, it can potentially collide with other actors, causing a "phantom" explosion to be "spontaneously" generated where the rocket supposedly died.  Set these flags so that this won't happen.
					A_ChangeFlag("NOCLIP", 1); 
					A_ChangeFlag("THRUACTORS", 1);
					Return State ("Death");
				}
			}
			Else
			{
				Return State ("");
			}
		}
		Wait
	ContinueFlight:
		MICR A 0 A_TakeInventory("RemoteDetonationTrigger")
		MICR A 1
		{
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 64, 0, 1, 1, DYN_ADDITIVE);
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 64, 0, 1, 1, DYN_ATTENUATE);
		}
		Wait
	Death:
		TNT1 AAAAA 0
		{
			If (CountInv("ImprovedWarhead", AAPTR_TARGET) && CountInv("RemoteDetonationTrigger"))
			{
				A_CustomMissile("BigExplosionTrail", 0, random(-3, 3), random(1, 360), 2, random(-10, 90));
			}
			Else
			{
				A_CustomMissile("ExplosionTrail", 0, random(-3, 3), random(1, 360), 2, random(-10, 90));
			}
		}
		TNT1 AAAAAAAAA 0 A_SpawnItemEx("EOA_GenericExplosionFX", 0, 0, 0, frandom(-3, 3), frandom(-3, 3), frandom(-3, 3), random(1, 360), SXF_TRANSFERSCALE)
		TNT1 A 3
		{
			A_TakeFromTarget("RemoteDetonationTrigger");
			A_Stop;
			A_SetScale((1.0 + 0.0625 * CountInv("RemoteDetonationTrigger")) * (1 + 0.2 * CountInv("ImprovedWarhead", AAPTR_TARGET) * CountInv("RemoteDetonationTrigger")));
			A_PlaySound("Rocket/Explode");
			If (!random(0, 2))
			{
				A_PlaySound("Rocket/Add", 0);
			}
			EOA_Explode(240, (160 + 10 * CountInv("RemoteDetonationTrigger")) * (1 + 0.2 * CountInv("ImprovedWarhead", AAPTR_TARGET)), XF_HURTSOURCE, 1, 0 /*72 * (1 + 0.2 * CountInv("ImprovedWarhead", AAPTR_TARGET))*/, 0.5);
			If (CountInv("JaggedShrapnel", AAPTR_TARGET) && CountInv("RemoteDetonationTrigger"))
			{
				A_PlaySound("RLR/Shrapnel", 0);
			}
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, (160 + 10 * CountInv("RemoteDetonationTrigger")) * (1 + 0.2 * CountInv("ImprovedWarhead", AAPTR_TARGET)), 0, 10, 1, DYN_ADDITIVE);
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, (160 + 10 * CountInv("RemoteDetonationTrigger")) * (1 + 0.2 * CountInv("ImprovedWarhead", AAPTR_TARGET)), 0, 10, 1, DYN_ATTENUATE);
		}
		TNT1 A 10 A_SpawnItemEx("EOA_RocketExplosion", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERSCALE|SXF_NOCHECKPOSITION)//The duration of the explosion.
		TNT1 A 90 A_SetHealth(0)//The remainder of 100 tics, after the first 10 passed...
		Stop
	Death.Sky:
		TNT1 A 1 A_TakeFromTarget("RemoteDetonationTrigger")
		Stop
	}
}

ACTOR RemoteDetonateWave //Sprite modified from Guncaster.
{
	Projectile
	Renderstyle "Add"
	Alpha 0.99
	Scale 0.3
	+FLATSPRITE
	+NOINTERACTION
	+DONTBLAST
	+DONTTHRUST
	States
	{
	Spawn:
		ROKT A 1 NoDelay Bright
		{
			A_FadeOut(0.10);
			A_SetScale(ScaleX + 0.1);
		}
		Wait
	}
}

ACTOR EOA_HomingRocket : EOA_Rocket
{
	Scale 0.5
	Radius 6
	Height 3
	Damage (120) //[DoomKrakken]: +30 more damage if it hits a monster with fewer than 300 default health or an Arch-Vile. :D 
	Speed 20
	Decal "Scorch"
	+SEEKERMISSILE
	+HITTRACER
	-SKYEXPLODE
	Var Float User_Weave[4];
	States
	{
	Spawn:
		MICR A 0 NoDelay
		{
			A_TransferPointer(AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_TRACER, AAPTR_TRACER);
			A_SpawnItemEx("EOA_RocketSmokeTrail", 0, 0, 0, 0, 0, 0, 0, SXF_ORIGINATOR|SXF_SETTRACER);
			A_PlaySound("Rocket/Fly", 4, 0.5, 1);
			If (CountInv("PowerQDMG", AAPTR_TARGET))
			{
				A_SpawnItemEx("QuadDamageFX2", 0, 0, 0, 0, 0, 0, 0, SXF_ORIGINATOR|SXF_TRANSFERPOINTERS|SXF_TRANSFERSCALE|SXF_SETTRACER|SXF_NOCHECKPOSITION);
			}
			A_SetUserArrayFloat("User_Weave", 0, frandom(4.0, 8.0));
			A_SetUserArrayFloat("User_Weave", 1, User_Weave[0]);
			A_SetUserArrayFloat("User_Weave", 2, frandom(-1.0, 1.0));
			A_SetUserArrayFloat("User_Weave", 3, User_Weave[2]);
		}
		MICR A 1
		{
			A_Weave(User_Weave[0], User_Weave[1], User_Weave[2], User_Weave[3]);
			A_SeekerMissile(60, 90, SMF_PRECISE);
			EOA_SpawnCustomDynamicLight("PointLight", 0.3, 0.1, 0.7, 64, 0, 1, 1, DYN_ADDITIVE);
			//EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 16, 0, 1, 1, DYN_ADDITIVE);
			EOA_SpawnCustomDynamicLight("PointLight", 1, 0.6, 0.3, 2, 0, 1, 1, DYN_ATTENUATE);
		}
		Wait
	Death:
		TNT1 A 10
		{
			A_Stop;
			A_PlaySound("Rocket/Explode");
			If (!random(0, 2))
			{
				A_PlaySound("Rocket/Add", 0);
			}
			A_SetScale(0.75);
			A_SpawnItemEx("EOA_RocketExplosion", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERSCALE|SXF_NOCHECKPOSITION);
			EOA_Explode(240, 64, XF_HURTSOURCE, 1, 20);
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 96, 0, 10, 1, DYN_ADDITIVE, False);
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 96, 0, 10, 1, DYN_ATTENUATE, False);
		}
		Stop
	}
}

/*ACTOR EOA_RocketExplosion
{
	+NOINTERACTION
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetScale(ScaleX * randompick(-1, 1) * 0.35, ScaleY * randompick(-1, 1) * 0.35)
		TNT1 AAAAAA 0 A_SpawnItemEx("EOA_RocketExplosionFX", frandom(-10, 10), frandom(-10, 10), frandom(-10, 10), 0, 0, 0, 0, SXF_TRANSFERSCALE|SXF_NOCHECKPOSITION)
		TNT1 AAAAAAAAAA 0 A_SpawnItemEx("EOA_ExplosionSmoke", frandom(-3, 3), frandom(-3, 3), frandom(-3, 3), frandom(-3, 3), frandom(-3, 3), frandom(-3, 3), random(1, 360), SXF_TRANSFERSCALE)
		Goto Null
	}
}*/

ACTOR EOA_ExplosionSmoke
{
	Speed 2
	Radius 4
	Height 4
	Alpha 0.45
	RenderStyle "Translucent"
	+NOINTERACTION
	Var Int User_Scale;
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetUserVar(User_Scale,ScaleX<<16)
		TNT1 A 0 A_Jump(256, random(1, 4))
		X037 ABCD 0 A_Jump(256, "Anim")
	Anim:
		"####" "#" 1
		{
			A_SetScale(ScaleX + User_Scale * 0.000000153);
			A_ScaleVelocity(0.96);
			A_FadeOut(0.0045);
		}
		Loop
	}
}

ACTOR EOA_RocketExplosion //FX
{
	+BRIGHT
	+FORCEXYBILLBOARD
	+NOINTERACTION
	+ROLLSPRITE
	+ROLLCENTER
	Renderstyle "Add"
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			A_SetRoll(frandom(0, 359));
			A_SetScale(ScaleX * randompick(-1, 1) * 0.4, ScaleY * randompick(-1, 1) * 0.4);
		}
		TNT1 A 0 A_Jump(256, "Anim1", "Anim2")
	Anim1:
		ZXP0 ACEGIKMOQSUWY 1
		ZXP1 ACEG 1
		Stop	
	Anim2:
		ZXP0 BDFHJLNPRTVXZ 1
		ZXP1 BDF 1
		TNT1 A 0
		Stop
	}
}

ACTOR ExplosionTrail
{
	Radius 0.5
	Height 1
	Speed 9
	Renderstyle "Add"
	Gravity 0.33
	Scale 1.5
	+CLIENTSIDEONLY
	+FORCEXYBILLBOARD
	+NOBLOCKMAP
	+DONTSPLASH
	+THRUACTORS
	+NOTRIGGER
	+NOBLOCKMONST
	+CANNOTPUSH
	+SERVERSIDEONLY
	+BRIGHT
	+MISSILE
	States
	{
	Spawn:
		NULL A 4 NoDelay 
		{
			A_ScaleVelocity(frandom(0.75, 1));
			A_SetScale(ScaleX * frandom(0.9, 1.33));
			A_SpawnItemEx("ExplosionTrail2", -VelX, -VelY, -VelZ, VelX, VelY, VelZ + 0.3, 0, SXF_ABSOLUTEVELOCITY|SXF_ABSOLUTEPOSITION|SXF_TRANSFERSCALE);
		}
		NULL A 1 A_FadeOut
		Wait
	}
}

ACTOR ExplosionTrail2 : ExplosionTrail
{
	Translation "0:255=%[0,0,0]:[1,0.33,0]"
	States
	{
	Spawn:
		NULL A 6
		NULL A 1 A_FadeOut
		Wait
	}
}

ACTOR BigExplosionTrail : ExplosionTrail
{
	Speed 11
	Scale 1.8
	States
	{
	Spawn:
		NULL A 4 NoDelay 
		{
			A_ScaleVelocity(frandom(0.75, 1));
			A_SetScale(ScaleX * frandom(0.9, 1.33));
			A_SpawnItemEx("ExplosionTrail2", -VelX, -VelY, -VelZ, VelX, VelY, VelZ + 0.3, 0, SXF_ABSOLUTEVELOCITY|SXF_ABSOLUTEPOSITION|SXF_TRANSFERSCALE);
		}
		NULL A 1 A_FadeOut
		Wait
	}
}

ACTOR ExternalPayloadExplosion : EOA_Projectile
{
	Radius 0
	Height 0
	Scale 1.2625
	RenderStyle "Add"
	+EXTREMEDEATH
	+FORCEXYBILLBOARD
	+FORCERADIUSDMG
	+DONTBLAST
	+DONTREFLECT
	States
	{
	Spawn:
		//TNT1 AAAAA 0 NoDelay A_CustomMissile("BigExplosionTrail", 0, random(-3, 3), random(1, 360), 2, random(-10, 90))
		TNT1 A 0 NoDelay A_SpawnItemEx("Remotedetonatewave", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_SETTARGET|SXF_NOCHECKPOSITION)
		TNT1 A 0 A_SpawnItemEx("EOA_GenericExplosionFX", 0, 0, 0, frandom(-3, 3), frandom(-3, 3), frandom(-3, 3), random(1, 360), SXF_TRANSFERSCALE)
		TNT1 A 0
		{
			A_Stop;
			A_PlaySound("Rocket/Explode");
			If (!random(0, 2))
			{
				A_PlaySound("Rocket/Add", 0);
			}
			If (CountInv("JaggedShrapnel", AAPTR_TARGET))
			{
				A_PlaySound("RLR/Shrapnel", 0);
			}
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 204, 0, 10, 1, DYN_ADDITIVE, False);
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 204, 0, 10, 1, DYN_ATTENUATE, False);
		}
		TNT1 A 0 A_SpawnItemEx("EOA_RocketExplosion", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERSCALE|SXF_NOCHECKPOSITION)
		Stop		
	}
}

ACTOR ShrapnelBleedItem : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0 
		{
			If (!bNOBLOOD) //All the monsters in DOOM can bleed, as well as those in Doom.
			{
				A_SpawnItemEx("ShrapnelDamager", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTRACER);
			}
		}
		Stop
	}
}

ACTOR ShrapnelDamager
{
	Var Int User_BleedTimer;
	Var Int User_NerfTics;
	+MISSILE
	+NOINTERACTION
	+NOCLIP
	+NOGRAVITY
	+PAINLESS //'Cuz monsters don't get stunlocked from shrapnel bleeding.  They don't in DOOM, they shouldn't in Doom.
	+NOEXTREMEDEATH //'Cuz it'd be weird if a monster just suddenly exploded into a mess of blood 'n gibs just from trickling blood... XD
	+NODAMAGETHRUST //'Cuz it'd be weird having the monster shimmy all over the place while bleeding... or would it? XD
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetUserVar("User_BleedTimer", 25)
		TNT1 A 0 A_JumpIfHealthLower(1, "Null", AAPTR_TRACER)
		TNT1 A 4
		{
			A_Warp(AAPTR_TRACER, 0, 0, 0, 0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE, 0, frandom(0.2, 0.8), frandom(-0.8, 0.8));
			If (CountInv("PowerIntimacyIsBestProtection", AAPTR_TRACER) || CountInv("PowerIntimacyIsBestIIProtection", AAPTR_TRACER))
			{
				If (User_NerfTics < 4)
				{
					User_NerfTics++;
				}
				Else
				{
					A_DamageTracer(2, 0, DMSS_NOPROTECT, "none", "none", AAPTR_TARGET);
					User_NerfTics = 0;
				}
			}
			Else
			{
				A_DamageTracer(2, 0, 0, "none", "none", AAPTR_TARGET);
			}
			A_SpawnItemEx("Blood", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERTRANSLATION);
			If (A_JumpIfHealthLower(1, "Null", AAPTR_TRACER) || User_BleedTimer <= 0)
			{
				Return State ("Null");
			}
			Else
			{
				User_BleedTimer--;
				Return State ("");
			}
		}
		Wait
	}
}

ACTOR ShrapnelBleeding : EOA_TempToken
{
	Powerup.Type "ShrapnelBleeding"
	Powerup.Duration -3
}

ACTOR PowerShrapnelBleeding : PowerEOA_TempToken{}
ACTOR SuperShotgunSelected : EOA_Token{}

//Improvements - These improve the Super Shotgun's capabilities.
ACTOR SSGUraniumCoating : EOA_Token{} //Shots penetrate enemies.
ACTOR FasterReload : EOA_Token{} //As it says on the label...

ACTOR MC_DoubleTrouble : EOA_Token{} //Kill multiple enemies with one shot 30 times.

ACTOR DoubleTrouble : EOA_Token{} //Mastery Upgrade - Fire twice before needing to reload (you can two fire full-power shots at half the ammo cost per shot before needing to reload).

ACTOR DoubleTroubleKillCounter1 : EOA_TempToken
{
	Powerup.Type "DoubleTroubleKillCounter1"
	Powerup.Duration 18
}

ACTOR ssgmeathook : inventory {Inventory.MaxAmount 1}

ACTOR DoubleTroubleKillCounter2 : EOA_TempToken
{
	Powerup.Type "DoubleTroubleKillCounter2"
	Powerup.Duration 18
}

ACTOR DoubleTroubleDampener : EOA_TempToken
{
	Powerup.Type "DoubleTroubleDampener"
	Powerup.Duration 18
}

ACTOR PowerDoubleTroubleKillCounter1 : PowerEOA_TempToken{}
ACTOR PowerDoubleTroubleKillCounter2 : PowerEOA_TempToken{}
ACTOR PowerDoubleTroubleDampener: PowerEOA_TempToken{}

ACTOR DoubleTroubleMasteryCounter : EOA_Token{Inventory.MaxAmount 30}

ACTOR SSGZoomCounter : EOA_Token{}
ACTOR SSGReloadCounter : EOA_Token{}
ACTOR SSGLoadedCounter : EOA_Token{}
ACTOR SSGEmptyChamberCounter : EOA_Token{}
ACTOR SSGShots : EOA_Token {Inventory.MaxAmount 2}

ACTOR SSGMods : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("SSGUraniumCoating");
			A_GiveInventory("FasterReload");
		}
		Stop
	}
}
ACTOR SSGUsingHook : EOA_Token{}
Actor GetOverThere : EOA_Token{}
ACTOR HookLockTarget : EOA_Token{}
ACTOR HookLockTarget1 : EOA_Token{}

ACTOR EOA_SuperShotgun : EOA_Weapon 20003
{
	Inventory.Icon "ICONSSG"
	Weapon.AmmoType "EOA_ShellAmmo"
	Weapon.AmmoUse 1
	Weapon.AmmoGive 20
	EOA_BaseWeapon.MeleeTics 32
	Inventory.PickupMessage "Super Shotgun"
	Tag "Super Shotgun"
	+SEMIAUTO
	//+NOAUTOFIRE
	States
	{
	Spawn:
		SSGW A -1
		Stop
	Select:
		TNT1 A 0 
		{
			SetPlayerProperty(0, 1, PROP_INSTANTWEAPONSWITCH);
			A_GiveInventory("SuperShotgunSelected");
			A_SetInventory("SSGShots", min(1 + CountInv("DoubleTrouble"), CountInv("EOA_ShellAmmo")));
			ACS_NamedExecuteAlways("SSGReticle", 0);
			A_SetCrosshair(99);
		}
		SSGI A 1 A_Raise(60)
		Wait
	Deselect:
		TNT1 A 0 
		{
			A_LockTarget1;
			A_LockTarget2;
			A_LockTarget3;
			A_TakeInventory("LockOnBurstFiring");
			A_TakeInventory("LockOnBurstChargeCounter");
			A_TakeInventory("UnlockedFire");
			A_TakeInventory("LockOnBurstCooldownCounter", 75);
			A_TakeInventory("LockOnBurstChargeCounter");
			A_ClearLockTargets;
		}
		TNT1 A 0 
		{
			A_ZoomFactor(1);
			A_TakeInventory("SSGReloadCounter");
			A_TakeInventory("SSGLoadedCounter");
			If (CountInv("SSGZoomCounter"))
			{
				A_TakeInventory("SSGZoomCounter");
				A_SpawnNoiseMaker("SSG/ZoomOut");
			}
		}
		TNT1 A 0 
		{
			A_TakeInventory("SuperShotgunSelected");
			SetPlayerProperty(0, 0, PROP_INSTANTWEAPONSWITCH);
		}
		TNT1 A 4 A_SetTics(4 * !CountInv("Adept") * !CountInv("PowerBerserk"))
		SSGI A 1 A_Lower(36)
		Wait
	Ready:
		TNT1 A 0 A_SpawnNoiseMaker("Weapon/Switch")
		SSGI A 1 EOA_WeaponReady(WRF_NOFIRE|WRF_NOBOB, EOA_ALLOWMANTLE|EOA_DISABLEHASTE)//ABCDEFGH 1
		//"####" "#" 0 A_WeaponReady(WRF_NOPRIMARY * !CountInv("SSGShots")|WRF_NOSECONDARY * CountInv("SSGZoomCounter")|WRF_NOBOB|WRF_NOSWITCH|WRF_ALLOWZOOM)
		Goto ReadyLoop
	ReRaise:
		TNT1 A 0 A_WeaponOffset(-144, 32)
		SSGR ABDEGH 1 //ABCDEFGH 1 
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_NOBOB, EOA_ALLOWMANTLE|EOA_DISABLEHASTE);
			A_WeaponOffset(24, 0, WOF_KEEPY|WOF_ADD);
		}
		//"####" "#" 0 A_WeaponReady(WRF_NOPRIMARY * !CountInv("SSGShots")|WRF_NOSECONDARY * CountInv("SSGZoomCounter")|WRF_NOBOB|WRF_NOSWITCH|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM))
	ReadyLoop:
		SSGI A 1
		{
			A_SpawnPersistentNoiseMaker(1, "", 7);
			A_StopSound(9);
			A_takeinventory("SSGUsingHook");
			A_giveinventory("Meathookshots", 3);
			If (!CountInv("SSGShots") && CountInv("EOA_ShellAmmo"))
			{
				Return State ("ReloadTransition");
			}
			A_TakeInventory("SSGLoadedCounter");
			EOA_WeaponReady(WRF_NOPRIMARY * (GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
			Return State ("");
		}
		Wait
	ReadyZoom:
		SSGZ E 1
		{
			If (CountInv("Grabbing_A_Ledge") || !(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK))
			{
				Return State ("ZoomOut");
			}
			Else If (!CountInv("SSGShots") && CountInv("EOA_ShellAmmo"))
			{
				Return State ("ReloadTransition");
			}
			EOA_WeaponReady(WRF_NOPRIMARY * (GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)|WRF_NOSECONDARY|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM));
			Return State ("");
		}
		Loop
	Fire:
		TNT1 A 0 A_JumpIf(CountInv("EOA_ShellAmmo") >= 2 - CountInv("DoubleTrouble") || CheckInfiniteAmmo, 2)
		TNT1 A 0 A_SelectWeapon("EOA_Weapon", SWF_SELECTPRIORITY)
		SSGF A 0 
		"####" "#" 0
		{
			A_SpawnPersistentNoiseMaker(1, "", 7);
			A_SpawnNoiseMaker("SSG/Fire", 2 * CountInv("SSGShots") - 1);
			If (CountInv("PowerQDMG"))
			{
				A_SpawnNoiseMaker("QuadDamage/Shot", 4, 1.0, 0, ATTN_NORM, 0, 18); //A_GiveInventory("QuadDamageShot");
			}
			A_AlertMonsters;
			A_TakeInventory("SSGShots", 2);
			EOA_FireBullets(16 - 6 * CountInv("SSGZoomCounter"), 4 - 1.5 * CountInv("SSGZoomCounter"), -1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ|FBF_USEAMMO, 32767, "SuperShotgunTracer", GetViewZ, 6 + GetRelVelY / 3);
			EOA_FireBullets(16 - 6 * CountInv("SSGZoomCounter"), 4 - 1.5 * CountInv("SSGZoomCounter"), 15, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ|FBF_USEAMMO, 32767, "SuperShotgunTracer", GetViewZ, 6 + GetRelVelY / 3);
			EOA_SetWeaponRecoilOffset(frandompick(-1, -0.5, 0.5, 1), -6, 0, 0.5);
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 48, 0, 8, 1, DYN_ADDITIVE);
			EOA_SpawnCustomDynamicLight("PulseLight", 1, 0.6, 0.3, 48, 0, 8, 1, DYN_ATTENUATE);
			If (!CountInv("SSGShots"))
			{
				A_GiveInventory("SSGReloadCounter");
			}
		}
		//"####" AAAAAAAAAAAAAA 0 EOA_FireBullets(15 / (1 + 0.5 * CountInv("SSGZoomCounter")), 3 / (1 + 0.5 * CountInv("SSGZoomCounter")), -1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ, 32767, "SuperShotgunTracer", GetViewZ, 7.5 + GetRelVelY / 3)
		"####" A 1 EOA_WeaponReady(WRF_NOFIRE, EOA_DISABLEHASTE)
		"####" BCDEFFFGHIJKL 1
		{
			If (CountInv("Grabbing_A_Ledge") && CountInv("SSGZoomCounter"))
			{
				A_SpawnNoiseMaker("SSG/ZoomOut", 0);
				A_ZoomFactor(1);
				A_TakeInventory("SSGZoomCounter");
			}
			EOA_WeaponReady(WRF_NOPRIMARY * !(CountInv("DoubleTrouble") && CountInv("SSGShots"))|WRF_NOPRIMARY * (GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)|WRF_NOSECONDARY, EOA_ALLOWMANTLE|EOA_DISABLEHASTE);
			If (!(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && CountInv("SSGZoomCounter") && CountInv("SSGShots"))
			{
				A_SpawnNoiseMaker("SSG/ZoomOut", 0);
				A_ZoomFactor(1);
				A_TakeInventory("SSGZoomCounter");
			}
			Else If (((GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ALTATTACK)) && !CountInv("SSGZoomCounter") && CountInv("SSGShots"))
			{
				A_SpawnNoiseMaker("SSG/ZoomIn", 0);
				A_ZoomFactor(1.25, ZOOM_NOSCALETURNING);
				A_GiveInventory("SSGZoomCounter");
			}
		}
		"####" A 0 A_JumpIf(CountInv("EOA_ShellAmmo") >= 2 - CountInv("DoubleTrouble") || CheckInfiniteAmmo, 2)
		"####" A 0 A_SelectWeapon("EOA_Weapon", SWF_SELECTPRIORITY)
		"####" A 0 A_JumpIfInventory("SSGShots", 1, 1)
		Goto SSGReload
		//"####" "#" 0 A_ReFire
		"####" L 1
		{
			If (CountInv("Grabbing_A_Ledge") && CountInv("SSGZoomCounter"))
			{
				A_ZoomFactor(1);
				A_TakeInventory("SSGZoomCounter");
				A_SpawnNoiseMaker("SSG/ZoomOut", 0);
			}
			EOA_WeaponReady(WRF_NOPRIMARY * (GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)|WRF_NOSECONDARY|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE);
		}
		"####" "#" 0 A_JumpIfInventory("SSGZoomCounter", 1, "ReadyZoom")
		Goto ReadyLoop
	ReloadTransition:
		SSGF L 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT|EOA_DISABLEHASTE)
	SSGReload:
		SSGL A 1
		{
			If (CountInv("SSGZoomCounter"))
			{
				A_ZoomFactor(1);
				A_TakeInventory("SSGZoomCounter");
				A_SpawnNoiseMaker("SSG/ZoomOut", 0);
			}
			A_SpawnNoiseMaker("SSG/Open", 7, 0.5);
			If (CountInv("SSGEmptyChamberCounter"))
			{
				A_TakeInventory("SSGEmptyChamberCounter");
			}
			Else
			{
				A_SpawnNoiseMaker("SSG/Eject", 6, 0.3);
				A_SpawnNoiseMaker("SSG/EjectShell", 5, 0.3);
				A_FireCustomMissile("EOA_EmptyShotShell2", -60 - abs(Pitch) / 2, 0, 1, 0, 0, 5 + Pitch / 2);
				A_FireCustomMissile("EOA_EmptyShotShell2", -60 - abs(Pitch) / 2, 0, 1, 0, 0, 5 + Pitch / 2);
			}
		}
		SSGL BCDEFGGG 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT|EOA_WEAPSPEEDUPGRADE * CountInv("FasterReload"))
		TNT1 A 0 
		{
			A_SpawnNoiseMaker("SSG/Load", 6, 0.5);
			A_SpawnNoiseMaker("SSG/LoadShell", 5, 0.5);
			A_TakeInventory("SSGReloadCounter");
			A_GiveInventory("SSGLoadedCounter");
			A_GiveInventory("SSGShots", 1 + CountInv("DoubleTrouble"));
		}
		SSGL HIJKLM 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT|EOA_WEAPSPEEDUPGRADE * CountInv("FasterReload")) /*II*/
		SSGL NOPQRS 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT|EOA_DISABLEHASTE)
		TNT1 A 0 
		{	
			A_SpawnNoiseMaker("SSG/Close", 7, 0.5);
			A_TakeInventory("SSGLoadedCounter");
		}
		SSGL TUVWXY 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT|EOA_WEAPSPEEDUPGRADE * CountInv("FasterReload"))
		SSGI AAAAAA 1 EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT|EOA_WEAPSPEEDUPGRADE * CountInv("FasterReload"))
		Goto ReadyLoop
		
	AltFire:
		TNT1 A 0
		{
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && !Countinv("SSGUsinghook"))
			{
				EOA_CheckMeatHook; 
			}
			If (CallACS("CheckForMeatHookTarget") == 1)
			{
				A_TakeInventory("UnlockedFire");
				A_Overlay(-2, "LockCharge");
				Return State ("FireHook");
			}
			Else
			{
				A_TakeInventory("GetOverThere",1,0,AAPTR_TRACER);
				Return State ("");
			}
		}
		Goto ReadyLoop
	LockCharge:
		TNT1 A 1 A_LockOn
		Wait
	FireHook:	
		TNT1 A 0 
		{
			//A_AcquireLockTargets;
			A_TakeInventory("LockOnBurstChargeCounter");
			A_GiveInventory("SSGUsingHook", 1);
			A_TakeInventory("GetOverThere", 1);
			A_PlaySound("HookFire", 8, 1);
		}
		TNT1 A 0 A_jumpif(countinv("doubletrouble"), 4)
		SGHF A 1 A_FireGrapple
		SGHF BCD 2 
		TNT1 A 0 A_jumpif(!countinv("doubletrouble"), 3)
		SGHF A 1 A_FireFlameGrapple
		SGHI A 1
		TNT1 A 0
		{
			A_SpawnPersistentNoiseMaker(1, "HookLoop", 7);
		}
	HookSSGLoop:
		TNT1 A 0
		{
			A_Overlay(-2, "Null");
			A_SpawnPersistentNoiseMaker(1, "HookLoop", 7, 1.0, 1);
		}
	HookSSGIdleLoop:
		SGHI A 1
		{
				If ((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK))
				{
					//A_LockTarget1;
					//A_LockTarget2;
					//A_LockTarget3;
					A_TakeInventory("LockOnBurstFiring");
					A_TakeInventory("LockOnBurstChargeCounter");
					A_TakeInventory("UnlockedFire");
					A_TakeInventory("LockOnBurstCooldownCounter", 75);
					A_ClearLockTargets;
					A_TakeInventory("LockOnBurstChargeCounter");
					Return State ("Fire"); 
				}
				Else If (!CountInv("SSGUsingHook"))
				{
					Return State ("HookEnd");
				}
				Else
				{
					Return State ("");
				}
		}
		Loop
	HookEnd:
		TNT1 A 0
		{
			A_TakeInventory("LockOnBurstChargeCounter");
			A_GiveInventory("LockOnBurstFiring");
			A_Overlay(-2, "Null");
			A_LockTarget1;
			A_LockTarget2;
			A_LockTarget3;
			A_TakeInventory("LockOnBurstFiring");
			A_TakeInventory("LockOnBurstChargeCounter");
			A_TakeInventory("UnlockedFire");
			If (!CountInv("UnlockedFire"))
			{
				A_GiveInventory("LockOnBurstCooldownCounter", 70);
			}
			A_ClearLockTargets;
			A_Overlay(-2, "Null");
			A_ClearLockTargets;
			A_TakeInventory("LockOnBurstChargeCounter");
			A_SpawnPersistentNoiseMaker(1, "", 7);
			A_SpawnPersistentNoiseMaker(1, "HookDet", 7);
		}
		SSGI A 1
		{
				A_ClearLockTargets;
				If ((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK))
				{
					Return State ("Fire"); 
				}
				Else
				{
					Return State ("");
				}
		}
		Goto ReadyLoop
	ZoomOut:
		"####" "#" 0
		{
			A_SpawnNoiseMaker("SSG/ZoomOut");
			A_ZoomFactor(1);
			A_TakeInventory("SSGZoomCounter");
		}
		SSGI A 1 EOA_WeaponReady(WRF_NOPRIMARY * !CountInv("SSGShots")|WRF_NOSECONDARY * !((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)), EOA_ALLOWMANTLE|EOA_DISABLEHASTE)
		Goto ReadyLoop
	Zoom:
		TNT1 A 0
		{
			If (!CountInv("SSGShots"))
			{
				A_GiveInventory("SSGEmptyChamberCounter");
			}
			If (CountInv("SSGZoomCounter"))
			{
				A_SpawnNoiseMaker("SSG/ZoomOut");
				A_ZoomFactor(1);
				A_TakeInventory("SSGZoomCounter");
			}
		}
		SGT3 A 0 A_JumpIfInventory("SSGLoadedCounter", 1, "CloseShotgun")
		SGT2 A 0 A_JumpIfInventory("SSGReloadCounter", 1, "CloseShotgun")
		Goto MeleeContinue
	CloseShotgun:
		"####" "#" 0 A_TakeInventory("SSGReloadCounter")
		"####" AB 1
		{
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM))
			{
				EOA_CheckGloryKill; //A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			}
			If (CountInv("RipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				Return State ("GloryKill");
			}
			Else
			{
				Return State ("");
			}
		}
		"####" C 1
		{
			A_SpawnNoiseMaker("SSG/Close", 7, 0.5);
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM))
			{
				EOA_CheckGloryKill; //A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			}
			If (CountInv("RipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				Return State ("GloryKill");
			}
			Else
			{
				Return State ("");
			}
		}
		"####" D 1
		{
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM))
			{
				EOA_CheckGloryKill; //A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			}
			If (CountInv("RipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				Return State ("GloryKill");
			}
			Else
			{
				Return State ("");
			}
		}
		SSGI A 1
		{
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM))
			{
				EOA_CheckGloryKill; //A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			}
			If (CountInv("RipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				Return State ("GloryKill");
			}
			Else
			{
				Return State ("");
			}
		}
		Goto Super::Melee+2
	MeleeContinue:
		SSGI A 0 
		Goto Super::Melee
	CloseShotgun2:
		"####" "#" 0 A_TakeInventory("SSGReloadCounter")
		"####" AB 1
		"####" C 1
		{
			A_SpawnNoiseMaker("SSG/Close", 7, 0.5);
			If (!CountInv("SSGShots"))
			{
				A_GiveInventory("SSGEmptyChamberCounter");
			}
		}
		"####" D 1
		SSGI A 1
		Goto Super::UseEquipment+2
	UseEquipment:
		"####" "#" 0
		Goto Super::UseEquipment
	}
}

ACTOR SuperShotgunTracer : CombatShotgunTracer
{
	Damage (16)
	EOA_Projectile.PuffType "SuperShotgunPuff"
	EOA_Projectile.PointBlankDamage 30
	EOA_Projectile.PBDamageFalloffDistStart 240
	EOA_Projectile.PBDamageFalloffDistEnd 290
	EOA_Projectile.MaxDamage 24
	EOA_Projectile.DamageFalloffDistStart 340
}

ACTOR SuperShotgunPuff : CombatShotgunPuff
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			If (CountInv("SSGUraniumCoating", AAPTR_TARGET))
			{
				A_SetTranslation("Silver");
			}
		}
		Goto Super::Spawn
	}
}

ACTOR EOA_EmptyShotShell2 : EOA_EmptyShotShell
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_ChangeVelocity(frandom(0.0, 2.0), frandom(0.0, 2.0), frandom(0.0, 2.0), CVF_RELATIVE)
		Goto Super::SpawnLoop
	}
}

Actor Meathookshot : EOA_Token {}
Actor Meathookshots : EOA_Token {Inventory.MaxAmount 3}

ACTOR ChainsawSelected : EOA_Token{}
ACTOR ChainsawGloryKillCounter : EOA_KillCounter{}
ACTOR ChainsawFuelCounter : EOA_Token{Inventory.MaxAmount 3}
ACTOR ChainsawRipAndTear : EOA_Token{}
ACTOR BloodCounter : EOA_Token{}

ACTOR EOA_Chainsaw : EOA_Weapon replaces Chainsaw 20000
{
	Inventory.Icon "ICONSAW"
	Weapon.AmmoType "EOA_FuelAmmo"
	Weapon.AmmoUse 0
	Weapon.AmmoGive 3
	Inventory.PickupMessage "Chainsaw"
	Tag "Chainsaw"
	+POWERWEAPON
	States
	{
	Spawn:
		CHSW A -1 /*NoDelay
		{
			If (A_CheckFlag("DROPPED", "Null"))
			{
				A_DropItem("EOA_FuelAmmo", -1);
				Return State ("Null");
			}
			Else
			{
				Return State ("");
			}
		}*/
		Stop
	Select:
		TNT1 A 0
		{
			SetPlayerProperty(0, 1, PROP_INSTANTWEAPONSWITCH);
			A_GiveInventory("ChainsawSelected");
			//ACS_NamedExecuteAlways("ChainsawReticle", 0);
			A_SetCrosshair(99);
		}
		TNT1 A 1 A_Raise(60)
		Wait
	Deselect:
		SCSB A 0 A_JumpIfInventory("BloodCounter", 1, 2)
		SCSN A 0
		"####" A 0
		{
			A_DestroyPersistentNoiseMaker(1, True);
			A_DestroyPersistentNoiseMaker(2);
			A_WeaponOffset(0, 32);
			A_TakeInventory("ChainsawSelected");
			SetPlayerProperty(0, 0, PROP_INSTANTWEAPONSWITCH);
			If (!CountInv("EOA_FuelAmmo"))
			{
				Return State ("DeselectEmpty");
			}
			Else
			{
				Return State ("");
			}
		}
		"####" AAAABBBB 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"));
			A_WeaponOffset(0, 16, WOF_KEEPX|WOF_ADD);
		}
	DeselectLoop:
		TNT1 A 4 A_SetTics(4 * !CountInv("Adept") * !CountInv("PowerBerserk"))
		TNT1 A 1 A_Lower(36)
		Wait
	DeselectEmpty:
		"####" AAAAAAAA 1
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_DISABLEHASTE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"));
			A_WeaponOffset(0, 16, WOF_KEEPX|WOF_ADD);
		}
		Goto DeselectLoop
	Ready:
		TNT1 A 0 A_SpawnNoiseMaker("Weapon/Switch")
		TNT1 A 0 
		{
			A_WeaponOffset(0, 160);
			If (!CountInv("EOA_FuelAmmo"))
			{
				Return State ("EmptyRaise");
			}
			Else
			{
				A_SpawnPersistentNoiseMaker(1, "Chainsaw/Idle", 1, 0.5, 1);
				//A_SpawnPersistentNoiseMaker(2, "Chainsaw/Roar", 3);
				A_WeaponOffset(0, 160);
				Return State ("");
			}
		}
		SCSB A 0 A_JumpIfInventory("BloodCounter", 1, 2)
		SCSN A 0
		"####" ABABABAB 1 
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_DISABLEHASTE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"));
			A_WeaponOffset(0, -16, WOF_KEEPX|WOF_ADD);
		}		
		Goto SlowDown
	ReRaise:
		TNT1 A 0 
		{
			A_WeaponOffset(0, 160);
			If (!CountInv("EOA_FuelAmmo") && !GetCVar("SV_InfiniteAmmo"))
			{
				A_SpawnPersistentNoiseMaker(1, "", 1);
				Return State ("EmptyReRaise");
			}
			Else
			{
				A_SpawnPersistentNoiseMaker(1, "Chainsaw/Idle", 1, 0.5, 1);
				Return State ("");
			}
		}
		SCSB A 0 A_JumpIfInventory("BloodCounter", 1, 2)
		SCSN A 0
		"####" ABABABAB 1 
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_NOSWITCH, EOA_ALLOWMANTLE|EOA_DISABLEHASTE);
			A_WeaponOffset(0, -16, WOF_KEEPX|WOF_ADD);
		}		
	SlowDown:
		"####" "#" 0 A_SpawnPersistentNoiseMaker(1, "Chainsaw/Idle", 1, 0.5, 1)
		"####" ABABABABABABABAAABBBAAABBBAAABBB 1
		{
			EOA_WeaponReady(WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT|EOA_DISABLEHASTE);
			A_WeaponOffset(frandom(-1, 1), frandom(32, 34));
		}
	ReadyLoop:
		SCSB A 0 A_JumpIfInventory("BloodCounter", 1, 2)
		SCSN A 0
		"####" AAAAABBBBB 1 
		{
			If (!CountInv("EOA_FuelAmmo") && !GetCVar("SV_InfiniteAmmo"))
			{
				Return State ("Empty");
			}
			EOA_WeaponReady(WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT|EOA_DISABLEHASTE);
			A_WeaponOffset(frandom(-1, 1), frandom(32, 34));
			Return State ("");
		}
		Loop
	EmptyRaise:
		SCSB A 0 A_JumpIfInventory("BloodCounter", 1, 2)
		SCSN A 0
		"####" AAAAAAAA 1 
		{
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE, EOA_ALLOWMANTLE|EOA_DISABLEHASTE|EOA_WEAPSPEEDUPGRADE * CountInv("Adept"));
			A_WeaponOffset(0, -16, WOF_KEEPX|WOF_ADD);
		}		
		Goto Empty
	EmptyReRaise:
		SCSB A 0 A_JumpIfInventory("BloodCounter", 1, 2)
		SCSN A 0
		"####" AAAAAAAA 1 
		{
			A_WeaponOffset(0, -16, WOF_KEEPX|WOF_ADD);
			EOA_WeaponReady(WRF_NOBOB|WRF_NOFIRE, EOA_ALLOWMANTLE|EOA_DISABLEHASTE);
		}		
	Empty:
		SCSB A 0 A_JumpIfInventory("BloodCounter", 1, 2)
		SCSN A 0
		"####" A 1
		{
			A_WeaponOffset(0, 32);
			If (CountInv("EOA_FuelAmmo") || GetCVar("SV_InfiniteAmmo"))
			{
				A_SpawnPersistentNoiseMaker(1, "Chainsaw/Idle", 1, 0.5, 1);
				A_SpawnPersistentNoiseMaker(2, "Chainsaw/Roar", 3, 0.5);
				Return State ("ReadyLoop");
			}
			EOA_WeaponReady(WRF_NOFIRE|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT);
			Return State ("");
		}
		Loop
	Fire:
		TNT1 A 0 
		{
			A_AlertMonsters;
			A_SpawnPersistentNoiseMaker(1, "Chainsaw/Use", 1, 0.5, 1);
			A_SpawnPersistentNoiseMaker(2, "Chainsaw/Roar", 3, 0.5);
		}
	ReFire:
		SCSB A 0 A_JumpIfInventory("BloodCounter", 1, 2)
		SCSN A 0
		"####" A 0
		{
			A_WeaponOffset(frandom(-2, 2), frandom(32, 36));
			EOA_WeaponReady(WRF_NOFIRE);
			A_CustomPunch(0, 0, CPF_NOTURN, "ChainsawGloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			A_CustomPunch(0, 1, CPF_NOTURN, "ChainsawPuff");
			If (CountInv("ChainsawRipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				A_GunFlash("Null");
				Return State ("ChainsawGloryKill");
			}
			Else
			{
				If (CountInv("ChainsawWallHit"))
				{
					A_SpawnPersistentNoiseMaker(2, "Chainsaw/MetalLoop", 5, 1.0, 1);
					A_SpawnPersistentNoiseMaker(2, "Chainsaw/MetalLoop", 6, 1.0, 1);
				}
				Else
				{
					A_SpawnPersistentNoiseMaker(2, "", 5);
					A_SpawnPersistentNoiseMaker(2, "", 6);
				}
				Return State ("");
			}
		}
		"####" CD 1
		"####" "#" 0 A_ReFire("ReFire")
		"####" "#" 0
		{
			A_SpawnPersistentNoiseMaker(1, "", 1);
			A_SpawnPersistentNoiseMaker(2, "Chainsaw/Down", 3, 0.5);
			A_SpawnPersistentNoiseMaker(2, "", 5);
			A_SpawnPersistentNoiseMaker(2, "", 6);
		}
		Goto SlowDown
	ChainsawGloryKill:
		TNT1 A 0
		{
			A_SpawnPersistentNoiseMaker(2, "", 5);
			A_SpawnPersistentNoiseMaker(2, "", 6);
			SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
			A_ChangeFlag("NOTARGET", 1);
			A_ChangeFlag("NOPAIN", 1);
			A_ChangeFlag("NODAMAGE", 1);
			If (A_CheckFlag("NOGRAVITY", "Null", AAPTR_TRACER))
			{
				A_ChangeFlag("NOGRAVITY", 1);
			}
			If (CountInv("SeekAndDestroySelected"))
			{
				A_SpawnNoiseMaker("Rune/SeekAndDestroy", 0);
			}
		}
	ChainsawGloryTravel:
		TNT1 A 1
		TNT1 A 0 A_Warp(AAPTR_MASTER, 0, 0, 0, 0, WARPF_TESTONLY, "ChainsawGloryTravel") //[DoomKrakken]: The projectile itself has us do the warp.  This is here, doing the same thing, except it merely tests the very same conditions for the warp.  This way, it'll remain idle here until the warp fails.
		TNT1 A 1
		{
			A_SetPitch(0, SPF_INTERPOLATE);
			A_TakeInventory("PowerStaggered", 0, 0, AAPTR_TRACER);
			A_TransferPointer(AAPTR_DEFAULT, AAPTR_TRACER, AAPTR_DEFAULT, AAPTR_TARGET);
			A_WeaponOffset(-64, 160);
			A_Stop;
		}
		TNT1 A 0
		{
			If (CountInv("SavagerySelected"))
			{
				A_SpawnNoiseMaker("Rune/Savagery", 0);
				If (!CountInv("SavageryII") && SavageryQueue)
				{
					A_GiveInventory("SavageryChallengeCounter");
					A_GiveInventory("MasteryTicker");
				}
			}
			If (CountInv("SeekAndDestroySelected") && !CountInv("SeekAndDestroyII"))
			{
				A_GiveInventory("SeekAndDestroyChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("BloodFueledSelected") && !CountInv("BloodFueledII") && CountInv("PowerBloodFueledSpeed"))
			{
				A_GiveInventory("BloodFueledChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("SavingThrowSelected") && !CountInv("SavingThrowII") && CountInv("PowerSavingThrow"))
			{
				A_GiveInventory("SavingThrowChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
			If (CountInv("InFlightMobilitySelected") && !CountInv("InFlightMobilityII") && !CheckOnGround)
			{
				A_GiveInventory("InFlightMobilityChallengeCounter");
				A_GiveInventory("MasteryTicker");
			}
		}
		SCSB A 0 A_JumpIfInventory("BloodCounter", 1, 2)
		SCSN A 0
		"####" EFEF 1 A_WeaponOffset(16, -32, WOF_ADD)
		"####" "#" 0 A_SpawnPersistentNoiseMaker(2, "Chainsaw/Stab", 1)
		"####" EFEFEFEFEFEFEFEFEFEF 1
		{
			A_WeaponOffset(frandom(-2, 2), frandom(32, 36));
			A_CustomPunch(0, 1, CPF_NOTURN, "EOA_MeleePuff", 192);
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		"####" EFEFEFEFEF 1
		{
			A_SetTics(1 - CountInv("SavagerySelected"));
			A_WeaponOffset(frandom(-2, 2), frandom(32, 36));
			A_CustomPunch(0, 1, CPF_NOTURN, "EOA_MeleePuff", 192);
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		"####" EFEFEFEFEF 1
		{
			A_SetTics(1 - (CountInv("SavagerySelected") && CountInv("SavageryII")));
			A_WeaponOffset(frandom(-2, 2), frandom(32, 36));
			A_CustomPunch(0, 1, CPF_NOTURN, "EOA_MeleePuff", 192);
			A_GiveInventory("GloryPunched", 1, AAPTR_TRACER);
		}
		"####" "#" 0 
		{
			A_GiveInventory("GloryKilled", 1, AAPTR_TRACER);
		}
		"####" CDCDCDCD 1 A_WeaponOffset(8, 16, WOF_ADD)
		"####" "#" 0
		{
			A_SpawnPersistentNoiseMaker(2, "Chainsaw/Down", 3, 0.5);
			SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
			A_ChangeFlag("NOPAIN", 0);
			A_ChangeFlag("NODAMAGE", 0);
			A_ChangeFlag("NOGRAVITY", 0);
			A_TakeInventory("ChainsawRipAndTear");
			A_TakeInventory("DeathFromAbove");
			If (!GetCVar("SV_InfiniteAmmo")) //MAD HACX for those who are into that sort of thing... ;)
			{
				A_TakeInventory("EOA_FuelAmmo", CountInv("ChainsawFuelCounter"));
			}
			A_TakeInventory("ChainsawFuelCounter");
			A_GiveInventory("BloodCounter");
			If (CountInv("ArmoredOffensiveSelected"))
			{
				A_SpawnNoiseMaker("Rune/ArmoredOffensive", 0);
			}
			If (CountInv("BloodFueledSelected"))
			{
				A_SpawnNoiseMaker("Rune/BloodFueled", 0);
				If (CountInv("BloodFueledII"))
				{
					A_GiveInventory("ExtendedBloodFueledSpeed");
				}
				Else
				{
					A_GiveInventory("BloodFueledSpeed");
				}
			}
		}
		TNT1 A 1
		{
			If (CountInv("EOA_FuelAmmo")<1)
			{
				A_GiveInventory("ChainsawCooldownToken",20);
				ACS_NamedExecuteAlways("ChainsawCooldown");
			}
		}	
		Goto ReRaise
	Zoom:
		SCSB "#" 0 A_JumpIfInventory("BloodCounter", 1, 2)
		SCSN "#" 0
		"####" "#####" 1
		{
			If ((GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM))
			{
				A_CustomPunch(0, 1, CPF_NOTURN, "GloryKillChecker", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
			}
			If (CountInv("RipAndTear"))
			{
				A_FireCustomMissile("EOA_GKSeeker", 0, 0, 0, 0);
				A_CustomPunch(0, 1, 0, "EOA_NullPuff2", 192 * ((1 + CountInv("SeekAndDestroySelected")) * (1 + (CountInv("SeekAndDestroySelected") && CountInv("SeekAndDestroyII")))));
				A_GunFlash("Null");
				Return State ("GloryKill");
			}
			Else
			{
				Return State ("");
			}
		}
		"####" "#" 0 A_GunFlash("MeleeAttack", GFF_NOEXTCHANGE)
		Goto Budge
	UseEquipment:
		Goto Super::UseEquipment
	}
}

ACTOR ChainsawGloryKillChecker : EOA_NullPuff2
{
	+HITTRACER
	+ALLOWTHRUFLAGS
	+THRUGHOST
	States
	{
	Spawn:
	Crash:
	Death:
	XDeath:
		TNT1 A 0 NoDelay
		{
			If (A_CheckFlag("ISMONSTER", "Null", AAPTR_TRACER) && !(A_CheckFlag("BOSS", "Null", AAPTR_TRACER) && CallACS("GetMaxTracerHealth") >= 3000) && !A_CheckFlag("DORMANT", "Null", AAPTR_TRACER) && !CheckClass("EOA_HologramProjection", AAPTR_TRACER) && !CheckClass("Baronofhell", AAPTR_TRACER)&& !CheckClass("LostSoul", AAPTR_TRACER))
			{
				If (GetCVar("SV_InfiniteAmmo")) //[DoomKrakken]: For dem mad haxxors.  Might as well make everything that uses ammo truly infinite. :D
				//Just remember that it won't work with Rich Get Richer. ;)
				{
					A_TransferPointer(AAPTR_TRACER, AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_TRACER);
					A_GiveToTarget("ChainsawRipAndTear");
					A_GiveInventory("Staggered", 1, AAPTR_TRACER);
					A_GiveInventory("ChainsawGloryKillCounter", 1, AAPTR_TRACER);
					A_GiveInventory("GloryKillPrimer", 1, AAPTR_TRACER);
				}
				Else If (CallACS("GetMaxTracerHealth") >= 1000 && CountInv("EOA_FuelAmmo", AAPTR_TARGET) >= 3)
				{
					A_TransferPointer(AAPTR_TRACER, AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_TRACER);
					A_GiveToTarget("ChainsawRipAndTear");
					A_GiveInventory("Staggered", 1, AAPTR_TRACER);
					A_SetInventory("ChainsawFuelCounter", 3, AAPTR_TARGET, False);
					A_GiveInventory("ChainsawGloryKillCounter", 1, AAPTR_TRACER);
					A_GiveInventory("GloryKillPrimer", 1, AAPTR_TRACER);
				}
				Else If (CallACS("GetMaxTracerHealth") < 1000 && CallACS("GetMaxTracerHealth") >= 300 && CountInv("EOA_FuelAmmo", AAPTR_TARGET) >= 2)
				{
					A_TransferPointer(AAPTR_TRACER, AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_TRACER);
					A_GiveToTarget("ChainsawRipAndTear");
					A_GiveInventory("Staggered", 1, AAPTR_TRACER);
					A_SetInventory("ChainsawFuelCounter", 2, AAPTR_TARGET, False);
					A_GiveInventory("ChainsawGloryKillCounter", 1, AAPTR_TRACER);
					A_GiveInventory("GloryKillPrimer", 1, AAPTR_TRACER);
				}
				Else If (CallACS("GetMaxTracerHealth") < 300 && CountInv("EOA_FuelAmmo", AAPTR_TARGET) >= 1)
				{
					A_TransferPointer(AAPTR_TRACER, AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_TRACER);
					A_GiveToTarget("ChainsawRipAndTear");
					A_GiveInventory("Staggered", 1, AAPTR_TRACER);
					A_SetInventory("ChainsawFuelCounter", 1, AAPTR_TARGET, False);
					A_GiveInventory("ChainsawGloryKillCounter", 1, AAPTR_TRACER);
					A_GiveInventory("GloryKillPrimer", 1, AAPTR_TRACER);
				}
			}
		}
		Stop
	}
}

ACTOR ChainsawPuff
{
	+NOINTERACTION
	+PUFFGETSOWNER
	+CLIENTSIDEONLY
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_GiveToTarget("ChainsawWallHit");
		}
		TNT1 AAA 1
		{
			A_SpawnItemEx("ChaingunPuffSpark", 0, 0, 0, frandom(3, 6), 0, frandom(5, 6), -90 + frandom(-5, 5));
			A_SpawnItemEx("ChaingunPuffSpark", 0, 0, 0, frandom(3, 6), 0, frandom(5, 6), -90 + frandom(-5, 5));
			A_SpawnItemEx("ChaingunPuffSpark", 0, 0, 0, frandom(3, 6), 0, frandom(5, 6), -90 + frandom(-5, 5));
		}
		Stop

	}
}

ACTOR ChainsawWallHit : PowerEOA_TempToken
{
	+ALWAYSPICKUP
	+AUTOACTIVATE
	Powerup.Duration 5
}

ACTOR ChainsawWallSoundDampener : PowerEOA_TempToken
{
	+ALWAYSPICKUP
	+AUTOACTIVATE
	Powerup.Duration 5
}

ACTOR ChainsawWallGrind
{
	Radius 1
	Height 1
	+NOGRAVITY
	+NOBLOCKMAP
	+NOTIMEFREEZE
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			If (!CountInv("ChainsawWallHit", AAPTR_TARGET) || CountInv("ChainsawWallSoundDampener", AAPTR_TARGET))
			{
				Return State ("Null");
			}
			A_GiveToTarget("ChainsawWallSoundDampener");
			Return State ("Playing");
		}
	Playing:
		TNT1 A 1
		{
			If (!CountInv("ChainsawWallHit", AAPTR_TARGET))
			{
				Return State ("Null");
			}
			A_PlaySound("Chainsaw/MetalLoop", 5, 1.0, 1);
			A_PlaySound("Chainsaw/MetalLoop", 6, 1.0, 1);
			A_Warp(AAPTR_TARGET, 16, 0, 32, 0, WARPF_NOCHECKPOSITION);
			Return State ("");
		}
		Wait
	Null:
		TNT1 A 1 
		{
			A_TakeFromTarget("ChainsawWallHit");
			A_TakeFromTarget("ChainsawWallSoundDampener");
		}
		Stop
	}
}
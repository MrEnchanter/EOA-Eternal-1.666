version "4.0"
#include "Zscript/Constants.txt"
#include "Zscript/EOA/Weapons/DECrucible.txt"
#include "Zscript/EOA/Weapons/Unmaykr.txt"
#include "Zscript/EOA/Items/ExtraLives.txt"
#include "Zscript/EOA/Items/RadSuit.txt"
#include "Zscript/EOA/CMenu.txt"
#include "Zscript/EOA/Menu/BaseMenu.zsc"
#include "Zscript/EOA/Menu/Element.zsc"
#include "Zscript/EOA/Menu/Button.zsc"
#include "Zscript/EOA/Menu/BoxTextures.zsc"
#include "Zscript/EOA/Menu/BoundingBox.zsc"
#include "Zscript/EOA/Menu/Frame.zsc"
#include "Zscript/EOA/Menu/Label.zsc"
#include "Zscript/EOA/Menu/Handler.zsc"
#include "Zscript/EOA/Menu/Image.zsc"
#include "Zscript/EOA/Menu/BoxImage.zsc"
#include "Zscript/EOA/Menu/UiEvent.zsc"

//constants so i can tweak things easily
const dd_restockdelay=45;
const dd_nogravtime=10;
const dd_boostforce=30;

Class FlameSSGGrapple : Actor
{
	Default
	{
		Projectile;
		Speed 55;
		Radius 5;
		Height 10;
		+SKYEXPLODE
		+HITTRACER
		+BLOODLESSIMPACT
		+PAINLESS
		+SEEKERMISSILE
		MeleeRange 10000;
	}
	Override Void Tick()
	{
		Super.Tick();
		If(!Level.IsFrozen())
		{
			A_TransferPointer(AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_TRACER, AAPTR_TRACER);
			A_SeekerMissile(90, 90, SMF_PRECISE);
			If(!Target || !Master || !tracer && special1 || tracer && tracer.health<1)
			{
				If((!tracer && special1 || tracer && tracer.health<1) && Master)
				Master.Special2=-18;
				Destroy();
				Return;
			}
			If(Tracer)
			{
				A_Warp(AAPTR_TRACER,heightoffset:0.5);
			}
		}
	}
	States
	{
	Spawn:
		CLAW A -1 Bright;
		Stop;
	Death:
		CLAW A -1
		{
			A_Spawnitem("FlameBelchProjectile", 0, 0, 0, 0);
			Height=0;
			If(!Tracer)
			{ Destroy(); Return; }
			special1=1;
			If(Target)
			{
				Target.A_PlaySound("Projectile/HitFlesh",CHAN_5);
				A_PlaySound("Projectile/HitFlesh",CHAN_6);
			}
		}
	}
}

Class SSGGrapple : Actor
{
	Default
	{
		Projectile;
		Speed 55;
		Radius 5;
		Height 10;
		+SKYEXPLODE
		+HITTRACER
		+BLOODLESSIMPACT
		+PAINLESS
		+SEEKERMISSILE
		MeleeRange 10000;
	}
	Override Void Tick()
	{
		Super.Tick();
		If(!Level.IsFrozen())
		{
			A_TransferPointer(AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_TRACER, AAPTR_TRACER);
			A_SeekerMissile(60, 90, SMF_PRECISE);
			If(!Target || !Master || !tracer && special1 || tracer && tracer.health<1)
			{
				If((!tracer && special1 || tracer && tracer.health<1) && Master)
				Master.Special2=-18;
				Destroy();
				Return;
			}
			If(Tracer)
			{
				A_Warp(AAPTR_TRACER,heightoffset:0.5);
			}
		}
	}
	States
	{
	Spawn:
		CLAW A -1 Bright;
		Stop;
	Death:
		CLAW A -1
		{
			Height=0;
			If(!Tracer)
			{ Destroy(); Return; }
			special1=1;
			If(Target)
			{
				Target.A_PlaySound("Projectile/HitFlesh",CHAN_5);
				A_PlaySound("Projectile/HitFlesh",CHAN_6);
			}
		}
	}
}
Class InvisiblePuff : Actor
{
	Default { +BLOODLESSIMPACT +PAINLESS }
	Override Void PostBeginPlay() { Destroy(); }
}

Class PowerDash : Powerup
{
	Default
	{
		Powerup.Duration 6;
		Inventory.PickupSound "";
		Inventory.PickupMessage "";
	}
}

Class PowerBloodfueledEFX : Powerup
{
	Default
	{
		Powerup.Duration 210;
		Inventory.PickupSound "";
		Inventory.PickupMessage "";
	}
}

//the actual dashes are done through an inventory item
class B5_DDash : custominventory
{
	int restocktime, gravdelay, frictiondelay;
	double playerspeed;
	default
	{
		+inventory.undroppable;
		+inventory.untossable;
		+inventory.unclearable;
		+inventory.keepdepleted;
		+INVENTORY.NOSCREENFLASH;
		inventory.maxamount 2;
		
	}
		
	states
	{	
		use:
			TNT1 A 0 
			{
				If(CountInv("DoubleDash"))
				{
					b5_trydash();
					if(CountInv("UsingShield"))
					{
						A_Overlay(11, "SmashIntoEnemy");
					}
					Else
					{
						A_OverLay(11, "WeakSmash");
					}
					let ply=self.player;
					If(ply.Mo.Waterlevel <= 2)
					{A_Overlay(13, "DashTimer");}
					A_GiveInventory("powerdash");
				}
			}
		Wait;
		DashTimer:
			TNT1 A 10;
			TNT1 A 0
			{
				vel.xy -= Vel.xy/1.7;
			}
			TNT1 A 3;
			TNT1 A 0 
			{
				vel.xy -= Vel.xy/1.7;
			}
		Stop;
		SmashIntoEnemy:
			TNT1 A 3 A_FireProjectile("ForcePush", 0, 0);
			TNT1 A 1;
			TNT1 A 3 A_FireProjectile("ForcePush", 0, 0);
			TNT1 A 2;
			TNT1 A 3 A_FireProjectile("ForcePush", 0, 0);
		Stop;
		WeakSmash:
			TNT1 A 3 A_FireProjectile("WeakForcePush", 0, 0);
			TNT1 A 4;
			TNT1 A 3 A_FireProjectile("WeakForcePush", 0, 0);
			/*TNT1 A 2;
			TNT1 A 3 A_Firecustommissile("WeakForcePush", 0, 0, 0, 0, 0, 0);*/
		Stop;
	}
	
	action void b5_trydash()
	{
		Int DashesUsed = 2;
		DashesUsed = (CountInv("B5_DDash"));
		if (invoker.amount<=0) return;
		if(!countinv("FasterDasher"))
		{
			invoker.restocktime=level.time+((dd_restockdelay * 1.5)/DashesUsed);
		}
		Else if(countinv("FasterDasher"))
		{
			invoker.restocktime=level.time+(((dd_restockdelay-15) * 1.5)/DashesUsed);
		}
		invoker.amount--;
		
		//apply momentary antigravity
		let ply=self.player;
		If(ply.mo.waterlevel <= 2)
		{invoker.gravdelay=level.time+dd_nogravtime;}
		Else
		{invoker.frictiondelay = level.time+dd_nogravtime;}
		//self.bnogravity=true;
		//vel.z=0;
		//hahahahaha no
		//i fucking wish i could just do the above but APPARENTLY THAT DOESNT WORK
		//i have no FUCKING clue why, it just doesnt, even tho thats like half of
		//what the default PowerFlight item does WHICH ALSO WORKS WITHOUT A HITCH
		//god fucking jack up my bootycock pissmom i will shit and cum out my eyes
		
		//push the player
		If(ply.Mo.Waterlevel <= 2)
		{vel.xy=angletovector(angle-vectorangle(ply.cmd.forwardmove,ply.cmd.sidemove),dd_boostforce);}
		Else If(ply.Mo.Waterlevel == 3)
		{
			ply.Mo.bNOFRICTION = True;
			vel.xy+=angletovector(angle-vectorangle(ply.cmd.forwardmove,ply.cmd.sidemove),dd_boostforce/2);
			If(ply.cmd.forwardmove > 0 || ply.cmd.forwardmove < 0)
			Vel.Z += ply.cmd.forwardmove/ply.cmd.forwardmove+1 * (dd_boostforce/2 * (Sin(-ply.mo.Pitch)));
			Else
			Vel.Z += (dd_boostforce/2 * (Sin(-ply.mo.Pitch)));
		}
		//do fancy effects stuff
		a_startsound("b5.ddash",20,chanf_overlap);
		//a_setblend("white",0.5,9);
		
	}
	
	override void doeffect()
	{
		super.doeffect();
		if (!owner) return;
		//do the restock stuff
		If (amount<maxamount)
		{
			if (level.time>restocktime)
			{
				//if the player isnt on the ground, dont restock the dashes
				//just like doom eternal proper
				if (abs(owner.pos.z-owner.getzat())<=1||owner.bonmobj||owner.waterlevel == 3 || owner.bNOGRAVITY)
				{
					if (amount==1)
					{
						owner.a_startsound("b5.drestock1",20,chanf_overlap);
					}
					else
					{
						owner.a_startsound("b5.drestock2",20,chanf_overlap);
					}
					amount=maxamount;
				}
			}
		}
		//ITS GROSS HACK TIME CUMSLUTS
		PlayerInfo Ply = Players[ConsolePlayer];
		if (level.time<gravdelay)
		{
			owner.vel.z=0;
		}
		If (level.time>=frictiondelay)
		{
			Owner.bNOFRICTION = False;
			//ply.mo.bNOFRICTION = True;
		}
	}
	/*Override Bool Use()
	{
		If (owner)
		{
			owner.a_giveinventory("powerdash");
		}	
	}*/
	//reset stuff when going between levels
	override void travelled()
	{
		gravdelay=0;
		restocktime=0;
	}
}

class DashAndBloodPunch : eventhandler //Strongbelly: combined the blood punch and dash event handlers
{
	//ignore everything in here but DO NOT DELETE
	override void playerentered(playerevent e)
	{
		players[e.playernumber].mo.giveinventory("B5_DDash",2);
	}
	
		
	override void renderoverlay(renderevent e)
	{
		playerinfo ply=players[e.camera.playernumber()];
		
		TextureID DashOverlay = TexMan.CheckForTexture("DASHVIG", TexMan.TYPE_ANY);
		TextureID Bloodfuelledoverlay = TexMan.CheckForTexture("BLFDVIG", TexMan.TYPE_ANY);
		Vector2 OverlayPos = TexMan.GetScaledSize(DashOverlay);
		Vector2 OverlayPos2 = TexMan.GetScaledSize(BloodFuelledoverlay);
		
		If (ply.mo.countinv("powerdash"))
		{
			Screen.DrawTexture(DashOverlay, True, 0, 0, DTA_VirtualWidth, 1920, DTA_VirtualHeight, 1080, DTA_KeepRatio, True);
		}
		If (ply.mo.countinv("PowerBloodfueledEFX"))
		{
			Screen.DrawTexture(BloodFuelledoverlay, True, 0, 0, DTA_VirtualWidth, 1920, DTA_VirtualHeight, 1080, DTA_KeepRatio, True);
		}
	}
}


Class FlameBelchProjectile : EOA_Projectile
{
  Default
  {
	  -BLOODSPLATTER;
	  +BRIGHT;
	  +THRUGHOST;
	  +NOGRAVITY
	  +RIPPER
	  Radius 2;
	  Height 4;
	  Speed 25;
	  Damage 1;
	  Projectile;
	  RenderStyle "Add";
	  Alpha 0.4;
	  Scale 0.67;
	  //SeeSound "Flamethrower/Fire";
	  DeathSound "Flamethrower/Hit";
	  Species "FTFlame";
	  Translation "0:255=%[0,0,0]:[0.8,0.2,0.0]";
  }
  Override Int DoSpecialDamage(Actor Target, Int Damage, Name DamageType)
	{
		If (GetClassName() == "FlameBelchProjectile")
		{
			If (Target.bISMONSTER && !Target.bNODAMAGE && !Target.bNOPAIN)
			{
				Target.A_GiveInventory("PowerBurning");
				/*Let StunItem = PowerBurning(Target.FindInventory("PowerBurning"));
				If (StunItem)
				{
					StunItem.EffectTics *= 2;
					StunItem.Master = Target.Target = Self.Target;
				}*/
			}
			Damage = 0;
		}
		Return Damage;
	}
  States
  {
  Spawn:
    FRFX ABCD 2 A_Explode(1,60,0,0,60);
    FRFX EFG 2 A_Explode(1,60,0,0,60);
    FRFX HIJ 2 A_Explode(1,60,0,0,60);
    FRFX KLM 2 A_Explode(1,60,0,0,60);
    FRFX NO 2 A_Explode(1,60,0,0,60);
    Stop;
  
  Death:
	TNT1 A 2;
	Stop;
  XDeath:
	TNT1 A 0 A_Explode(1,60,0,0,60);
    FRFX H 2 ;
	FRFX IJ 2 ;
	FRFX KLM 2 ;
    FRFX NO 2 ;
	Stop;
  }
}

Class IceBombProjectile : EOA_Projectile
{
	Default
	{
	Radius 2.5;
	Height 5;
	Speed 60;
	+FORCERADIUSDMG;
	Scale 0.1;
	Renderstyle "Add";
	DeathSound "Ice/Fire";
	+MTHRUSPECIES;
	+NOTELEPORT;
	+NODAMAGETHRUST;
	-NOGRAVITY
	+FORCEXYBILLBOARD
	+ROLLCENTER
	+ROLLSPRITE
	Gravity 0.60;
	//Mass 400;
	}
	Actor Lite;
	Override Void OnDestroy()
	{
		If(Lite) Lite.Destroy();
	}
	Actor Lb;
	Override void Tick()
	{
		Super.Tick();
		If(IsFrozen()) Return;
		If(Lite)
		{
			Lite.Args[3]=int(64*FRandom(0.75,1));
			Lite.SetOrigin(Pos,1);
		}
		If(Level.Time%4!=0) Return;
		Actor B=Spawn("LightningBeamTrailBase1",Pos,ALLOW_REPLACE);
		B.Target=Self;
		B.Tracer=Self;
		If(Lb) { Lb.target=B; LB.Tracer=B; }
		B.Scale.X=13;
		//B.Vel3DFromAngle(0.75,Angle+90,FRandom(0,360));
		B.Vel3DFromAngle((FRandom(0,360)+ 180 )/360, Angle+90, FRandom(0,360));
		B.Health=1;
		B.Speed=0.05;
		B.Frame=11;
		B.SetShade("8080FF");
		B.A_SetRenderStyle(0.99,STYLE_ADDSHADED);
		Lb=B;
	}
	Override Int DoSpecialDamage(Actor Target, Int Damage, Name DamageType)
	{
		playerinfo player = players[consoleplayer];
		If (GetClassName() == "IceBombProjectile")
		{
			If (Target.GetClassName() == "PinkyArmor" || Target.GetClassName() == "ShieldguyShield")
			{
				Target.Destroy();
			}
			If (Target.bISMONSTER && !Target.bNODAMAGE && !Target.bNOPAIN)
			{	
				if(!player.mo.CountInv("PermaFrost"))
				{
					Target.A_GiveInventory("PowerFrozen");
					Let StunItem = PowerFrozen(Target.FindInventory("PowerFrozen"));
					If (StunItem)
					{
						StunItem.EffectTics *= 2; 
						StunItem.Master = Target.Target = Self.Target;
					}
				}
				if(player.mo.CountInv("PermaFrost"))
				{
					Target.A_GiveInventory("PowerFrozenlong");
					Let StunItem = PowerFrozen(Target.FindInventory("PowerFrozenlong"));
					If (StunItem)
					{
						StunItem.EffectTics *= 2; 
						StunItem.Master = Target.Target = Self.Target;
					}
				}
			}
			Damage = 0;
		}
		Return Damage;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			////EOA_SpawnCustomDynamicLight("PointLight", 0.1, 0.8, 1, 32, 0, 0x7FFFFFFF, 1, DYN_ADDITIVE);
			////EOA_SpawnCustomDynamicLight("PointLight", 0.1, 0.8, 1, 32, 0, 0x7FFFFFFF, 1, DYN_ATTENUATE);
		}
		//TNT1 A 0 A_Jump(256, random(1, 3));
		ICAG A 0 A_Jump(256, "SpawnLoop");
	SpawnLoop:
		IBMB ABCDE 1 Bright
		{
			EOA_SpawnCustomDynamicLight("FragBlinkAddLight", DynamicLight.PointLight, (76, 76, 255), 32, 0, DYNAMICLIGHT.LF_ADDITIVE, 5, (0, 0, Height / 2));
			EOA_SpawnCustomDynamicLight("FragBlinkAttnLight", DynamicLight.PointLight, (76, 76, 255), 32, 0, DYNAMICLIGHT.LF_ATTENUATE, 5, (0, 0, Height / 2));
		}
		Wait;
	Death:
		TNT1 A 0 A_SetScale(0.1 * 2);
		TNT1 A 0
		{
			A_Explode(1, 160, 0, 1, 160);
			A_PlaySound("StunBomb/Impact", 1, 0.5);
			A_PlaySound("StunBomb/Explode", 2);
			EOA_SpawnCustomDynamicLight("FragBlinkAddLight", DynamicLight.PointLight, (76, 76, 255), 64, 0, DYNAMICLIGHT.LF_ADDITIVE, 5, (0, 0, Height / 2));
			EOA_SpawnCustomDynamicLight("FragBlinkAttnLight", DynamicLight.PointLight, (76, 76, 255), 64, 0, DYNAMICLIGHT.LF_ATTENUATE, 5, (0, 0, Height / 2));
		}
		FRFI CD 2 Bright A_SpawnItemEx("IceBombExplosionFX", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION);
		FRFI OP 2 Bright
		{
			A_SpawnItemEx("IceBombShockwave2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
			A_SpawnItemEx("IceBombShockwave", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		}
		TNT1 AAAAAAA 0 A_SpawnItemEx("IceBombSmoke",randompick(20,-20),randompick(20,-20),0,frandom(2.5,-2.5),frandom(2.5,-2.5),0,random(1,360),SXF_NOCHECKPOSITION);
		FRFI P 1 Bright A_IceGuyDie;
		Stop;
	}
}

Class PowerFrozen : EOA_Powerup
{
	Int PrevHealth;
	Int MaxDrop;
	Int HealthDiff;
	Default
	{
			Powerup.Duration 120;
	}
	Override Void AttachToOwner(Actor Other)
	{
		If(Other && Other.CountInv("GloryKillCounter")) //So it will not freeze while Glory Killing
		{
			Destroy();
			Return;
		}
		ActiveSound = "FrozenSFX";
		EffectTics /= 1 + (Other.Default.Health > 3000); //[DoomKrakken]: Tanky monsters such as Barons burn through this stuff twice as fast... so the effect tics will be halved.
	    PrevHealth = Other.Health;						 //STR: changed to 3000
		Super.AttachToOwner(Other);
	}
	Override Void DetachFromOwner()
	{	If (Owner && Owner.bISMONSTER)
		{
			Owner.A_SetTranslation("None");
			Owner.bNOPAIN = False;
			Owner.bBRIGHT = False;
			Owner.Tics = 2;
		}	
	}	
	Override Void DoEffect()
	{
		playerinfo player = players[consoleplayer];
		If (EffectTics < 0)
		{
			Destroy();
			Return;
		}
		If (!(GetAge() % 5))
		{
			Owner.A_SpawnItemEx("IceBombSmoke",randompick(20,-20),randompick(20,-20),0,frandom(2.5,-2.5),frandom(2.5,-2.5),0,random(1,360),SXF_NOCHECKPOSITION);
		}
		If (Owner.GetClassName() == "D4Archvile")
		{
			Owner.bFORCEPAIN = True;
			Owner.bNODAMAGE = False;
			If (Owner.Health < 2)
			{
				Owner.A_DamageSelf(-1, Flags: DMSS_FOILINVUL|DMSS_NOFACTOR|DMSS_NOPROTECT);
				Owner.A_DamageSelf(1, Flags: DMSS_FOILINVUL|DMSS_NOFACTOR|DMSS_NOPROTECT);
			}
			Else
			{
				Owner.A_DamageSelf(1, Flags: DMSS_FOILINVUL|DMSS_NOFACTOR|DMSS_NOPROTECT);
				Owner.A_DamageSelf(-1, Flags: DMSS_FOILINVUL|DMSS_NOFACTOR|DMSS_NOPROTECT);
			}
			If (Owner)
			{
				Owner.bFORCEPAIN = Owner.Default.bFORCEPAIN;
			}
		}
		Owner.bNOPAIN = True;
		Owner.bBRIGHT = True;
		Owner.A_SetTranslation("Frozen");
		Owner.Tics = -1;
		If (Owner && Owner.Health < PrevHealth && MaxDrop <= 10)
        {
			HealthDiff = PrevHealth - Owner.Health;
			If(player.mo.CountInv("FrostBite"))
			{
				If (HealthDiff >= 30)
				{
					Owner.A_DropItem("TempStim");
					Owner.A_DropItem("TempStim");
					Owner.A_DropItem("TempStim");
					MaxDrop = MaxDrop + 3;
				}
				Else If (HealthDiff >= 30 && Owner.CountInv("powerstunned"))
				{
					Owner.A_DropItem("TempStim");
					Owner.A_DropItem("TempStim");
					Owner.A_DropItem("TempStim");
					Owner.A_DropItem("TempStim");
					Owner.A_DropItem("TempStim");
					Owner.A_DropItem("TempStim");
					MaxDrop = MaxDrop + 2;
				}
				Owner.A_DropItem("TempStim");
			}
            PrevHealth = Owner.Health;
			MaxDrop = MaxDrop + 1;
        }
		//player.mo.CountInv("FrostBite")
		Powerup.DoEffect(); //[DoomKrakken]: Not Super, because it calls unnecessary stuff we can skip.
	}
	
	/*Override Void OnDestroy ()
	{
		If (Owner && Owner.bISMONSTER)
		{
			Owner.A_SetTranslation("None");
			Owner.bNOPAIN = False;
			Owner.bBRIGHT = False;
			Owner.Tics = 2;
		}	
		Super.OnDestroy();
	}*/
	
	Override Void OwnerDied()
    {
		If (Owner.Radius <= 20)
        {
			If(Owner.CountInv("powerstunned"))
			{
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
			}
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            //Owner.A_DropItem("TempStim");
            //Owner.A_DropItem("TempStim");
        }
		Else If (Owner.Radius <= 30)
		{
			If(Owner.CountInv("powerstunned"))
			{
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
			}
			Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            //Owner.A_DropItem("TempStim");
		}
		Else
		{
			If(Owner.CountInv("powerstunned"))
			{
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
			}
			Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
		}
        Destroy();
        Return;
    }
	
	Override Bool HandlePickup(Inventory Item)
	{
		If (Item.GetClass() == GetClass())
		{
			Let Power = EOA_Powerup(Item);
			If (!Power.EffectTics)
			{
				Power.bPICKUPGOOD = True;
				Return True;
			}
			If (Power.bADDITIVETIME) 
			{
				EffectTics += Power.EffectTics / (1 + (Owner.Default.Health > 3000)); //[DoomKrakken]: Tanky monsters such as Barons burn through this stuff twice as fast... so the effect tics will be halved.
				BlendColor = Power.BlendColor;										  //STR: changed to 3000
			}
			Else If (EffectTics > BLINKTHRESHOLD && !Power.bALWAYSPICKUP)
			{
				Return True;
			}
			Else If (Power.EffectTics > EffectTics)
			{
				EffectTics = Power.EffectTics / (1 + (Owner.Default.Health > 3000));
				BlendColor = Power.BlendColor;
			}
			Power.bPICKUPGOOD = True;
			Return True;
		}
		Return False;
	}
}

Class PowerFrozenlong : EOA_Powerup
{
	Int PrevHealth;
	Int MaxDrop;
	Int HealthDiff;
	Default
	{
			Powerup.Duration 220;
	}
	Override Void AttachToOwner(Actor Other)
	{
		If(Other && Other.CountInv("GloryKillCounter")) //So it will not freeze while Glory Killing
		{
			Destroy();
			Return;
		}	
		ActiveSound = "FrozenSFX";
		EffectTics /= 1 + (Other.Default.Health > 3000); //[DoomKrakken]: Tanky monsters such as Barons burn through this stuff twice as fast... so the effect tics will be halved.
	    PrevHealth = Other.Health;						 //STR: changed to 3000
		Super.AttachToOwner(Other);
	}
	Override Void DetachFromOwner()
	{	If (Owner && Owner.bISMONSTER)
		{
			Owner.A_SetTranslation("None");
			Owner.bNOPAIN = False;
			Owner.bBRIGHT = False;
			Owner.Tics = 2;
		}	
	}	
	Override Void DoEffect()
	{
		playerinfo player = players[consoleplayer];
		If (EffectTics < 0)
		{
			Destroy();
			Return;
		}
		If (!(GetAge() % 5))
		{
			Owner.A_SpawnItemEx("IceBombSmoke",randompick(20,-20),randompick(20,-20),0,frandom(2.5,-2.5),frandom(2.5,-2.5),0,random(1,360),SXF_NOCHECKPOSITION);
		}
		If (Owner.GetClassName() == "D4Archvile")
		{
			Owner.bFORCEPAIN = True;
			Owner.bNODAMAGE = False;
			If (Owner.Health < 2)
			{
				Owner.A_DamageSelf(-1, Flags: DMSS_FOILINVUL|DMSS_NOFACTOR|DMSS_NOPROTECT);
				Owner.A_DamageSelf(1, Flags: DMSS_FOILINVUL|DMSS_NOFACTOR|DMSS_NOPROTECT);
			}
			Else
			{
				Owner.A_DamageSelf(1, Flags: DMSS_FOILINVUL|DMSS_NOFACTOR|DMSS_NOPROTECT);
				Owner.A_DamageSelf(-1, Flags: DMSS_FOILINVUL|DMSS_NOFACTOR|DMSS_NOPROTECT);
			}
			If (Owner)
			{
				Owner.bFORCEPAIN = Owner.Default.bFORCEPAIN;
			}
		}
		Owner.bNOPAIN = True;
		Owner.bBRIGHT = True;
		Owner.A_SetTranslation("Frozen");
		Owner.Tics = -1;
		If (Owner && Owner.Health < PrevHealth && MaxDrop <= 10)
        {
			HealthDiff = PrevHealth - Owner.Health;
			If(player.mo.CountInv("FrostBite"))
			{
				If (HealthDiff >= 30)
				{
					Owner.A_DropItem("TempStim");
					Owner.A_DropItem("TempStim");
					Owner.A_DropItem("TempStim");
					MaxDrop = MaxDrop + 3;
				}
				Else If (HealthDiff >= 30 && Owner.CountInv("powerstunned"))
				{
					Owner.A_DropItem("TempStim");
					Owner.A_DropItem("TempStim");
					Owner.A_DropItem("TempStim");
					Owner.A_DropItem("TempStim");
					Owner.A_DropItem("TempStim");
					Owner.A_DropItem("TempStim");
					MaxDrop = MaxDrop + 2;
				}
				Owner.A_DropItem("TempStim");
			}
            PrevHealth = Owner.Health;
			MaxDrop = MaxDrop + 1;
        }
		//player.mo.CountInv("FrostBite")
		Powerup.DoEffect(); //[DoomKrakken]: Not Super, because it calls unnecessary stuff we can skip.
	}
	
	/*Override Void OnDestroy ()
	{
		If (Owner && Owner.bISMONSTER)
		{
			Owner.A_SetTranslation("None");
			Owner.bNOPAIN = False;
			Owner.bBRIGHT = False;
			Owner.Tics = 2;
		}	
		Super.OnDestroy();
	}*/
	
	Override Void OwnerDied()
    {
		If (Owner.Radius <= 20)
        {
			If(Owner.CountInv("powerstunned"))
			{
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
			}
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            //Owner.A_DropItem("TempStim");
            //Owner.A_DropItem("TempStim");
        }
		Else If (Owner.Radius <= 30)
		{
			If(Owner.CountInv("powerstunned"))
			{
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
			}
			Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            //Owner.A_DropItem("TempStim");
		}
		Else
		{
			If(Owner.CountInv("powerstunned"))
			{
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
				Owner.A_DropItem("TempStim");
			}
			Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
		}
        Destroy();
        Return;
    }
	
	Override Bool HandlePickup(Inventory Item)
	{
		If (Item.GetClass() == GetClass())
		{
			Let Power = EOA_Powerup(Item);
			If (!Power.EffectTics)
			{
				Power.bPICKUPGOOD = True;
				Return True;
			}
			If (Power.bADDITIVETIME) 
			{
				EffectTics += Power.EffectTics / (1 + (Owner.Default.Health > 3000)); //[DoomKrakken]: Tanky monsters such as Barons burn through this stuff twice as fast... so the effect tics will be halved.
				BlendColor = Power.BlendColor;										  //STR: changed to 3000
			}
			Else If (EffectTics > BLINKTHRESHOLD && !Power.bALWAYSPICKUP)
			{
				Return True;
			}
			Else If (Power.EffectTics > EffectTics)
			{
				EffectTics = Power.EffectTics / (1 + (Owner.Default.Health > 3000));
				BlendColor = Power.BlendColor;
			}
			Power.bPICKUPGOOD = True;
			Return True;
		}
		Return False;
	}
}

Class PowerBurning : EOA_Powerup
{
	Int PrevHealth;
	Int MaxDrop;
	Int HealthDiff;
	Int WaitTics;
	Default
	{
		Powerup.Duration 245;
	}
	Override Void AttachToOwner(Actor Other)
	{
		ActiveSound = "BurningSFX";
		EffectTics /= 1 + (Other.Default.Health > 3000); //[DoomKrakken]: Tanky monsters such as Barons burn through this stuff twice as fast... so the effect tics will be halved.
	    PrevHealth = Other.Health;						 //STR: changed to 3000
		Super.AttachToOwner(Other);
		Red = 0.8;
		Green = 0.2;
		Blue = 0.0;
		
	}
	Override Void DoEffect()
	{
		If (EffectTics < 0)
		{
			Destroy();
			Return;
		}
		If (!Owner.CountInv("BurningToken"))
		{
			Owner.A_SpawnItemEx("BelchFire", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
		}
		If (Owner.bISMONSTER && (Owner.bBOSS && Owner.Default.Health >= 3000))
		{
			Owner.bNORADIUSDMG = False;
		}
		If (Owner && Owner.Health)
        {
			HealthDiff = PrevHealth - Owner.Health;
			If (HealthDiff >= 70)
			{
				Owner.A_DropItem("BelchArmor");
				Owner.A_DropItem("BelchArmor");
				Owner.A_DropItem("BelchArmor");
			}	
			Else If (HealthDiff >= 70 && Owner.CountInv("powerstunned"))
			{
				Owner.A_DropItem("BelchArmor");
				Owner.A_DropItem("BelchArmor");
				Owner.A_DropItem("BelchArmor");
				Owner.A_DropItem("BelchArmor");
				Owner.A_DropItem("BelchArmor");
				Owner.A_DropItem("BelchArmor");
			}	
            PrevHealth = Owner.Health;
		}
		WaitTics = WaitTics + 1;
		If (WaitTics >= 17 && !(MaxDrop >= (11 * 1 + Owner.CountInv("powerstunned"))))
		{
			Owner.A_DropItem("BelchArmor");
			MaxDrop = MaxDrop + 1;
			WaitTics = 0;
		}
		Powerup.DoEffect(); //[DoomKrakken]: Not Super, because it calls unnecessary stuff we can skip.
	}
		
	Override Void OwnerDied()
    {
		if(Owner.CountInv("powerstunned"))
		{
			Owner.A_DropItem("BelchArmor");
			Owner.A_DropItem("BelchArmor");
			Owner.A_DropItem("BelchArmor");
			Owner.A_DropItem("BelchArmor");
			Owner.A_DropItem("BelchArmor");
			Owner.A_DropItem("BelchArmor");
			Owner.A_DropItem("BelchArmor");
		}
		Owner.A_DropItem("BelchArmor");
        Owner.A_DropItem("BelchArmor");
        Owner.A_DropItem("BelchArmor");
        Owner.A_DropItem("BelchArmor");
        Owner.A_DropItem("BelchArmor");
		Owner.A_DropItem("BelchArmor");
        Owner.A_DropItem("BelchArmor");
		Destroy();
        Return;
    }
	
	Override Bool HandlePickup(Inventory Item)
	{
		If (Item.GetClass() == GetClass())
		{
			Let Power = EOA_Powerup(Item);
			If (!Power.EffectTics)
			{
				Power.bPICKUPGOOD = True;
				Return True;
			}
			If (Power.bADDITIVETIME) 
			{
				EffectTics += Power.EffectTics / (1 + (Owner.Default.Health > 3000)); //[DoomKrakken]: Tanky monsters such as Barons burn through this stuff twice as fast... so the effect tics will be halved.
				BlendColor = Power.BlendColor;										  //STR: changed to 3000
			}
			Else If (EffectTics > BLINKTHRESHOLD && !Power.bALWAYSPICKUP)
			{
				Return True;
			}
			Else If (Power.EffectTics > EffectTics)
			{
				EffectTics = Power.EffectTics / (1 + (Owner.Default.Health > 3000));
				BlendColor = Power.BlendColor;
			}
			Power.bPICKUPGOOD = True;
			Return True;
		}
		Return False;
	}
}



/*
Class BurningToken : Inventory
{
    Int PrevHealth;
	Int MaxDrop;
    Override Void AttachToOwner(Actor Other)
    {
        PrevHealth = Other.Health;
        Super.AttachToOwner(Other);
    }
    Override Void DoEffect()
    {
        If (Owner && Owner.Health < PrevHealth && MaxDrop <= 10)
        {
            Owner.A_DropItem("TempArmor");
            PrevHealth = Owner.Health;
			MaxDrop = MaxDrop + 1;
        }
        Super.DoEffect();
    }
    Override Void OwnerDied()
    {
        If (Owner.Radius <= 20)
        {
            Owner.A_DropItem("TempArmor");
            Owner.A_DropItem("TempArmor");
            Owner.A_DropItem("TempArmor");
            //Owner.A_DropItem("TempArmor");
            //Owner.A_DropItem("TempArmor");
        }
		Else If (Owner.Radius <= 30)
		{
			Owner.A_DropItem("TempArmor");
            Owner.A_DropItem("TempArmor");
            Owner.A_DropItem("TempArmor");
            Owner.A_DropItem("TempArmor");
            //Owner.A_DropItem("TempArmor");
		}
		Else
		{
			Owner.A_DropItem("TempArmor");
            Owner.A_DropItem("TempArmor");
            Owner.A_DropItem("TempArmor");
            Owner.A_DropItem("TempArmor");
            Owner.A_DropItem("TempArmor");
		}	
        Super.OwnerDied();
    }
}


Class FrozenToken : Inventory
{
    Int PrevHealth;
	Int MaxDrop;
    Override Void AttachToOwner(Actor Other)
    {
        PrevHealth = Other.Health;
        Super.AttachToOwner(Other);
    }
    Override Void DoEffect()
    {
		If (Owner && Owner.Health < PrevHealth && MaxDrop <= 10)
        {
            Owner.A_DropItem("TempStim");
            PrevHealth = Owner.Health;
			MaxDrop = MaxDrop + 1;
        }
        Super.DoEffect();
    }
    Override Void OwnerDied()
    {
        If (Owner.Radius <= 20)
        {
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            //Owner.A_DropItem("TempStim");
            //Owner.A_DropItem("TempStim");
        }
		Else If (Owner.Radius <= 30)
		{
			Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            //Owner.A_DropItem("TempStim");
		}
		Else
		{
			Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
            Owner.A_DropItem("TempStim");
		}	
        Super.OwnerDied();
    }
}*/
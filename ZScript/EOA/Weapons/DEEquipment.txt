Class ChainsawCooldownToken : EOA_Token {Default {Inventory.MaxAmount 20;} }
Class GrenadesAmount : EOA_Token {Default {Inventory.MaxAmount 2;} }
Class FlameBelch : EOA_Ammo {
	Default
	{
		Scale 0.4;
		Inventory.Amount 1;
		//Inventory.MaxAmount 1;
		Inventory.PickupSound "Health/Mega";
		Ammo.DropAmount 1;
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount 3;
		+NOGRAVITY
		+FLOATBOB
		+MOVEWITHSECTOR
		+RELATIVETOFLOOR
		FloatBobStrength 0.3;
	}
	States
	{
	Spawn:
		FLMP A 0 NoDelay; //A_CheckFlag("DROPPED", "Null");
	SpawnLooper:	
		FLMP A 35 Bright;
		Loop;
	Pickup:
		TNT1 A 0 A_TakeFromTarget("FlameThrowerCooldownToken", 40, AAPTR_PLAYER1);
		Stop;
	}
}
Class IceBomb : EOA_Ammo {
	Default
	{
		Scale 0.4;
		Inventory.Amount 1;
		//Inventory.MaxAmount 1;
		Inventory.PickupSound "Health/Mega";
		Ammo.DropAmount 1;
		Ammo.BackpackAmount 0;
		+NOGRAVITY
		+FLOATBOB
		+MOVEWITHSECTOR
		+RELATIVETOFLOOR
		FloatBobStrength 0.3;
	}
	States
	{
	Spawn:
		ICEP A 0 NoDelay; //A_CheckFlag("DROPPED", "Null");
	SpawnLooper:	
		ICEP A 35 Bright;
		Loop;
	Pickup:
		TNT1 A 0 A_TakeFromTarget("IceBombCooldownToken", 40, AAPTR_PLAYER1);
		Stop;
	}
}
Class FragGrenade : EOA_Ammo {
	Default
	{
		Scale 0.4;
		Inventory.Amount 1;
		//Inventory.MaxAmount 1;
		Inventory.PickupSound "Health/Mega";
		Ammo.DropAmount 1;
		Ammo.BackpackAmount 0;
		+INVENTORY.ALWAYSPICKUP
		+NOGRAVITY
		+FLOATBOB
		+MOVEWITHSECTOR
		+RELATIVETOFLOOR
		FloatBobStrength 0.3;
	}
	States
	{
	Spawn:
		FRGP A 0 NoDelay; //A_CheckFlag("DROPPED", "Null");
	SpawnLooper:	
		FRGP A 1 Bright;
		Loop;
	Pickup:
		TNT1 A 0 
		{
			PlayerInfo Player = Players[ConsolePlayer];
			Player.Mo.A_TakeInventory("GrenadeCooldownToken", 40);
			Player.Mo.A_TakeInventory("ExtraGrenadeCooldownToken", 40);
		}
		Stop;
	}
}

Class DDashRefill : CustomInventory
{
	default
	{
		Scale 0.15;
		Inventory.Amount 2;
		Inventory.MaxAmount 2;
		Inventory.PickupSound "Health/Stim";
		Tag "DashRefill";
		+NOGRAVITY
		+FLOATBOB
		+MOVEWITHSECTOR
		+RELATIVETOFLOOR
		FloatBobStrength 0.3;
	}
	States
	{
	Spawn:
		DSHP A 0 NoDelay;
	SpawnLooper:	
		DSHP A 35 Bright;
		Loop;
	pickup:
		TNT1 A 0 A_Giveinventory("B5_DDASH", 2);
		stop;
	}
}

Class BloodPunchRefill : CustomInventory
{
	Default
	{
		Scale 0.15;
		Inventory.Amount 2;
		Inventory.MaxAmount 2;
		Inventory.PickupSound "BloodPunchCharged";
		+NOGRAVITY
		+FLOATBOB
		+MOVEWITHSECTOR
		+RELATIVETOFLOOR
		FloatBobStrength 0.3;
	}
	States
	{
	Spawn:
		BLDP A 0 NoDelay; //A_CheckFlag("DROPPED", "Null");
	SpawnLooper:	
		BLDP A 35 Bright;
		Loop;
	Pickup:
		TNT1 A 0
		{	
			if(Countinv("ArmoredOffensiveSelected") && CountInv("bloodpunchcounter") == 2)
			{
				A_GiveToTarget("extrabloodpunchcounter", 2, AAPTR_PLAYER1);
			}
			A_GiveToTarget("bloodpunchcounter", 2, AAPTR_PLAYER1);
		}
		Stop;
	}
}

Class BloodPunch : EOA_Ammo {
	Default
	{
		Scale 0.15;
		Inventory.Amount 1;
		//Inventory.MaxAmount 1;
		Inventory.PickupSound "BloodPunchCharged";
		Ammo.DropAmount 1;
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount 1;
		+NOGRAVITY
		+FLOATBOB
		+MOVEWITHSECTOR
		+RELATIVETOFLOOR
		FloatBobStrength 0.3;
	}
	States
	{
	Spawn:
		BLPP A 0 NoDelay; //A_CheckFlag("DROPPED", "Null");
	SpawnLooper:	
		BLPP A 1 Bright;
		Loop;
	}
}

Class DoubleDash : EOA_Ammo {
	Default
	{
		Scale 0.37;
		Inventory.Amount 1;
		//Inventory.MaxAmount 1;
		Inventory.PickupSound "BloodPunchCharged";
		Ammo.DropAmount 1;
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount 1;
		+NOGRAVITY
		+FLOATBOB
		+MOVEWITHSECTOR
		+RELATIVETOFLOOR
		FloatBobStrength 0.3;
	}
	States
	{
	Spawn:
		DSHP A 0 NoDelay; //A_CheckFlag("DROPPED", "Null");
	SpawnLooper:	
		DSHP B 1 Bright;
		Loop;
	}
}

Class Bloodpunchcounter : EOA_Token {Default {Inventory.MaxAmount 2;} }
Class Extrabloodpunchcounter : EOA_Token {Default {Inventory.MaxAmount 2;} }
Class Bloodpunchhit : EOA_Token {Default {Inventory.MaxAmount 1;} }
Class BloodAndGuts : EOA_Token {}

Class BloodpunchWave : Actor
{
	Default
	{
		Projectile;
		Renderstyle "Add";
		Alpha 0.99;
		Scale 0.3;
		+FLATSPRITE
		+NOINTERACTION
		+DONTBLAST
		+DONTTHRUST
	}
	States
	{
	Spawn:
		BLWV A 1 NoDelay Bright
		{
			A_FadeOut(0.10);
			A_SetScale(Scale.X + 0.4);
		}
		Wait;
	}
}

Class EnemyHealthChecker : EOA_NullPuff2
{
	default
	{
	+HITTRACER
	+ALLOWTHRUFLAGS
	+THRUGHOST
	}
	States
	{
	Spawn:
	Crash:
	Death:
	XDeath:
		TNT1 A 0 NoDelay
		{
				If (CallACS("GetMaxTracerHealth") >= 400)
				{
					A_TransferPointer(AAPTR_TRACER, AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_TRACER);
					if(Countinv("bloodpunchcounter",AAPTR_TARGET) == 0)
					{
						A_GiveInventory("Bloodpunchcounter", 2,AAPTR_TARGET);
					}
					else if(Countinv("bloodpunchcounter",AAPTR_TARGET) == 1 && countinv("ArmoredOffensiveSelected",AAPTR_TARGET))
					{
						A_GiveInventory("Bloodpunchcounter", 2,AAPTR_TARGET);
						A_GiveInventory("extraBloodpunchcounter", 1,AAPTR_TARGET);
					}
					else if(Countinv("bloodpunchcounter",AAPTR_TARGET) == 2 && countinv("ArmoredOffensiveSelected",AAPTR_TARGET))
					{
						A_GiveInventory("extraBloodpunchcounter", 2,AAPTR_TARGET);
					}
				}
				Else If (CallACS("GetMaxTracerHealth") < 400)
				{
					A_TransferPointer(AAPTR_TRACER, AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_TRACER);
					A_GiveInventory("Bloodpunchcounter", 1, AAPTR_TARGET);
				}
		}
		Stop;
	}
}

Class ClimbHand : EOA_Token{}

Class EOAE_FragGrenadeProjectile : EOA_Projectile
{
	Bool FirstBounce;
	Bool Spawned;
	Bool HasTracer;
	Int EquipmentPower;
	Default
	{
		Projectile;
		Radius 2.5;
		Height 5;
		Scale 0.1;
		Speed 60;
		DamageFunction 16;
		Gravity 0.60;
		ReactionTime 30;
		BounceSound "Frag/Bounce";
		BounceType "Doom";
		+ALLOWBOUNCEONACTORS
		+BOUNCEONACTORS
		+CANBOUNCEWATER
		+FORCEXYBILLBOARD
		-NOGRAVITY
		+ROLLCENTER
		+ROLLSPRITE
		+USEBOUNCESTATE
	}
	Actor Lite;
	Override Void OnDestroy()
	{
		If(Lite) Lite.Destroy();
	}
	Actor Trail;
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		EquipmentPowerLevel = CountInv("EquipmentPowerSelected", AAPTR_TARGET) + CountInv("EquipmentPowerSelected", AAPTR_TARGET) * CountInv("EquipmentPowerII", AAPTR_TARGET);
		If (EquipmentPowerLevel)
		{
			A_StartSound("Rune/EquipmentPower", 1, ATTN_NONE);
		}
		//A_SpawnItemEx("FragGrenadeSmokeTrail", Flags: SXF_ORIGINATOR|SXF_SETTRACER);
		If(GetAge()) Return;
		Trail=Spawn("TrailSpawner",Pos);
		Trail.Target=Self;
		Trail.Health=1;
		Trail.ReactionTime=2;
		Trail.Scale.X=13;
		Trail.Speed=0.1;
		Trail.Frame=2;
		Trail.Vel3DFromAngle((FRandom(0,360)+ 180 )/360, Angle+90, FRandom(0,360));
		Trail.A_SetRenderStyle(1.0,STYLE_ADDSHADED);
		Trail.SetShade("FF3000");
		Trail.bBright=True;
		Lite=Spawn("PointLightAttenuated",Pos);
		Lite.Target=Self;
		Lite.Args[0]=255;
		Lite.Args[1]=0;
		Lite.Args[2]=0;
	}
	Actor Lb;
	Override void Tick()
	{
		Super.Tick();
		If(IsFrozen()) Return;
		If(Lite)
		{
			Lite.Args[3]=int(64*FRandom(0.75,1));
			Lite.SetOrigin(Pos,1);
		}
		If(Level.Time%4!=0) Return;
		Actor B=Spawn("LightningBeamTrailBase1",Pos,ALLOW_REPLACE);
		B.Target=Self;
		B.Tracer=Self;
		If(Lb) { Lb.target=B; LB.Tracer=B; }
		B.Scale.X=19;
		//B.Vel3DFromAngle(0.75,Angle+90,FRandom(0,360));
		B.Vel3DFromAngle((FRandom(0,360)+ 180 )/360, Angle+90, FRandom(0,360));
		B.Health=1;
		B.Speed=0.05;
		B.Frame=11;
		B.SetShade("808080");
		B.A_SetRenderStyle(0.99,STYLE_SHADED);
		Lb=B;
		If (!(ReactionTime % 10))
		{
			EOA_SpawnCustomDynamicLight("FragBlinkAddLight", DynamicLight.PointLight, (255, 32, 32), 32, 0, DYNAMICLIGHT.LF_ADDITIVE, 5, (0, 0, Height / 2));
			EOA_SpawnCustomDynamicLight("FragBlinkAttnLight", DynamicLight.PointLight, (255, 32, 32), 32, 0, DYNAMICLIGHT.LF_ATTENUATE, 5, (0, 0, Height / 2));
		}
	}
	Override Int DoSpecialDamage(Actor Target, Int Damage, Name DamageType)
	{
		Headshot = False;
		Damage *= (1 + 0.5 * EquipmentPowerLevel);
		Return Damage;
	}
	Action Bool EOA_FragDetect(Int Dist)
	{
		BlockThingsIterator It = BlockThingsIterator.Create(Self, Dist);
		While (It.Next())
		{
			Actor Mo = It.Thing;
			If (Mo && Mo.bISMONSTER && !Mo.bFRIENDLY)
			{
				Return True;
			}
		}
		Return False;
	}
	States
	{
	Spawn:
		FNAD ABCDE 1 NoDelay
		{
			If (sqrt((Vel.X * Vel.X) + (Vel.Y * Vel.Y) + (Vel.Z * Vel.Z)) < 0.2)
			{
				Return ResolveState("Death");
			}
			If (ReactionTime == 35)
			{
				Return ResolveState("Prime");
			}
			Else If (ReactionTime <= 0)
			{
				Return ResolveState("Boom");
			}
			Else
			{
				A_SetRoll(Roll - 30);
				If (FirstBounce)
				{
					ReactionTime--;
				}
				Return ResolveState(Null);
			}
		}
		Loop;
	Bounce:
		FNAD A 0
		{
			Vel *= 0.25;
			FirstBounce = True;
			If (!HasTracer)
			{
				If (EOA_FragDetect(212 + 20 * EquipmentPowerLevel))
				{
					Invoker.HasTracer = True;
					Invoker.ReactionTime -= 18;
				}
			}
			If (ReactionTime == 35)
			{
				Return ResolveState("Prime");
			}
			Else If (ReactionTime <= 0)
			{
				Return ResolveState("Boom");
			}
			Return ResolveState(Null);
		}
		Goto Spawn;
	Death:
		TNT1 A 0
		{
			A_StartSound("Frag/Bounce", 0, CHANF_OVERLAP);
			A_SetRoll(randomPick(-90, 90));
			bFLOORCLIP = bTHRUACTORS = True;
			A_Stop();
		}
	Inert:
		NADL A 0 A_JumpIf(ReactionTime == 35, "Prime");
		FRAG B 0 A_JumpIf(ReactionTime <= 0, "Boom");
		FRAG B 0 
		{
			A_SpawnItemEx("FragGrenadeSmoke");
			ReactionTime--;
			If (!HasTracer)
			{
				A_LookEx(LOF_NOSOUNDCHECK|LOF_NOJUMP, 0, 212 + 20 * EquipmentPowerLevel, 0, 360, "Null");
				If (Target)
				{
					HasTracer = True;
					ReactionTime--;;
				}
			}
		}
		Loop;
	Prime:
		TNT1 A 0 
		{
			ReactionTime--;
			A_StartSound("Frag/Prime");
			//If (sqrt((Vel.X * Vel.X) + (Vel.Y * Vel.Y) + (Vel.Z * Vel.Z)) < 0.2)
			If (Vel.Length() < 0.2)
			{
				Return ResolveState("Inert");
			}
			Return ResolveState("Spawn");
		}
		Goto Spawn;
	Boom:
		TNT1 A 0 A_SetScale(0.75 * (1 + 0.125 * EquipmentPowerLevel));
		TNT1 AAAAAAAAA 0 A_SpawnItemEx("EOA_GenericExplosionFX", 0, 0, 0, frandom(-3, 3), frandom(-3, 3), frandom(-3, 3), random(1, 360), SXF_TRANSFERSCALE);
		TNT1 A 3
		{
			A_Stop();
			bNOGRAVITY = bDONTBLAST = bEXTREMEDEATH = True;
			A_SetScale(1.75 * (1 + 0.125 * EquipmentPowerLevel));
			A_SetRoll(0);
			EOA_Explode(252, 212 + 20 * EquipmentPowerLevel, XF_HURTSOURCE, 1, 48 * (EquipmentPowerLevel > 0) + 16 * (EquipmentPowerLevel > 1), 0.1875 - 0.03125 * EquipmentPowerLevel);
			EOA_SpawnCustomDynamicLight("FragExplosionAddLight", DynamicLight.PulseLight, (255, 153, 76), 212 + 20 * EquipmentPowerLevel, 1, DYNAMICLIGHT.LF_ADDITIVE, 12, (0, 0, Height / 2), 0.45);
			EOA_SpawnCustomDynamicLight("FragExplosionAttLight", DynamicLight.PulseLight, (255, 153, 76), 212 + 20 * EquipmentPowerLevel, 1, DYNAMICLIGHT.LF_ATTENUATE, 12, (0, 0, Height / 2), 0.45);
			A_StartSound("Frag/Explode");
			A_StartSound("Frag/Add", 0);
		}
		TNT1 A 10 A_SpawnItemEx("EOA_RocketExplosion", Flags: SXF_TRANSFERSCALE|SXF_NOCHECKPOSITION);
		Stop;
	}
}
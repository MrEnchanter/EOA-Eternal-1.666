Class EMGPistolSelected : EOA_Token{}
Class HAPistolSelected : EOA_Token {}
//disabled because iam too lazy to optimize coin code
Class ChargeEfficiency : EOA_Token{} //Faster Charge Rate.
Class QuickRecovery : EOA_Token{} //Faster Cooldown Rate.
Class EMGLightWeight : EOA_Token{} //Full speed while charging.

Class MC_IncreasedPower : EOA_Token{} //Get 15 headshot kills using the Charged Energy Shot.

Class IncreasedPower : EOA_Token{} //Mastery Upgrade - Charged Energy Shots deal more damage.

Class IncreasedPowerMasteryCounter : EOA_Token{default{Inventory.MaxAmount 15;}}

Class EMGChargeCounter : EOA_Token{default{Inventory.MaxAmount 88;}}
Class EMGCooldownCounter : EOA_Token{default{Inventory.MaxAmount 70;}}
Class EMGAccuracyCounter : EOA_Token{default{Inventory.MaxAmount 20;}}
Class EMGCharging : EOA_Token{}

Class EMGMods : EOA_Manipulator
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("ChargeEfficiency");
			A_GiveInventory("QuickRecovery");
			A_GiveInventory("EMGLightWeight");
		}
		Stop;
	}
}

Class EOA_Pistol : EOA_Weapon Replaces Pistol
{
	Default
	{
	Inventory.Icon "ICONHAR";
	Weapon.AmmoType "EOA_BulletAmmo";
	Weapon.AmmoUse 1;
	Weapon.AmmoGive 60;
	Inventory.PickupMessage "EMG Pistol";
	Tag "EMG Pistol";
	+Weapon.NOAUTOFIRE
	}
	States
	{
	Spawn:
		PSTL A -1;
		Stop;
	Select:
		EMGP A 0 
		{
			A_WeaponOffset(0, 32);
			SetPlayerProperty(0, 1, PROP_INSTANTWEAPONSWITCH);
			A_GiveInventory("EMGPistolSelected");
			If (GetCVar("EOA_Reticles"))
			{
				ACS_NamedExecuteAlways("EMGReticle", 0);
				A_SetCrosshair(99);
			}
			Else
			{
				A_SetCrosshair(0);
			}
		}
		TNT1 A 1 A_Raise(60);
		Wait;
	Deselect:
		EMGP A 0 
		{
			A_TakeInventory("EMGCharging");
			A_TakeInventory("EMGChargeCounter");
			A_TakeInventory("EMGAccuracyCounter");
			A_ZoomFactor(1);
			//EOA_SpawnNoiseMaker(1, "", 1);			
			//EOA_SpawnNoiseMaker(1, "", 4);
			//EOA_SpawnNoiseMaker(1, "", 6);
		}
		EMGR HFDB 1; //HGFEDCBA 1
		EMGP A 0 
		{
			A_TakeInventory("EMGChargeCounter");
			A_TakeInventory("EMGPistolSelected");
			SetPlayerProperty(0, 0, PROP_INSTANTWEAPONSWITCH);
		}
		TNT1 A 4 A_SetTics(4 * !CountInv("Adept") * !CountInv("PowerBerserk"));
		TNT1 A 1 A_Lower(36);
		Wait;		
	Ready:
		TNT1 A 0 EOA_SpawnNoiseMaker("Weapon/Switch");
		EMGR ACEG 1 EOA_WeaponReady(WRF_NOFIRE|WRF_NOBOB, EOA_ALLOWMANTLE|EOA_DISABLEHASTE);//ABCDEFGH 1 
		//"####" "#" 0 A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM));
		Goto ReadyLoop;
	ReRaise:
		TNT1 A 0 A_WeaponOffset(-144, 32);
		EMGR ABDEGH 1//ABCDEFGH 1
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_NOBOB, EOA_ALLOWMANTLE|EOA_DISABLEHASTE);
			A_WeaponOffset(24, 0, WOF_KEEPY|WOF_ADD);
		}
		//"####" "#" 0 A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH|WRF_ALLOWZOOM)
	ReadyLoop:
		EMGP A 1 EOA_WeaponReady(WRF_NOPRIMARY * (GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT|EOA_DISABLEHASTE);
		Wait;
	Fire:
		EMGP A 0
		{
			//A_SetSpeed(1.0);
			A_takeinventory("EOA_BulletAmmo", 1);
			EOA_SpawnNoiseMaker("EMG/Fire", 1);
			EOA_SpawnCustomDynamicLight("CGNLight", DynamicLight.PulseLight, (25, 153, 255), 48, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 2, (0, 0, Height / 2), 0.1);
			
			If (CountInv("PowerQDMG"))
			{
				EOA_SpawnNoiseMaker("QuadDamage/Shot", 18);
			}
			EOA_FireBullets(1 + 0.15 * CountInv("EMGAccuracyCounter"), 1 + 0.15 * CountInv("EMGAccuracyCounter"), -1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ, 32767, "EMGTracer", GetViewZ(), 3 + GetRelVelY() / 6, 1.25);
			EOA_SetWeaponRecoilOffset(frandompick(-1, -0.5, 0.5, 1), -1.5, 0, 0.25);
			A_AlertMonsters();
			//EOA_SpawnNoiseMaker(1, "", 6);
			A_ZoomFactor(1);
			A_GiveInventory("EMGAccuracyCounter", 15);
			A_FireCustomMissile("EMGCasingSpawner", -40, 0, 3, 1);
		}
		EMGP BCD 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE);
		EMGP A 0
		{
			A_takeinventory("EOA_BulletAmmo", 1);
			//A_SetSpeed(1.0);
			EOA_SpawnNoiseMaker("EMG/Fire", 1);
			EOA_SpawnCustomDynamicLight("CGNLight", DynamicLight.PulseLight, (25, 153, 255), 48, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 2, (0, 0, Height / 2), 0.1);
			
			If (CountInv("PowerQDMG"))
			{
				EOA_SpawnNoiseMaker("QuadDamage/Shot", 18);
			}
			EOA_FireBullets(1 + 0.15 * CountInv("EMGAccuracyCounter"), 1 + 0.15 * CountInv("EMGAccuracyCounter"), -1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ, 32767, "EMGTracer", GetViewZ(), 3 + GetRelVelY() / 6, 1.25);
			EOA_SetWeaponRecoilOffset(frandompick(-1, -0.5, 0.5, 1), -1.5, 0, 0.25);
			A_AlertMonsters();
			//EOA_SpawnNoiseMaker(1, "", 6);
			A_ZoomFactor(1);
			A_GiveInventory("EMGAccuracyCounter", 15);
			A_FireCustomMissile("EMGCasingSpawner", -40, 0, 3, 1);
		}
		EMGP BCDE 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE);
		EMGP A 0
		{
			A_takeinventory("EOA_BulletAmmo", 1);
			//A_SetSpeed(1.0);
			EOA_SpawnNoiseMaker("EMG/Fire", 1);
			EOA_SpawnCustomDynamicLight("CGNLight", DynamicLight.PulseLight, (25, 153, 255), 48, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 2, (0, 0, Height / 2), 0.1);
			
			If (CountInv("PowerQDMG"))
			{
				EOA_SpawnNoiseMaker("QuadDamage/Shot", 18);
			}
			EOA_FireBullets(1 + 0.15 * CountInv("EMGAccuracyCounter"), 1 + 0.15 * CountInv("EMGAccuracyCounter"), -1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ, 32767, "EMGTracer", GetViewZ(), 3 + GetRelVelY() / 6, 1.25);
			EOA_SetWeaponRecoilOffset(frandompick(-1, -0.5, 0.5, 1), -1.5, 0, 0.25);
			A_AlertMonsters();
			//EOA_SpawnNoiseMaker(1, "", 6);
			A_ZoomFactor(1);
			A_GiveInventory("EMGAccuracyCounter", 15);
			A_FireCustomMissile("EMGCasingSpawner", -40, 0, 3, 1);
		}
		EMGP BCDEFGH 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE);
		EMGP IJ 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOPRIMARY * (GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)|WRF_NOSECONDARY, EOA_ALLOWMANTLE);
		Goto ReadyLoop;
	AltFire:
		EMGP A 0 
		{
			A_TakeInventory("EMGAccuracyCounter");
			A_ZoomFactor(1.25, ZOOM_NOSCALETURNING);
			If (!CountInv("EMGCooldownCounter"))
			{
				A_GiveInventory("EMGCharging");
			}
		}
		EMGP KLMN 1
		{
			A_WeaponOffset(-10, 0, WOF_KEEPY|WOF_ADD);
			If (CountInv("Grabbing_A_Ledge"))
			{
				Return ResolveState ("LedgeClimb");
			}
			Else
			{
				Return ResolveState (Null);
			}
		}
		EMGP A 0 EOA_SpawnNoiseMaker("EMG/Vent", 5);
	ChargeIdle:
		EMGP O 1; //EOA_SpawnNoiseMaker(1, "EMG/ChargeIdle", 1, 1.0, 1);
		TNT1 A 0
		{
			if(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)
			{
			
				Return ResolveState ("Uncharge");
			}
			
			if(GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK)
			{
					
				Return ResolveState ("Discharge");
			}
			
			Else
			{
				Return ResolveState (Null);
			}
		}
		/*EMGP O 0
		{
			EOA_WeaponReady(WRF_NOFIRE, EOA_ALLOWMANTLE);
			A_WeaponOffset(-50, 0, WOF_KEEPY|WOF_INTERPOLATE);
			If (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK && CountInv("EMGCooldownCounter"))
			{
				Return ResolveState ("ChargeIdle");
			}
			Else If (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)
			{
				Return ResolveState ("Charge");
			}
			Else
			{
				Return ResolveState (Null);
			}
		}*/
		loop;
	ChargeSound:
		EMGP A 0 
		{
			//EOA_SpawnNoiseMaker(1, "EMG/Charge", 6);
			A_GiveInventory("EMGCharging");
		}
	Charging:
		EMGP O 1 
		{
			EOA_WeaponReady(WRF_NOFIRE, EOA_WEAPSPEEDUPGRADE * CountInv("ChargeEfficiency"));
			A_WeaponOffset(-50, 0, WOF_KEEPY|WOF_INTERPOLATE);
			A_GiveInventory("EMGChargeCounter");
			If (CountInv("Grabbing_A_Ledge"))
			{
				Return ResolveState ("Uncharge");
			}
			Return ResolveState (Null);
		}
		EMGP O 0
		{
			A_JumpIfInventory("EMGChargeCounter", 0, "Charged");
			A_JumpIf((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK), "Discharge");
			A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "Charging");
		}
	Goto Uncharge;
	Charged:
		EMGP A 0; //EOA_SpawnNoiseMaker(1, "EMG/ChargeBeep", 6);
	ChargedLoop:
		EMGP O 1 
		{
			EOA_WeaponReady(WRF_NOFIRE);
			A_WeaponOffset(-50, 0, WOF_KEEPY|WOF_INTERPOLATE);
			If (CountInv("Grabbing_A_Ledge"))
			{
				Return ResolveState ("Uncharge");
			}
			Return ResolveState (Null);
		}
		EMGP O 0 
		{	
			A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK, "Discharge");
			A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "ChargedLoop");
		}
		Goto Uncharge;
	Discharge:
		EMGP A 0
		{
			A_TakeInventory("EMGCharging");
			//EOA_SpawnNoiseMaker(1, "", 1);
			//EOA_SpawnNoiseMaker(1, "", 6);
			EOA_SpawnCustomDynamicLight("CGNLight", DynamicLight.PulseLight, (25, 153, 255), 48, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 2, (0, 0, Height / 2), 0.1);
			
			EOA_SpawnNoiseMaker("EMG/ChargeFire", 1);
			If (CountInv("PowerQDMG"))
			{
				EOA_SpawnNoiseMaker("QuadDamage/Shot", 18); 
			}
			EOA_FireBullets(0, 0, 1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ, 32767, "EMGChargeTracer", -1 + GetViewZ(), 2 + GetRelVelY() / 6, 2.5);
			A_TakeInventory("EOA_BulletAmmo", 1);
			EOA_SetWeaponRecoilOffset(frandompick(-1, -0.5, 0.5, 1), -3, 0, 0.25);
			A_AlertMonsters();
			A_FireCustomMissile("EMGCasingSpawner", -40, 0, 1, 1);
		}
		EMGP PQRSTTTTTUUVWXY 1
		{
			EOA_WeaponReady(WRF_NOFIRE, EOA_ALLOWMANTLE);
			A_WeaponOffset(-50, 0, WOF_KEEPY|WOF_INTERPOLATE);
		}
		goto ChargeIdle;
	Uncharge:
		EMGP A 0 
		{
			//EOA_SpawnNoiseMaker(1, "", 1);
			//EOA_SpawnNoiseMaker(1, "", 6);
			A_TakeInventory("EMGChargeCounter");
		}
		EMGP A 0
		{
			A_TakeInventory("EMGCharging");
			A_ZoomFactor(1);
		}
		EMGP NMLK 1
		{
			A_WeaponOffset(10, 0, WOF_KEEPY|WOF_ADD);
			If (CountInv("Grabbing_A_Ledge"))
			{
				Return ResolveState ("LedgeClimb");
			}
			Return ResolveState (Null);
		}
		Goto ReadyLoop;
	Zoom:
		EMGT A 0;
		Goto Super::Melee;
	UseEquipment:
		EMGT A 0;
		Goto Super::UseEquipment;
	}
}
Class EOA_HAPistol : EOA_Weapon Replaces EOA_Pistol
{
	Default
	{
	Inventory.Icon "ICONHAR";
	Weapon.AmmoType "EOA_BulletAmmo";
	Weapon.AmmoUse 1;
	Weapon.AmmoGive 60;
	Inventory.PickupMessage "EMG Pistol";
	Tag "EMG Pistol";
	+Weapon.NOAUTOFIRE
	}
	States
	{
	Spawn:
		PSTL A -1;
		Stop;
	Select:
		EMGP A 0 
		{
			A_WeaponOffset(0, 32);
			SetPlayerProperty(0, 1, PROP_INSTANTWEAPONSWITCH);
			A_GiveInventory("EMGPistolSelected");
			If (GetCVar("EOA_Reticles"))
			{
				ACS_NamedExecuteAlways("EMGReticle", 0);
				A_SetCrosshair(99);
			}
			Else
			{
				A_SetCrosshair(0);
			}
		}
		TNT1 A 1 A_Raise(60);
		Wait;
	Deselect:
		EMGP A 0 
		{
			A_TakeInventory("EMGCharging");
			A_TakeInventory("EMGChargeCounter");
			A_TakeInventory("EMGAccuracyCounter");
			A_ZoomFactor(1);
			//EOA_SpawnNoiseMaker(1, "", 1);			
			//EOA_SpawnNoiseMaker(1, "", 4);
			//EOA_SpawnNoiseMaker(1, "", 6);
		}
		EMGR HFDB 1; //HGFEDCBA 1
		EMGP A 0 
		{
			A_TakeInventory("EMGChargeCounter");
			A_TakeInventory("EMGPistolSelected");
			SetPlayerProperty(0, 0, PROP_INSTANTWEAPONSWITCH);
		}
		TNT1 A 4 A_SetTics(4 * !CountInv("Adept") * !CountInv("PowerBerserk"));
		TNT1 A 1 A_Lower(36);
		Wait;		
	Ready:
		TNT1 A 0 EOA_SpawnNoiseMaker("Weapon/Switch");
		EMGR ACEG 1 EOA_WeaponReady(WRF_NOFIRE|WRF_NOBOB, EOA_ALLOWMANTLE|EOA_DISABLEHASTE);//ABCDEFGH 1 
		//"####" "#" 0 A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM));
		Goto ReadyLoop;
	ReRaise:
		TNT1 A 0 A_WeaponOffset(-144, 32);
		EMGR ABDEGH 1//ABCDEFGH 1
		{
			EOA_WeaponReady(WRF_NOFIRE|WRF_NOBOB, EOA_ALLOWMANTLE|EOA_DISABLEHASTE);
			A_WeaponOffset(24, 0, WOF_KEEPY|WOF_ADD);
		}
		//"####" "#" 0 A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH|WRF_ALLOWZOOM)
	ReadyLoop:
		EMGP A 1 EOA_WeaponReady(WRF_NOPRIMARY * (GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)|WRF_ALLOWZOOM * !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ZOOM), EOA_ALLOWMANTLE|EOA_ALLOWEQUIPMENT|EOA_DISABLEHASTE);
		Wait;
	Fire:
		EMGP A 0
		{
			//A_SetSpeed(1.0);
			A_takeinventory("EOA_BulletAmmo", 1);
			EOA_SpawnNoiseMaker("EMG/Fire", 1);
			EOA_SpawnCustomDynamicLight("CGNLight", DynamicLight.PulseLight, (25, 153, 255), 48, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 2, (0, 0, Height / 2), 0.1);
			
			If (CountInv("PowerQDMG"))
			{
				EOA_SpawnNoiseMaker("QuadDamage/Shot", 18);
			}
			EOA_FireBullets(1 + 0.15 * CountInv("EMGAccuracyCounter"), 1 + 0.15 * CountInv("EMGAccuracyCounter"), -1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ, 32767, "EMGTracer", GetViewZ(), 3 + GetRelVelY() / 6, 1.25);
			EOA_SetWeaponRecoilOffset(frandompick(-1, -0.5, 0.5, 1), -1.5, 0, 0.25);
			A_AlertMonsters();
			//EOA_SpawnNoiseMaker(1, "", 6);
			A_ZoomFactor(1);
			A_GiveInventory("EMGAccuracyCounter", 15);
			A_FireCustomMissile("EMGCasingSpawner", -40, 0, 3, 1);
		}
		EMGP BCD 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE);
		EMGP A 0
		{
			A_takeinventory("EOA_BulletAmmo", 1);
			//A_SetSpeed(1.0);
			EOA_SpawnNoiseMaker("EMG/Fire", 1);
			EOA_SpawnCustomDynamicLight("CGNLight", DynamicLight.PulseLight, (25, 153, 255), 48, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 2, (0, 0, Height / 2), 0.1);
			
			If (CountInv("PowerQDMG"))
			{
				EOA_SpawnNoiseMaker("QuadDamage/Shot", 18);
			}
			EOA_FireBullets(1 + 0.15 * CountInv("EMGAccuracyCounter"), 1 + 0.15 * CountInv("EMGAccuracyCounter"), -1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ, 32767, "EMGTracer", GetViewZ(), 3 + GetRelVelY() / 6, 1.25);
			EOA_SetWeaponRecoilOffset(frandompick(-1, -0.5, 0.5, 1), -1.5, 0, 0.25);
			A_AlertMonsters();
			//EOA_SpawnNoiseMaker(1, "", 6);
			A_ZoomFactor(1);
			A_GiveInventory("EMGAccuracyCounter", 15);
			A_FireCustomMissile("EMGCasingSpawner", -40, 0, 3, 1);
		}
		EMGP BCDE 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE);
		EMGP A 0
		{
			A_takeinventory("EOA_BulletAmmo", 1);
			//A_SetSpeed(1.0);
			EOA_SpawnNoiseMaker("EMG/Fire", 1);
			EOA_SpawnCustomDynamicLight("CGNLight", DynamicLight.PulseLight, (25, 153, 255), 48, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 2, (0, 0, Height / 2), 0.1);
			
			If (CountInv("PowerQDMG"))
			{
				EOA_SpawnNoiseMaker("QuadDamage/Shot", 18);
			}
			EOA_FireBullets(1 + 0.15 * CountInv("EMGAccuracyCounter"), 1 + 0.15 * CountInv("EMGAccuracyCounter"), -1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ, 32767, "EMGTracer", GetViewZ(), 3 + GetRelVelY() / 6, 1.25);
			EOA_SetWeaponRecoilOffset(frandompick(-1, -0.5, 0.5, 1), -1.5, 0, 0.25);
			A_AlertMonsters();
			//EOA_SpawnNoiseMaker(1, "", 6);
			A_ZoomFactor(1);
			A_GiveInventory("EMGAccuracyCounter", 15);
			A_FireCustomMissile("EMGCasingSpawner", -40, 0, 3, 1);
		}
		EMGP BCDEFGH 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE, EOA_ALLOWMANTLE);
		EMGP IJ 1 EOA_WeaponReady(WRF_NOSWITCH|WRF_NOPRIMARY * (GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)|WRF_NOSECONDARY, EOA_ALLOWMANTLE);
		Goto ReadyLoop;
	AltFire:
		EMGP A 0 
		{
			A_TakeInventory("EMGAccuracyCounter");
			A_ZoomFactor(1.25, ZOOM_NOSCALETURNING);
			If (!CountInv("EMGCooldownCounter"))
			{
				A_GiveInventory("EMGCharging");
			}
		}
		EMGP KLMN 1
		{
			A_WeaponOffset(-10, 0, WOF_KEEPY|WOF_ADD);
			If (CountInv("Grabbing_A_Ledge"))
			{
				Return ResolveState ("LedgeClimb");
			}
			Else
			{
				Return ResolveState (Null);
			}
		}
		EMGP A 0 EOA_SpawnNoiseMaker("EMG/Vent", 5);
	ChargeIdle:
		EMGP O 1; //EOA_SpawnNoiseMaker(1, "EMG/ChargeIdle", 1, 1.0, 1);
		TNT1 A 0
		{
			if(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)
			{
			
				Return ResolveState ("Uncharge");
			}
			
			if(GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK)
			{
					
				Return ResolveState ("Discharge");
			}
			
			Else
			{
				Return ResolveState (Null);
			}
		}
		/*EMGP O 0
		{
			EOA_WeaponReady(WRF_NOFIRE, EOA_ALLOWMANTLE);
			A_WeaponOffset(-50, 0, WOF_KEEPY|WOF_INTERPOLATE);
			If (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK && CountInv("EMGCooldownCounter"))
			{
				Return ResolveState ("ChargeIdle");
			}
			Else If (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)
			{
				Return ResolveState ("Charge");
			}
			Else
			{
				Return ResolveState (Null);
			}
		}*/
		loop;
	ChargeSound:
		EMGP A 0 
		{
			//EOA_SpawnNoiseMaker(1, "EMG/Charge", 6);
			A_GiveInventory("EMGCharging");
		}
	Charging:
		EMGP O 1 
		{
			EOA_WeaponReady(WRF_NOFIRE, EOA_WEAPSPEEDUPGRADE * CountInv("ChargeEfficiency"));
			A_WeaponOffset(-50, 0, WOF_KEEPY|WOF_INTERPOLATE);
			A_GiveInventory("EMGChargeCounter");
			If (CountInv("Grabbing_A_Ledge"))
			{
				Return ResolveState ("Uncharge");
			}
			Return ResolveState (Null);
		}
		EMGP O 0
		{
			A_JumpIfInventory("EMGChargeCounter", 0, "Charged");
			A_JumpIf((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK), "Discharge");
			A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "Charging");
		}
	Goto Uncharge;
	Charged:
		EMGP A 0; //EOA_SpawnNoiseMaker(1, "EMG/ChargeBeep", 6);
	ChargedLoop:
		EMGP O 1 
		{
			EOA_WeaponReady(WRF_NOFIRE);
			A_WeaponOffset(-50, 0, WOF_KEEPY|WOF_INTERPOLATE);
			If (CountInv("Grabbing_A_Ledge"))
			{
				Return ResolveState ("Uncharge");
			}
			Return ResolveState (Null);
		}
		EMGP O 0 
		{	
			A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK, "Discharge");
			A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "ChargedLoop");
		}
		Goto Uncharge;
	Discharge:
		EMGP A 0
		{
			A_TakeInventory("EMGCharging");
			//EOA_SpawnNoiseMaker(1, "", 1);
			//EOA_SpawnNoiseMaker(1, "", 6);
			EOA_SpawnCustomDynamicLight("CGNLight", DynamicLight.PulseLight, (25, 153, 255), 48, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 2, (0, 0, Height / 2), 0.1);
			
			EOA_SpawnNoiseMaker("EMG/ChargeFire", 1);
			If (CountInv("PowerQDMG"))
			{
				EOA_SpawnNoiseMaker("QuadDamage/Shot", 18); 
			}
			EOA_FireBullets(0, 0, 1, 0, "EOA_NullPuff", FBF_NORANDOMPUFFZ, 32767, "EMGChargeTracer", -1 + GetViewZ(), 2 + GetRelVelY() / 6, 2.5);
			A_TakeInventory("EOA_BulletAmmo", 1);
			EOA_SetWeaponRecoilOffset(frandompick(-1, -0.5, 0.5, 1), -3, 0, 0.25);
			A_AlertMonsters();
			A_FireCustomMissile("EMGCasingSpawner", -40, 0, 1, 1);
		}
		EMGP PQRSTTTTTUUVWXY 1
		{
			EOA_WeaponReady(WRF_NOFIRE, EOA_ALLOWMANTLE);
			A_WeaponOffset(-50, 0, WOF_KEEPY|WOF_INTERPOLATE);
		}
		goto ChargeIdle;
	Uncharge:
		EMGP A 0 
		{
			//EOA_SpawnNoiseMaker(1, "", 1);
			//EOA_SpawnNoiseMaker(1, "", 6);
			A_TakeInventory("EMGChargeCounter");
		}
		EMGP A 0
		{
			A_TakeInventory("EMGCharging");
			A_ZoomFactor(1);
		}
		EMGP NMLK 1
		{
			A_WeaponOffset(10, 0, WOF_KEEPY|WOF_ADD);
			If (CountInv("Grabbing_A_Ledge"))
			{
				Return ResolveState ("LedgeClimb");
			}
			Return ResolveState (Null);
		}
		Goto ReadyLoop;
	Zoom:
		EMGT A 0;
		Goto Super::Melee;
	UseEquipment:
		EMGT A 0;
		Goto Super::UseEquipment;
	}
}


Class EMGTracer : EOA_FastProjectile
{
Default
	{
		Radius 0.144;
		Height 0.288;
		//Speed 200
		Damage 8;//(random(8, 10))
		Decal "EMGPuffScorch";
		Scale 0.375;
		RenderStyle "Add";
		EOA_Projectile.PuffType "EMGPuff";
		+DONTBLAST
		+NOEXTREMEDEATH
		+DONTREFLECT
		}
		States
		{
		Spawn:
			TRAC A -1 Bright;
			Wait;
		Death:
		Crash:
			TNT1 A 1
			{
				A_StartSound("EMG/Impact",CHAN_WEAPON,CHANF_OVERLAP);
				EOA_SpawnCustomDynamicLight("EMGLight", DynamicLight.PulseLight, (25, 204, 255), 48, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 4, (0, 0, Height / 2), 0.1);
				}
			Stop;
		XDeath:
			TNT1 A 1
			{
				A_StartSound("Projectile/HitFlesh",CHAN_WEAPON,CHANF_OVERLAP);
				EOA_SpawnCustomDynamicLight("EMGLight", DynamicLight.PulseLight, (25, 204, 255), 48, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 4, (0, 0, Height / 2), 0.1);
				}
			Stop;
		}
}

Class EMGChargeTracer : EMGTracer
{
	Default
	{
	DamageFunction 25;
	Decal "EMGPuffBigScorch";
	EOA_Projectile.PuffType "ChargedEMGPuff";
	}
	States
	{
	Death:
	Crash:
		TNT1 A 1
		{
			A_StartSound("EMG/Impact", 1);
			EOA_SpawnCustomDynamicLight("EMGLight", DynamicLight.PulseLight, (25, 204, 255), 48, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 4, (0, 0, Height / 2), 0.1);
			}
		Stop;
	XDeath:
		TNT1 A 1
		{
			A_StartSound("Projectile/HitFlesh", 1);
			EOA_SpawnCustomDynamicLight("EMGLight", DynamicLight.PulseLight, (25, 204, 255), 48, 1, DYNAMICLIGHT.LF_ADDITIVE|DYNAMICLIGHT.LF_ATTENUATE, 4, (0, 0, Height / 2), 0.1);
			}
		Stop;
	}
}

Class EMGPuff : Actor
{
Default
{
	RenderStyle "Add";
	Alpha 0.99;
	Scale 0.125;
	//Translation "0:255=%[0,0,0]:[0.6,1.0,1.8]"
	+BRIGHT
	+ROLLSPRITE
	+ROLLCENTER
	+NOINTERACTION
	+FORCEXYBILLBOARD
	+DONTBLAST
	+DONTTHRUST
}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_SetRoll(random(0, 359));
			A_SpawnItemEx("EOA_PlasmaPuff", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE);
			A_SpawnItemEx("EMGPuffFXSmall", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			A_SetScale(0.2);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("GaussCannonImpactSpark", 0, 0, 0, frandom(0, 5), 0, frandom(-5, 5), random(1, 360), SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE);
		TNT1 A 0 A_SetScale(0.25);
		TNT1 A 0 A_Jump(256, "FX1", "FX2");
	FX1:
		PPUF ACEGIKMO 1;
		Stop;
	FX2:
		PPUF BDFHJLNP 1;
		Stop;
	}
}

Class ChargedEMGPuff : EMGPuff
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_SetRoll(random(0, 359));
			A_SetScale(0.125);
			A_SpawnItemEx("EOA_PlasmaPuff", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE);
			A_SpawnItemEx("EMGPuffFX", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			A_SetScale(0.2);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("GaussCannonImpactSpark", 0, 0, 0, frandom(0, 5), 0, frandom(-5, 5), random(1, 360), SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE);
		TNT1 A 0 A_SetScale(0.5);
		TNT1 A 0 A_Jump(256, "FX1", "FX2");
		Stop;
	}
}

Class EMGPuffFX : Actor
{
	Default
	{
	RenderStyle "Add";
	+BRIGHT
	+DONTBLAST
	+FORCEXYBILLBOARD
	+NOINTERACTION
	+ROLLSPRITE
	+ROLLCENTER
	Translation "0:255=%[0,0,0]:[0.85,0.98,1.20]";
	Scale 0.025;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetRoll(random(0, 359));
		ZXP0 GIKMOQSUWY 1 Bright A_SetScale(ScaleX + 0.015 / (1 + !CheckClass("EMGPuffFX")));
		ZXP1 ACE 1 Bright;
		Stop;
	}
}

Class EMGPuffFXSmall : EMGPuffFX
{
	Default
	{
		Scale 0.0125;
	}
}

Class EMGPuffPlain : EMGPuff
{
	Default
	{
		Scale 0.25;
			}
			States
			{
				Spawn:
					TNT1 A 0 NoDelay A_SetRoll(random(0, 359));
					TNT1 A 0 A_Jump(256, "FX1", "FX2");
					Goto FX1;
	}
}

//Code written by strongbelly, edited further by me [DoomKrakken]...
Class EMGCasingSpawner : Actor
{
	Default
	{
	+CLIENTSIDEONLY
	Radius 1;
	Height 1;
	Speed 17;
	PROJECTILE;
	+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay A_SpawnItemEx("EMGCasing", 0, 0, frandom(2, 3), frandom(1.5, 1.8), frandom(1.8, 2.0), frandom(1.7, 2.0));
		Stop;
	}
}

Class EMGCasing : Actor
{
	Default
	{
		Projectile;
		Radius 2;
		Height 4;
		Speed 2;
		Mass 4;
		BounceFactor 0.4;
		Scale 0.15;
		BounceType "Doom";
		BounceSound "Casing/Brass";
		+BOUNCEONACTORS
		+FLOORCLIP
		+FORCEXYBILLBOARD
		+ROLLSPRITE
		+ROLLCENTER
		-NOGRAVITY
		+NOTRIGGER
		}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_ChangeVelocity(0, frandom(0.0, 2.0), frandom(0.0, 2.0), CVF_RELATIVE);
	SpawnLoop:
		PBCS ABCDEFGH 1 A_SetRoll(Roll - 30);
		Loop;
	Death:
		TNT1 A 0 A_SetRoll(0);
		TNT1 A 0 A_Jump(256, random(1, 3));
		PBCS DH 0 A_Jump(256, "SetSprite");
	SetSprite:
		"####" "#" 400 A_StartSound("Casing/Brass", 1);
		"####" "##########" 1 A_FadeOut(0.1);
		Stop;
	}
}